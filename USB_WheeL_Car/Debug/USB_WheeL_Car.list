
USB_WheeL_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000985c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  0800a1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007cc  20000090  0800a27c  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000085c  0800a27c  0002085c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020e73  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003cc2  00000000  00000000  00040f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001128  00000000  00000000  00044bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fb0  00000000  00000000  00045d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009d89  00000000  00000000  00046cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000606f  00000000  00000000  00050a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00056ac8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e64  00000000  00000000  00056b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080099f4 	.word	0x080099f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080099f4 	.word	0x080099f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <USBH_HID_EventCallback>:
static void MX_LPUART1_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b0a3      	sub	sp, #140	; 0x8c
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef hid;
	HID_KEYBD_Info_TypeDef *key;
	hid = USBH_HID_GetDeviceType(phost);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f005 fd97 	bl	80060ec <USBH_HID_GetDeviceType>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	key = USBH_HID_GetKeybdInfo(phost);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f005 fecd 	bl	8006364 <USBH_HID_GetKeybdInfo>
 80005ca:	6738      	str	r0, [r7, #112]	; 0x70

	char tmp[100];

	sprintf(tmp, "%d, %d, %d, %d, %d, %d\n\r", key->keys[0], key->keys[1], key->keys[2], key->keys[3], key->keys[4], key->keys[5]);
 80005cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	461d      	mov	r5, r3
 80005d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005d4:	7a9b      	ldrb	r3, [r3, #10]
 80005d6:	461e      	mov	r6, r3
 80005d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005da:	7adb      	ldrb	r3, [r3, #11]
 80005dc:	461a      	mov	r2, r3
 80005de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005e0:	7b1b      	ldrb	r3, [r3, #12]
 80005e2:	4619      	mov	r1, r3
 80005e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005e6:	7b5b      	ldrb	r3, [r3, #13]
 80005e8:	461c      	mov	r4, r3
 80005ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80005ec:	7b9b      	ldrb	r3, [r3, #14]
 80005ee:	f107 000c 	add.w	r0, r7, #12
 80005f2:	9303      	str	r3, [sp, #12]
 80005f4:	9402      	str	r4, [sp, #8]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	4633      	mov	r3, r6
 80005fc:	462a      	mov	r2, r5
 80005fe:	490a      	ldr	r1, [pc, #40]	; (8000628 <USBH_HID_EventCallback+0x78>)
 8000600:	f008 f9d4 	bl	80089ac <siprintf>
	HAL_UART_Transmit(&hlpuart1, tmp, strlen(tmp), 1000);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fdf1 	bl	80001f0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f107 010c 	add.w	r1, r7, #12
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <USBH_HID_EventCallback+0x7c>)
 800061c:	f003 fd88 	bl	8004130 <HAL_UART_Transmit>

}
 8000620:	bf00      	nop
 8000622:	377c      	adds	r7, #124	; 0x7c
 8000624:	46bd      	mov	sp, r7
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	08009a0c 	.word	0x08009a0c
 800062c:	200000bc 	.word	0x200000bc

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fabe 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f814 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f8a2 	bl	8000784 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000640:	f000 f874 	bl	800072c <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 8000644:	f007 fd16 	bl	8008074 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&hlpuart1, helloMessage, sizeof(helloMessage), 1000);
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	2215      	movs	r2, #21
 800064e:	4903      	ldr	r1, [pc, #12]	; (800065c <main+0x2c>)
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <main+0x30>)
 8000652:	f003 fd6d 	bl	8004130 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000656:	f007 fd33 	bl	80080c0 <MX_USB_HOST_Process>
 800065a:	e7fc      	b.n	8000656 <main+0x26>
 800065c:	08009fc4 	.word	0x08009fc4
 8000660:	200000bc 	.word	0x200000bc

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f008 f8aa 	bl	80087cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068a:	f002 f981 	bl	8002990 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000694:	f000 f942 	bl	800091c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f002 f95c 	bl	8002954 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xc4>)
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xc4>)
 80006a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006a4:	f023 0318 	bic.w	r3, r3, #24
 80006a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ac:	2314      	movs	r3, #20
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006c8:	2305      	movs	r3, #5
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80006cc:	2347      	movs	r3, #71	; 0x47
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80006d8:	2306      	movs	r3, #6
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f9cb 	bl	8002a7c <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006ec:	f000 f916 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006f8:	2390      	movs	r3, #144	; 0x90
 80006fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fdce 	bl	80032ac <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000716:	f000 f901 	bl	800091c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800071a:	f003 fae1 	bl	8003ce0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071e:	bf00      	nop
 8000720:	3758      	adds	r7, #88	; 0x58
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_LPUART1_UART_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 800076a:	f003 fc93 	bl	8004094 <HAL_UART_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f8d2 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000bc 	.word	0x200000bc
 8000780:	40008000 	.word	0x40008000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4a43      	ldr	r2, [pc, #268]	; (80008a8 <MX_GPIO_Init+0x124>)
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_GPIO_Init+0x124>)
 800079e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4a3d      	ldr	r2, [pc, #244]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4a37      	ldr	r2, [pc, #220]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	4a31      	ldr	r2, [pc, #196]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_GPIO_Init+0x124>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007fa:	f002 f92f 	bl	8002a5c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <MX_GPIO_Init+0x124>)
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_GPIO_Init+0x124>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_GPIO_Init+0x124>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_GPIO_Init+0x128>)
 800081e:	f000 fd01 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <MX_GPIO_Init+0x12c>)
 800082a:	f000 fcfb 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x130>)
 8000846:	f000 fb5b 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800084a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4812      	ldr	r0, [pc, #72]	; (80008ac <MX_GPIO_Init+0x128>)
 8000864:	f000 fb4c 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000868:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_GPIO_Init+0x12c>)
 800087e:	f000 fb3f 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000882:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0x12c>)
 800089c:	f000 fb30 	bl	8000f00 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400
 80008b0:	48001800 	.word	0x48001800
 80008b4:	48000800 	.word	0x48000800

080008b8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&hlpuart1, &*c, 1, 10);
 80008c6:	f107 010c 	add.w	r1, r7, #12
 80008ca:	230a      	movs	r3, #10
 80008cc:	2201      	movs	r2, #1
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <__io_putchar+0x28>)
 80008d0:	f003 fc2e 	bl	8004130 <HAL_UART_Transmit>
	return ch;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000bc 	.word	0x200000bc

080008e4 <_write>:

int _write(int file, char *ptr, int len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e009      	b.n	800090a <_write+0x26>
		__io_putchar(*ptr++);
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	60ba      	str	r2, [r7, #8]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffda 	bl	80008b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf1      	blt.n	80008f6 <_write+0x12>
	}
	return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000922:	e7fe      	b.n	8000922 <Error_Handler+0x6>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	; 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	; 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	; 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	228c      	movs	r2, #140	; 0x8c
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f007 ff1d 	bl	80087cc <memset>
  if(huart->Instance==LPUART1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <HAL_UART_MspInit+0xb4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13d      	bne.n	8000a18 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800099c:	2320      	movs	r3, #32
 800099e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fea1 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b4:	f7ff ffb2 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009e8:	f002 f838 	bl	8002a5c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a06:	2308      	movs	r3, #8
 8000a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0xbc>)
 8000a14:	f000 fa74 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	37b0      	adds	r7, #176	; 0xb0
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40008000 	.word	0x40008000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48001800 	.word	0x48001800

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f8f0 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <OTG_FS_IRQHandler+0x10>)
 8000a86:	f000 fe4b 	bl	8001720 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000554 	.word	0x20000554

08000a94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aa6:	68bc      	ldr	r4, [r7, #8]
 8000aa8:	1c63      	adds	r3, r4, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	f3af 8000 	nop.w
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
	}

return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
	...

08000ad0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x50>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x16>
		heap_end = &end;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <_sbrk+0x50>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <_sbrk+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <_sbrk+0x50>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <_sbrk+0x50>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	466a      	mov	r2, sp
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d907      	bls.n	8000b0a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000afa:	f007 fe2d 	bl	8008758 <__errno>
 8000afe:	4602      	mov	r2, r0
 8000b00:	230c      	movs	r3, #12
 8000b02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	e006      	b.n	8000b18 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <_sbrk+0x50>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <_sbrk+0x50>)
 8000b14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000ac 	.word	0x200000ac
 8000b24:	2000085c 	.word	0x2000085c

08000b28 <_close>:

int _close(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b50:	605a      	str	r2, [r3, #4]
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_isatty>:

int _isatty(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	return 1;
 8000b68:	2301      	movs	r3, #1
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
	return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f95c 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f80d 	bl	8000be4 <HAL_InitTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e001      	b.n	8000bda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd6:	f7ff fea5 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d023      	beq.n	8000c40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_InitTick+0x70>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f969 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10f      	bne.n	8000c3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d809      	bhi.n	8000c34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f933 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_InitTick+0x74>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e004      	b.n	8000c44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e001      	b.n	8000c44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000140 	.word	0x20000140

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000140 	.word	0x20000140

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_Delay+0x40>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad2      	subs	r2, r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3f7      	bcc.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	095b      	lsrs	r3, r3, #5
 8000d5e:	79fa      	ldrb	r2, [r7, #7]
 8000d60:	f002 021f 	and.w	r2, r2, #31
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	490d      	ldr	r1, [pc, #52]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	1e5a      	subs	r2, r3, #1
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	401a      	ands	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	1e59      	subs	r1, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff90 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff2b 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff40 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff33 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa2 	bl	8000e38 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e166      	b.n	80011de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8158 	beq.w	80011d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d005      	beq.n	8000f40 <HAL_GPIO_Init+0x40>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d017      	beq.n	8000fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80b2 	beq.w	80011d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	4a61      	ldr	r2, [pc, #388]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 8001076:	4b61      	ldr	r3, [pc, #388]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6613      	str	r3, [r2, #96]	; 0x60
 8001080:	4b5e      	ldr	r3, [pc, #376]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800108c:	4a5c      	ldr	r2, [pc, #368]	; (8001200 <HAL_GPIO_Init+0x300>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b6:	d02b      	beq.n	8001110 <HAL_GPIO_Init+0x210>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_GPIO_Init+0x304>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d025      	beq.n	800110c <HAL_GPIO_Init+0x20c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_GPIO_Init+0x308>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d01f      	beq.n	8001108 <HAL_GPIO_Init+0x208>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_GPIO_Init+0x30c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d019      	beq.n	8001104 <HAL_GPIO_Init+0x204>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d013      	beq.n	8001100 <HAL_GPIO_Init+0x200>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d00d      	beq.n	80010fc <HAL_GPIO_Init+0x1fc>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x1f8>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d101      	bne.n	80010f4 <HAL_GPIO_Init+0x1f4>
 80010f0:	2307      	movs	r3, #7
 80010f2:	e00e      	b.n	8001112 <HAL_GPIO_Init+0x212>
 80010f4:	2308      	movs	r3, #8
 80010f6:	e00c      	b.n	8001112 <HAL_GPIO_Init+0x212>
 80010f8:	2306      	movs	r3, #6
 80010fa:	e00a      	b.n	8001112 <HAL_GPIO_Init+0x212>
 80010fc:	2305      	movs	r3, #5
 80010fe:	e008      	b.n	8001112 <HAL_GPIO_Init+0x212>
 8001100:	2304      	movs	r3, #4
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x212>
 8001104:	2303      	movs	r3, #3
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x212>
 8001108:	2302      	movs	r3, #2
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x212>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x212>
 8001110:	2300      	movs	r3, #0
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001122:	4937      	ldr	r1, [pc, #220]	; (8001200 <HAL_GPIO_Init+0x300>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001154:	4a32      	ldr	r2, [pc, #200]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x320>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117e:	4a28      	ldr	r2, [pc, #160]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f47f ae91 	bne.w	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	48000c00 	.word	0x48000c00
 8001210:	48001000 	.word	0x48001000
 8001214:	48001400 	.word	0x48001400
 8001218:	48001800 	.word	0x48001800
 800121c:	48001c00 	.word	0x48001c00
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001240:	e002      	b.n	8001248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	b08f      	sub	sp, #60	; 0x3c
 8001258:	af0a      	add	r7, sp, #40	; 0x28
 800125a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e054      	b.n	8001310 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f006 ff55 	bl	8008130 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fc47 	bl	8004b38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	687e      	ldr	r6, [r7, #4]
 80012b2:	466d      	mov	r5, sp
 80012b4:	f106 0410 	add.w	r4, r6, #16
 80012b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012c8:	1d33      	adds	r3, r6, #4
 80012ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f003 fbf6 	bl	8004abe <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fc3e 	bl	8004b5a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	687e      	ldr	r6, [r7, #4]
 80012e6:	466d      	mov	r5, sp
 80012e8:	f106 0410 	add.w	r4, r6, #16
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80012fc:	1d33      	adds	r3, r6, #4
 80012fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001300:	6838      	ldr	r0, [r7, #0]
 8001302:	f003 fdc1 	bl	8004e88 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001318 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af04      	add	r7, sp, #16
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4603      	mov	r3, r0
 8001328:	70fb      	strb	r3, [r7, #3]
 800132a:	460b      	mov	r3, r1
 800132c:	70bb      	strb	r3, [r7, #2]
 800132e:	4613      	mov	r3, r2
 8001330:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_HCD_HC_Init+0x28>
 800133c:	2302      	movs	r3, #2
 800133e:	e076      	b.n	800142e <HAL_HCD_HC_Init+0x116>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	212c      	movs	r1, #44	; 0x2c
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	333d      	adds	r3, #61	; 0x3d
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	212c      	movs	r1, #44	; 0x2c
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	4413      	add	r3, r2
 8001366:	3338      	adds	r3, #56	; 0x38
 8001368:	787a      	ldrb	r2, [r7, #1]
 800136a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	212c      	movs	r1, #44	; 0x2c
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	4413      	add	r3, r2
 8001378:	3340      	adds	r3, #64	; 0x40
 800137a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800137c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	212c      	movs	r1, #44	; 0x2c
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	4413      	add	r3, r2
 800138a:	3339      	adds	r3, #57	; 0x39
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	333f      	adds	r3, #63	; 0x3f
 800139e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	78ba      	ldrb	r2, [r7, #2]
 80013a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013ac:	b2d0      	uxtb	r0, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	212c      	movs	r1, #44	; 0x2c
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	333a      	adds	r3, #58	; 0x3a
 80013ba:	4602      	mov	r2, r0
 80013bc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80013be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da09      	bge.n	80013da <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	212c      	movs	r1, #44	; 0x2c
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	333b      	adds	r3, #59	; 0x3b
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e008      	b.n	80013ec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	212c      	movs	r1, #44	; 0x2c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	333b      	adds	r3, #59	; 0x3b
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	212c      	movs	r1, #44	; 0x2c
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	333c      	adds	r3, #60	; 0x3c
 80013fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013fe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	787c      	ldrb	r4, [r7, #1]
 8001406:	78ba      	ldrb	r2, [r7, #2]
 8001408:	78f9      	ldrb	r1, [r7, #3]
 800140a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	4623      	mov	r3, r4
 800141c:	f003 fe84 	bl	8005128 <USB_HC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}

08001436 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_HCD_HC_Halt+0x1e>
 8001450:	2302      	movs	r3, #2
 8001452:	e00f      	b.n	8001474 <HAL_HCD_HC_Halt+0x3e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	78fa      	ldrb	r2, [r7, #3]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f87e 	bl	8005566 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	70fb      	strb	r3, [r7, #3]
 800148e:	460b      	mov	r3, r1
 8001490:	70bb      	strb	r3, [r7, #2]
 8001492:	4613      	mov	r3, r2
 8001494:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	333b      	adds	r3, #59	; 0x3b
 80014a4:	78ba      	ldrb	r2, [r7, #2]
 80014a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	212c      	movs	r1, #44	; 0x2c
 80014ae:	fb01 f303 	mul.w	r3, r1, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	333f      	adds	r3, #63	; 0x3f
 80014b6:	787a      	ldrb	r2, [r7, #1]
 80014b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80014ba:	7c3b      	ldrb	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3342      	adds	r3, #66	; 0x42
 80014ce:	2203      	movs	r2, #3
 80014d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	333d      	adds	r3, #61	; 0x3d
 80014e0:	7f3a      	ldrb	r2, [r7, #28]
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e008      	b.n	80014f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	212c      	movs	r1, #44	; 0x2c
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	3342      	adds	r3, #66	; 0x42
 80014f4:	2202      	movs	r2, #2
 80014f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	f200 80c6 	bhi.w	800168c <HAL_HCD_HC_SubmitRequest+0x210>
 8001500:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	08001519 	.word	0x08001519
 800150c:	08001679 	.word	0x08001679
 8001510:	0800157d 	.word	0x0800157d
 8001514:	080015fb 	.word	0x080015fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001518:	7c3b      	ldrb	r3, [r7, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 80b8 	bne.w	8001690 <HAL_HCD_HC_SubmitRequest+0x214>
 8001520:	78bb      	ldrb	r3, [r7, #2]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 80b4 	bne.w	8001690 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001528:	8b3b      	ldrh	r3, [r7, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3355      	adds	r3, #85	; 0x55
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3355      	adds	r3, #85	; 0x55
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	212c      	movs	r1, #44	; 0x2c
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4413      	add	r3, r2
 8001560:	3342      	adds	r3, #66	; 0x42
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001566:	e093      	b.n	8001690 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	212c      	movs	r1, #44	; 0x2c
 800156e:	fb01 f303 	mul.w	r3, r1, r3
 8001572:	4413      	add	r3, r2
 8001574:	3342      	adds	r3, #66	; 0x42
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
      break;
 800157a:	e089      	b.n	8001690 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800157c:	78bb      	ldrb	r3, [r7, #2]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11d      	bne.n	80015be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	212c      	movs	r1, #44	; 0x2c
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	4413      	add	r3, r2
 800158e:	3355      	adds	r3, #85	; 0x55
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	212c      	movs	r1, #44	; 0x2c
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	3342      	adds	r3, #66	; 0x42
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80015a8:	e073      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	3342      	adds	r3, #66	; 0x42
 80015b8:	2202      	movs	r2, #2
 80015ba:	701a      	strb	r2, [r3, #0]
      break;
 80015bc:	e069      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	212c      	movs	r1, #44	; 0x2c
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	3354      	adds	r3, #84	; 0x54
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	212c      	movs	r1, #44	; 0x2c
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3342      	adds	r3, #66	; 0x42
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
      break;
 80015e4:	e055      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	212c      	movs	r1, #44	; 0x2c
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	3342      	adds	r3, #66	; 0x42
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
      break;
 80015f8:	e04b      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80015fa:	78bb      	ldrb	r3, [r7, #2]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11d      	bne.n	800163c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	212c      	movs	r1, #44	; 0x2c
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	3355      	adds	r3, #85	; 0x55
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3342      	adds	r3, #66	; 0x42
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001626:	e034      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3342      	adds	r3, #66	; 0x42
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
      break;
 800163a:	e02a      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3354      	adds	r3, #84	; 0x54
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	3342      	adds	r3, #66	; 0x42
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
      break;
 8001662:	e016      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3342      	adds	r3, #66	; 0x42
 8001672:	2202      	movs	r2, #2
 8001674:	701a      	strb	r2, [r3, #0]
      break;
 8001676:	e00c      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3342      	adds	r3, #66	; 0x42
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
      break;
 800168a:	e002      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800168c:	bf00      	nop
 800168e:	e000      	b.n	8001692 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001690:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	3344      	adds	r3, #68	; 0x44
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	8b3a      	ldrh	r2, [r7, #24]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	202c      	movs	r0, #44	; 0x2c
 80016ac:	fb00 f303 	mul.w	r3, r0, r3
 80016b0:	440b      	add	r3, r1
 80016b2:	334c      	adds	r3, #76	; 0x4c
 80016b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	3360      	adds	r3, #96	; 0x60
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3350      	adds	r3, #80	; 0x50
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3339      	adds	r3, #57	; 0x39
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3361      	adds	r3, #97	; 0x61
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	222c      	movs	r2, #44	; 0x2c
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	3338      	adds	r3, #56	; 0x38
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f003 fe1b 	bl	800534c <USB_HC_StartXfer>
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fb64 	bl	8004e04 <USB_GetMode>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	f040 80f6 	bne.w	8001930 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fb48 	bl	8004dde <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80ec 	beq.w	800192e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fb3f 	bl	8004dde <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800176a:	d104      	bne.n	8001776 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001774:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fb2f 	bl	8004dde <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800178a:	d104      	bne.n	8001796 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001794:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fb1f 	bl	8004dde <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017aa:	d104      	bne.n	80017b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fb0f 	bl	8004dde <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d103      	bne.n	80017d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fb01 	bl	8004dde <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017e6:	d11c      	bne.n	8001822 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10f      	bne.n	8001822 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001802:	2110      	movs	r1, #16
 8001804:	6938      	ldr	r0, [r7, #16]
 8001806:	f003 f9f5 	bl	8004bf4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800180a:	6938      	ldr	r0, [r7, #16]
 800180c:	f003 fa26 	bl	8004c5c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fbba 	bl	8004f90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f006 fd47 	bl	80082b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fad9 	bl	8004dde <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001836:	d102      	bne.n	800183e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f001 f818 	bl	800286e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 facb 	bl	8004dde <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b08      	cmp	r3, #8
 8001850:	d106      	bne.n	8001860 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f006 fd10 	bl	8008278 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f003 faba 	bl	8004dde <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b10      	cmp	r3, #16
 8001872:	d101      	bne.n	8001878 <HAL_HCD_IRQHandler+0x158>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_HCD_IRQHandler+0x15a>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d012      	beq.n	80018a4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	6992      	ldr	r2, [r2, #24]
 8001888:	f022 0210 	bic.w	r2, r2, #16
 800188c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 ff1c 	bl	80026cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	6992      	ldr	r2, [r2, #24]
 800189e:	f042 0210 	orr.w	r2, r2, #16
 80018a2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fa98 	bl	8004dde <USB_ReadInterrupts>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b8:	d13a      	bne.n	8001930 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fe40 	bl	8005544 <USB_HC_ReadInterrupt>
 80018c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e025      	b.n	8001918 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d018      	beq.n	8001912 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	015a      	lsls	r2, r3, #5
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f6:	d106      	bne.n	8001906 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8ab 	bl	8001a5a <HCD_HC_IN_IRQHandler>
 8001904:	e005      	b.n	8001912 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fbda 	bl	80020c6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	429a      	cmp	r2, r3
 8001920:	d8d4      	bhi.n	80018cc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	e000      	b.n	8001930 <HAL_HCD_IRQHandler+0x210>
      return;
 800192e:	bf00      	nop
    }
  }
}
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_HCD_Start+0x16>
 8001948:	2302      	movs	r3, #2
 800194a:	e013      	b.n	8001974 <HAL_HCD_Start+0x3e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fb80 	bl	8005060 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f8d6 	bl	8004b16 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_HCD_Stop+0x16>
 800198e:	2302      	movs	r3, #2
 8001990:	e00d      	b.n	80019ae <HAL_HCD_Stop+0x32>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fee5 	bl	800576e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fb20 	bl	8005008 <USB_ResetPort>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3360      	adds	r3, #96	; 0x60
 80019ec:	781b      	ldrb	r3, [r3, #0]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	3350      	adds	r3, #80	; 0x50
 8001a14:	681b      	ldr	r3, [r3, #0]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fb68 	bl	8005104 <USB_GetCurrentFrame>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fb43 	bl	80050d6 <USB_GetHostSpeed>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d11a      	bne.n	8001ac0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a96:	461a      	mov	r2, r3
 8001a98:	2304      	movs	r3, #4
 8001a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	212c      	movs	r1, #44	; 0x2c
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3361      	adds	r3, #97	; 0x61
 8001aaa:	2206      	movs	r2, #6
 8001aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 fd54 	bl	8005566 <USB_HC_Halt>
 8001abe:	e0af      	b.n	8001c20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad6:	d11b      	bne.n	8001b10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3361      	adds	r3, #97	; 0x61
 8001afa:	2207      	movs	r2, #7
 8001afc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fd2c 	bl	8005566 <USB_HC_Halt>
 8001b0e:	e087      	b.n	8001c20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d109      	bne.n	8001b3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b32:	461a      	mov	r2, r3
 8001b34:	2320      	movs	r3, #32
 8001b36:	6093      	str	r3, [r2, #8]
 8001b38:	e072      	b.n	8001c20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d11a      	bne.n	8001b86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2308      	movs	r3, #8
 8001b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	212c      	movs	r1, #44	; 0x2c
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3361      	adds	r3, #97	; 0x61
 8001b70:	2205      	movs	r2, #5
 8001b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fcf1 	bl	8005566 <USB_HC_Halt>
 8001b84:	e04c      	b.n	8001c20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9c:	d11b      	bne.n	8001bd6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	461a      	mov	r2, r3
 8001bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3361      	adds	r3, #97	; 0x61
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fcc9 	bl	8005566 <USB_HC_Halt>
 8001bd4:	e024      	b.n	8001c20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d119      	bne.n	8001c20 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3361      	adds	r3, #97	; 0x61
 8001c0c:	2206      	movs	r2, #6
 8001c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fca3 	bl	8005566 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c36:	d112      	bne.n	8001c5e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fc8f 	bl	8005566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c54:	461a      	mov	r2, r3
 8001c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001c5c:	e22f      	b.n	80020be <HCD_HC_IN_IRQHandler+0x664>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	f040 80c3 	bne.w	8001dfc <HCD_HC_IN_IRQHandler+0x3a2>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3361      	adds	r3, #97	; 0x61
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	335c      	adds	r3, #92	; 0x5c
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2301      	movs	r3, #1
 8001caa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	333f      	adds	r3, #63	; 0x3f
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	333f      	adds	r3, #63	; 0x3f
 8001cce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d111      	bne.n	8001cf8 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fc41 	bl	8005566 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	6093      	str	r3, [r2, #8]
 8001cf6:	e03c      	b.n	8001d72 <HCD_HC_IN_IRQHandler+0x318>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	333f      	adds	r3, #63	; 0x3f
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d009      	beq.n	8001d20 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	333f      	adds	r3, #63	; 0x3f
 8001d1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d128      	bne.n	8001d72 <HCD_HC_IN_IRQHandler+0x318>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d40:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3360      	adds	r3, #96	; 0x60
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	b2d8      	uxtb	r0, r3
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3360      	adds	r3, #96	; 0x60
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f006 faad 	bl	80082cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d12b      	bne.n	8001dd2 <HCD_HC_IN_IRQHandler+0x378>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3348      	adds	r3, #72	; 0x48
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	202c      	movs	r0, #44	; 0x2c
 8001d90:	fb00 f202 	mul.w	r2, r0, r2
 8001d94:	440a      	add	r2, r1
 8001d96:	3240      	adds	r2, #64	; 0x40
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 818b 	beq.w	80020be <HCD_HC_IN_IRQHandler+0x664>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3354      	adds	r3, #84	; 0x54
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2d8      	uxtb	r0, r3
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3354      	adds	r3, #84	; 0x54
 8001dcc:	4602      	mov	r2, r0
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	e175      	b.n	80020be <HCD_HC_IN_IRQHandler+0x664>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3354      	adds	r3, #84	; 0x54
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2d8      	uxtb	r0, r3
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3354      	adds	r3, #84	; 0x54
 8001df6:	4602      	mov	r2, r0
 8001df8:	701a      	strb	r2, [r3, #0]
}
 8001dfa:	e160      	b.n	80020be <HCD_HC_IN_IRQHandler+0x664>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	f040 80f7 	bne.w	8002002 <HCD_HC_IN_IRQHandler+0x5a8>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3361      	adds	r3, #97	; 0x61
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d109      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0x3e2>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e0c9      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x576>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	212c      	movs	r1, #44	; 0x2c
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	3361      	adds	r3, #97	; 0x61
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d109      	bne.n	8001e64 <HCD_HC_IN_IRQHandler+0x40a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	2205      	movs	r2, #5
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e0b5      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x576>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3361      	adds	r3, #97	; 0x61
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b06      	cmp	r3, #6
 8001e76:	d009      	beq.n	8001e8c <HCD_HC_IN_IRQHandler+0x432>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3361      	adds	r3, #97	; 0x61
 8001e86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d150      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x4d4>
      hhcd->hc[ch_num].ErrCnt++;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	335c      	adds	r3, #92	; 0x5c
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	202c      	movs	r0, #44	; 0x2c
 8001ea4:	fb00 f303 	mul.w	r3, r0, r3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	335c      	adds	r3, #92	; 0x5c
 8001eac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	335c      	adds	r3, #92	; 0x5c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d912      	bls.n	8001ee8 <HCD_HC_IN_IRQHandler+0x48e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	335c      	adds	r3, #92	; 0x5c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3360      	adds	r3, #96	; 0x60
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ee6:	e073      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x576>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3360      	adds	r3, #96	; 0x60
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f10:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f18:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f2c:	e050      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x576>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3361      	adds	r3, #97	; 0x61
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d122      	bne.n	8001f88 <HCD_HC_IN_IRQHandler+0x52e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3360      	adds	r3, #96	; 0x60
 8001f50:	2202      	movs	r2, #2
 8001f52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e023      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x576>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3361      	adds	r3, #97	; 0x61
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	d119      	bne.n	8001fd0 <HCD_HC_IN_IRQHandler+0x576>
      hhcd->hc[ch_num].ErrCnt++;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	335c      	adds	r3, #92	; 0x5c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	202c      	movs	r0, #44	; 0x2c
 8001fb4:	fb00 f303 	mul.w	r3, r0, r3
 8001fb8:	440b      	add	r3, r1
 8001fba:	335c      	adds	r3, #92	; 0x5c
 8001fbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3360      	adds	r3, #96	; 0x60
 8001fcc:	2204      	movs	r2, #4
 8001fce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2302      	movs	r3, #2
 8001fe0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	b2d8      	uxtb	r0, r3
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3360      	adds	r3, #96	; 0x60
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4601      	mov	r1, r0
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f006 f966 	bl	80082cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002000:	e05d      	b.n	80020be <HCD_HC_IN_IRQHandler+0x664>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d152      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x664>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	333f      	adds	r3, #63	; 0x3f
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d111      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0x5f6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	335c      	adds	r3, #92	; 0x5c
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fa8c 	bl	8005566 <USB_HC_Halt>
 800204e:	e02d      	b.n	80020ac <HCD_HC_IN_IRQHandler+0x652>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HCD_HC_IN_IRQHandler+0x61e>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333f      	adds	r3, #63	; 0x3f
 8002072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002074:	2b02      	cmp	r3, #2
 8002076:	d119      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x652>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	335c      	adds	r3, #92	; 0x5c
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3361      	adds	r3, #97	; 0x61
 8002098:	2203      	movs	r2, #3
 800209a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fa5d 	bl	8005566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	2310      	movs	r3, #16
 80020bc:	6093      	str	r3, [r2, #8]
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b088      	sub	sp, #32
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d11a      	bne.n	800212c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2304      	movs	r3, #4
 8002106:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3361      	adds	r3, #97	; 0x61
 8002116:	2206      	movs	r2, #6
 8002118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fa1e 	bl	8005566 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800212a:	e2cb      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b20      	cmp	r3, #32
 8002140:	d12e      	bne.n	80021a0 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	2320      	movs	r3, #32
 8002152:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	333d      	adds	r3, #61	; 0x3d
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 82ad 	bne.w	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
      hhcd->hc[ch_num].do_ping = 0U;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	333d      	adds	r3, #61	; 0x3d
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	2202      	movs	r2, #2
 800218c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f003 f9e4 	bl	8005566 <USB_HC_Halt>
}
 800219e:	e291      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b6:	d112      	bne.n	80021de <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	461a      	mov	r2, r3
 80021c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f9c5 	bl	8005566 <USB_HC_Halt>
}
 80021dc:	e272      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d140      	bne.n	8002276 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d111      	bne.n	8002240 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	333d      	adds	r3, #61	; 0x3d
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	461a      	mov	r2, r3
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	2301      	movs	r3, #1
 8002250:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3361      	adds	r3, #97	; 0x61
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f003 f979 	bl	8005566 <USB_HC_Halt>
}
 8002274:	e226      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d12c      	bne.n	80022e6 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3361      	adds	r3, #97	; 0x61
 800229a:	2204      	movs	r2, #4
 800229c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	333d      	adds	r3, #61	; 0x3d
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	335c      	adds	r3, #92	; 0x5c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 f94a 	bl	8005566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2340      	movs	r3, #64	; 0x40
 80022e2:	6093      	str	r3, [r2, #8]
}
 80022e4:	e1ee      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d11a      	bne.n	8002332 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	2308      	movs	r3, #8
 800230c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	2205      	movs	r2, #5
 800231e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f91b 	bl	8005566 <USB_HC_Halt>
}
 8002330:	e1c8      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b10      	cmp	r3, #16
 8002346:	d123      	bne.n	8002390 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	335c      	adds	r3, #92	; 0x5c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3361      	adds	r3, #97	; 0x61
 8002368:	2203      	movs	r2, #3
 800236a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f003 f8f5 	bl	8005566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2310      	movs	r3, #16
 800238c:	6093      	str	r3, [r2, #8]
}
 800238e:	e199      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b80      	cmp	r3, #128	; 0x80
 80023a4:	d11a      	bne.n	80023dc <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3361      	adds	r3, #97	; 0x61
 80023b4:	2206      	movs	r2, #6
 80023b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 f8cf 	bl	8005566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	461a      	mov	r2, r3
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	6093      	str	r3, [r2, #8]
}
 80023da:	e173      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d11b      	bne.n	800242c <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3361      	adds	r3, #97	; 0x61
 8002402:	2208      	movs	r2, #8
 8002404:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f003 f8a8 	bl	8005566 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002428:	6093      	str	r3, [r2, #8]
}
 800242a:	e14b      	b.n	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	f040 8140 	bne.w	80026c4 <HCD_HC_OUT_IRQHandler+0x5fe>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3361      	adds	r3, #97	; 0x61
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d17d      	bne.n	8002554 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	333f      	adds	r3, #63	; 0x3f
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d00a      	beq.n	8002494 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	333f      	adds	r3, #63	; 0x3f
 800248c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800248e:	2b03      	cmp	r3, #3
 8002490:	f040 8100 	bne.w	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d113      	bne.n	80024c4 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3355      	adds	r3, #85	; 0x55
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2d8      	uxtb	r0, r3
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3355      	adds	r3, #85	; 0x55
 80024c0:	4602      	mov	r2, r0
 80024c2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f040 80e3 	bne.w	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	334c      	adds	r3, #76	; 0x4c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80d8 	beq.w	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	334c      	adds	r3, #76	; 0x4c
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	202c      	movs	r0, #44	; 0x2c
 80024fa:	fb00 f202 	mul.w	r2, r0, r2
 80024fe:	440a      	add	r2, r1
 8002500:	3240      	adds	r2, #64	; 0x40
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	4413      	add	r3, r2
 8002506:	3b01      	subs	r3, #1
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	202c      	movs	r0, #44	; 0x2c
 800250e:	fb00 f202 	mul.w	r2, r0, r2
 8002512:	440a      	add	r2, r1
 8002514:	3240      	adds	r2, #64	; 0x40
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	fbb3 f3f2 	udiv	r3, r3, r2
 800251c:	613b      	str	r3, [r7, #16]
          if ((num_packets & 1U) != 0U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80b5 	beq.w	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3355      	adds	r3, #85	; 0x55
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2d8      	uxtb	r0, r3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3355      	adds	r3, #85	; 0x55
 800254e:	4602      	mov	r2, r0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e09f      	b.n	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d109      	bne.n	800257c <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3360      	adds	r3, #96	; 0x60
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e08b      	b.n	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3361      	adds	r3, #97	; 0x61
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d109      	bne.n	80025a4 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e077      	b.n	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3361      	adds	r3, #97	; 0x61
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d109      	bne.n	80025cc <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3360      	adds	r3, #96	; 0x60
 80025c6:	2205      	movs	r2, #5
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e063      	b.n	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d009      	beq.n	80025f4 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3361      	adds	r3, #97	; 0x61
 80025ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d14f      	bne.n	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	335c      	adds	r3, #92	; 0x5c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	202c      	movs	r0, #44	; 0x2c
 800260c:	fb00 f303 	mul.w	r3, r0, r3
 8002610:	440b      	add	r3, r1
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d912      	bls.n	8002650 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	335c      	adds	r3, #92	; 0x5c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	2204      	movs	r2, #4
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e021      	b.n	8002694 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3360      	adds	r3, #96	; 0x60
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002678:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002680:	60fb      	str	r3, [r7, #12]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	2302      	movs	r3, #2
 80026a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	b2d8      	uxtb	r0, r3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3360      	adds	r3, #96	; 0x60
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4601      	mov	r1, r0
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f005 fe04 	bl	80082cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	0c5b      	lsrs	r3, r3, #17
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002700:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d003      	beq.n	8002710 <HCD_RXQLVL_IRQHandler+0x44>
 8002708:	2b05      	cmp	r3, #5
 800270a:	f000 80a9 	beq.w	8002860 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800270e:	e0aa      	b.n	8002866 <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a6 	beq.w	8002864 <HCD_RXQLVL_IRQHandler+0x198>
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3344      	adds	r3, #68	; 0x44
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 809b 	beq.w	8002864 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3350      	adds	r3, #80	; 0x50
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	441a      	add	r2, r3
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	202c      	movs	r0, #44	; 0x2c
 8002748:	fb00 f303 	mul.w	r3, r0, r3
 800274c:	440b      	add	r3, r1
 800274e:	334c      	adds	r3, #76	; 0x4c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d87a      	bhi.n	800284c <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3344      	adds	r3, #68	; 0x44
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	b292      	uxth	r2, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f002 fade 	bl	8004d30 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3344      	adds	r3, #68	; 0x44
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	441a      	add	r2, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	202c      	movs	r0, #44	; 0x2c
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	440b      	add	r3, r1
 8002794:	3344      	adds	r3, #68	; 0x44
 8002796:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3350      	adds	r3, #80	; 0x50
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	441a      	add	r2, r3
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	202c      	movs	r0, #44	; 0x2c
 80027b2:	fb00 f303 	mul.w	r3, r0, r3
 80027b6:	440b      	add	r3, r1
 80027b8:	3350      	adds	r3, #80	; 0x50
 80027ba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	0cdb      	lsrs	r3, r3, #19
 80027cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3340      	adds	r3, #64	; 0x40
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d13c      	bne.n	8002864 <HCD_RXQLVL_IRQHandler+0x198>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d039      	beq.n	8002864 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002806:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800280e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3354      	adds	r3, #84	; 0x54
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2d8      	uxtb	r0, r3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3354      	adds	r3, #84	; 0x54
 8002846:	4602      	mov	r2, r0
 8002848:	701a      	strb	r2, [r3, #0]
      break;
 800284a:	e00b      	b.n	8002864 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	2204      	movs	r2, #4
 800285c:	701a      	strb	r2, [r3, #0]
      break;
 800285e:	e001      	b.n	8002864 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8002860:	bf00      	nop
 8002862:	e000      	b.n	8002866 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002864:	bf00      	nop
  }
}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800289a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d10b      	bne.n	80028be <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f005 fcef 	bl	8008294 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d132      	bne.n	800292e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d126      	bne.n	8002928 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d113      	bne.n	800290a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80028e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028ec:	d106      	bne.n	80028fc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2102      	movs	r1, #2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 fb4b 	bl	8004f90 <USB_InitFSLSPClkSel>
 80028fa:	e011      	b.n	8002920 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fb44 	bl	8004f90 <USB_InitFSLSPClkSel>
 8002908:	e00a      	b.n	8002920 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002918:	461a      	mov	r2, r3
 800291a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800291e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f005 fce1 	bl	80082e8 <HAL_HCD_PortEnabled_Callback>
 8002926:	e002      	b.n	800292e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f005 fceb 	bl	8008304 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b20      	cmp	r3, #32
 8002936:	d103      	bne.n	8002940 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000

08002974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_PWREx_GetVoltageRange+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000

08002990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299e:	d130      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d038      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2232      	movs	r2, #50	; 0x32
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	3301      	adds	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d4:	e002      	b.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d102      	bne.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f2      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d110      	bne.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d007      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40007000 	.word	0x40007000
 8002a34:	20000000 	.word	0x20000000
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a40:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4a:	6053      	str	r3, [r2, #4]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40007000 	.word	0x40007000

08002a5c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a60:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6a:	6053      	str	r3, [r2, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40007000 	.word	0x40007000

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f000 bc04 	b.w	8003298 <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a90:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9a:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80e4 	beq.w	8002c7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4c>
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	f040 808b 	bne.w	8002bd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f040 8087 	bne.w	8002bd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac8:	4b92      	ldr	r3, [pc, #584]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x64>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e3db      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	4b8b      	ldr	r3, [pc, #556]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_RCC_OscConfig+0x7e>
 8002af0:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	e005      	b.n	8002b06 <HAL_RCC_OscConfig+0x8a>
 8002afa:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d923      	bls.n	8002b52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fd8e 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e3bc      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1e:	4a7d      	ldr	r2, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b20:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	497a      	ldr	r1, [pc, #488]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3c:	4975      	ldr	r1, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	4b75      	ldr	r3, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	e025      	b.n	8002b9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b52:	4a70      	ldr	r2, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	496d      	ldr	r1, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b60:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b70:	4968      	ldr	r1, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b72:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fd4e 	bl	8003630 <RCC_SetFlashLatencyFromMSIRange>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e37c      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b9e:	f000 fc85 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bba:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x2a0>)
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x2a4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe f80e 	bl	8000be4 <HAL_InitTick>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d052      	beq.n	8002c78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	e360      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d032      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bde:	4a4d      	ldr	r2, [pc, #308]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bea:	f7fe f84b 	bl	8000c84 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf2:	f7fe f847 	bl	8000c84 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e349      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c10:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c12:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f043 0308 	orr.w	r3, r3, #8
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	493d      	ldr	r1, [pc, #244]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2e:	4939      	ldr	r1, [pc, #228]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
 8002c42:	e01a      	b.n	8002c7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c44:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c46:	4b33      	ldr	r3, [pc, #204]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c50:	f7fe f818 	bl	8000c84 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c58:	f7fe f814 	bl	8000c84 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e316      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1dc>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d073      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x21c>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d10e      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d10b      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d063      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d15f      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e2f3      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0x288>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x270>
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x288>
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fd ffba 	bl	8000c84 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	e010      	b.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08009fdc 	.word	0x08009fdc
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fd ffae 	bl	8000c84 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e2b0      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d36:	4baf      	ldr	r3, [pc, #700]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2a8>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fd ff9e 	bl	8000c84 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fd ff9a 	bl	8000c84 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e29c      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2d0>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d060      	beq.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x310>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d116      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	4b99      	ldr	r3, [pc, #612]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x328>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e279      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4993      	ldr	r1, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002da6:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	061b      	lsls	r3, r3, #24
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db8:	e040      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d023      	beq.n	8002e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc2:	4a8c      	ldr	r2, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fd ff59 	bl	8000c84 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fd ff55 	bl	8000c84 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e257      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	497f      	ldr	r1, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002df6:	4b7f      	ldr	r3, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e018      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	4b79      	ldr	r3, [pc, #484]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fd ff35 	bl	8000c84 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fd ff31 	bl	8000c84 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e233      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e50:	4a68      	ldr	r2, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e52:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fd ff10 	bl	8000c84 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fd ff0c 	bl	8000c84 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e20e      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3ec>
 8002e88:	e01b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4a5a      	ldr	r2, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fd fef3 	bl	8000c84 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7fd feef 	bl	8000c84 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1f1      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ef      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a6 	beq.w	800301c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4a44      	ldr	r2, [pc, #272]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d118      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f08:	4a3b      	ldr	r2, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f14:	f7fd feb6 	bl	8000c84 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1c:	f7fd feb2 	bl	8000c84 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1b4      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d8>
 8002f42:	4a2c      	ldr	r2, [pc, #176]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f44:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f52:	e024      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d110      	bne.n	8002f7e <HAL_RCC_OscConfig+0x502>
 8002f5c:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fd fe6d 	bl	8000c84 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fd fe69 	bl	8000c84 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e169      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ed      	beq.n	8002fae <HAL_RCC_OscConfig+0x532>
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fd fe56 	bl	8000c84 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fd fe52 	bl	8000c84 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d906      	bls.n	8002ffc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e152      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ffc:	4ba8      	ldr	r3, [pc, #672]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e8      	bne.n	8002fdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7ffb      	ldrb	r3, [r7, #31]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4aa3      	ldr	r2, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d03c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01c      	beq.n	800306a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003030:	4a9b      	ldr	r2, [pc, #620]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003032:	4b9b      	ldr	r3, [pc, #620]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fd fe20 	bl	8000c84 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003048:	f7fd fe1c 	bl	8000c84 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e11e      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800305a:	4b91      	ldr	r3, [pc, #580]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800305c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <HAL_RCC_OscConfig+0x5cc>
 8003068:	e01b      	b.n	80030a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800306a:	4a8d      	ldr	r2, [pc, #564]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800306e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fd fe03 	bl	8000c84 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003082:	f7fd fdff 	bl	8000c84 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e101      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003094:	4b82      	ldr	r3, [pc, #520]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ef      	bne.n	8003082 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80f5 	beq.w	8003296 <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f040 80cb 	bne.w	800324c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030b6:	4b7a      	ldr	r3, [pc, #488]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d12c      	bne.n	8003124 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	3b01      	subs	r3, #1
 80030d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d123      	bne.n	8003124 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d11b      	bne.n	8003124 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d113      	bne.n	8003124 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	3b01      	subs	r3, #1
 800310a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d109      	bne.n	8003124 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	3b01      	subs	r3, #1
 800311e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d06d      	beq.n	8003200 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d068      	beq.n	80031fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003136:	4b5a      	ldr	r3, [pc, #360]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0a8      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003146:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003150:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003152:	f7fd fd97 	bl	8000c84 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fd fd93 	bl	8000c84 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e095      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	4849      	ldr	r0, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0x828>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800318a:	3a01      	subs	r2, #1
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003194:	0212      	lsls	r2, r2, #8
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800319c:	0852      	lsrs	r2, r2, #1
 800319e:	3a01      	subs	r2, #1
 80031a0:	0552      	lsls	r2, r2, #21
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a8:	0852      	lsrs	r2, r2, #1
 80031aa:	3a01      	subs	r2, #1
 80031ac:	0652      	lsls	r2, r2, #25
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031b4:	06d2      	lsls	r2, r2, #27
 80031b6:	430a      	orrs	r2, r1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60c3      	str	r3, [r0, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031bc:	4a38      	ldr	r2, [pc, #224]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 80031be:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 80031ca:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fd fd56 	bl	8000c84 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd fd52 	bl	8000c84 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e054      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fa:	e04c      	b.n	8003296 <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e04b      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d144      	bne.n	8003296 <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800320c:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003224:	f7fd fd2e 	bl	8000c84 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322c:	f7fd fd2a 	bl	8000c84 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e02c      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x7b0>
 800324a:	e024      	b.n	8003296 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d01f      	beq.n	8003292 <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fd fd11 	bl	8000c84 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fd fd0d 	bl	8000c84 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e00f      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003284:	4906      	ldr	r1, [pc, #24]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_OscConfig+0x824>)
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCC_OscConfig+0x82c>)
 800328c:	4013      	ands	r3, r2
 800328e:	60cb      	str	r3, [r1, #12]
 8003290:	e001      	b.n	8003296 <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	019d808c 	.word	0x019d808c
 80032a8:	feeefffc 	.word	0xfeeefffc

080032ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0e7      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b75      	ldr	r3, [pc, #468]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0207 	and.w	r2, r3, #7
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d210      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4972      	ldr	r1, [pc, #456]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 80032d0:	4b71      	ldr	r3, [pc, #452]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 0207 	bic.w	r2, r3, #7
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b6e      	ldr	r3, [pc, #440]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0207 	and.w	r2, r3, #7
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0cf      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d010      	beq.n	800331e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	4b66      	ldr	r3, [pc, #408]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003308:	429a      	cmp	r2, r3
 800330a:	d908      	bls.n	800331e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4963      	ldr	r1, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04c      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	4b5a      	ldr	r3, [pc, #360]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d121      	bne.n	8003382 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0a6      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d115      	bne.n	8003382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e09a      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003362:	4b4e      	ldr	r3, [pc, #312]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e08e      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e086      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003382:	4946      	ldr	r1, [pc, #280]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 0203 	bic.w	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fd fc76 	bl	8000c84 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7fd fc72 	bl	8000c84 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e06e      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 020c 	and.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1eb      	bne.n	800339c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	429a      	cmp	r2, r3
 80033de:	d208      	bcs.n	80033f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	492e      	ldr	r1, [pc, #184]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0207 	and.w	r2, r3, #7
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d910      	bls.n	8003422 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003400:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_ClockConfig+0x1ec>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0207 	and.w	r2, r3, #7
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d001      	beq.n	8003422 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e036      	b.n	8003490 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342e:	491b      	ldr	r1, [pc, #108]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344c:	4913      	ldr	r1, [pc, #76]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003460:	f000 f824 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003464:	4601      	mov	r1, r0
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa21 f303 	lsr.w	r3, r1, r3
 800347c:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1f8>)
 800347e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fbad 	bl	8000be4 <HAL_InitTick>
 800348a:	4603      	mov	r3, r0
 800348c:	72fb      	strb	r3, [r7, #11]

  return status;
 800348e:	7afb      	ldrb	r3, [r7, #11]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	08009fdc 	.word	0x08009fdc
 80034a4:	20000000 	.word	0x20000000
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c4:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x34>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b0c      	cmp	r3, #12
 80034d8:	d121      	bne.n	800351e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d11e      	bne.n	800351e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034ec:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003510:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d102      	bne.n	800352a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e004      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d101      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003532:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d133      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0xa4>
 800354a:	2b03      	cmp	r3, #3
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0xaa>
 800354e:	e005      	b.n	800355c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003552:	617b      	str	r3, [r7, #20]
      break;
 8003554:	e005      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	617b      	str	r3, [r7, #20]
      break;
 8003560:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	3301      	adds	r3, #1
 800356e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	fb02 f203 	mul.w	r2, r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0e5b      	lsrs	r3, r3, #25
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035a2:	69bb      	ldr	r3, [r7, #24]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3724      	adds	r7, #36	; 0x24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08009ff4 	.word	0x08009ff4
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	007a1200 	.word	0x007a1200

080035c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000000 	.word	0x20000000

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035dc:	f7ff fff0 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 80035e0:	4601      	mov	r1, r0
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	08009fec 	.word	0x08009fec

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003608:	f7ff ffda 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 800360c:	4601      	mov	r1, r0
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0adb      	lsrs	r3, r3, #11
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <HAL_RCC_GetPCLK2Freq+0x28>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	08009fec 	.word	0x08009fec

08003630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003648:	f7ff f994 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 800364c:	6178      	str	r0, [r7, #20]
 800364e:	e014      	b.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003652:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003668:	f7ff f984 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 800366c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d10b      	bne.n	800369a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d919      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2ba0      	cmp	r3, #160	; 0xa0
 800368c:	d902      	bls.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800368e:	2302      	movs	r3, #2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e013      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e010      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d902      	bls.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036a0:	2303      	movs	r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e00a      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d102      	bne.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ac:	2302      	movs	r3, #2
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	e004      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b70      	cmp	r3, #112	; 0x70
 80036b6:	d101      	bne.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036bc:	490b      	ldr	r1, [pc, #44]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0207 	and.w	r2, r3, #7
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d001      	beq.n	80036de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40022000 	.word	0x40022000

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036f8:	2300      	movs	r3, #0
 80036fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036fc:	2300      	movs	r3, #0
 80036fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d03f      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003714:	d01c      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371a:	d802      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003720:	e01f      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003726:	d003      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003728:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800372c:	d01c      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800372e:	e018      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003730:	4a85      	ldr	r2, [pc, #532]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003732:	4b85      	ldr	r3, [pc, #532]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800373c:	e015      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fadb 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800374e:	e00c      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3320      	adds	r3, #32
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fbc2 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	74fb      	strb	r3, [r7, #19]
      break;
 8003766:	e000      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003770:	4975      	ldr	r1, [pc, #468]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003772:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003786:	e001      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03f      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a0:	d01c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80037a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a6:	d802      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80037ac:	e01f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b2:	d003      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80037b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80037ba:	e018      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037bc:	4a62      	ldr	r2, [pc, #392]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037be:	4b62      	ldr	r3, [pc, #392]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fa95 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3320      	adds	r3, #32
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fb7c 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	74fb      	strb	r3, [r7, #19]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037fc:	4952      	ldr	r1, [pc, #328]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037fe:	4b52      	ldr	r3, [pc, #328]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a0 	beq.w	8003966 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800382a:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003840:	4a41      	ldr	r2, [pc, #260]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003842:	4b41      	ldr	r3, [pc, #260]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6593      	str	r3, [r2, #88]	; 0x58
 800384c:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003858:	2301      	movs	r3, #1
 800385a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385c:	4a3b      	ldr	r2, [pc, #236]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003868:	f7fd fa0c 	bl	8000c84 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800386e:	e009      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd fa08 	bl	8000c84 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	74fb      	strb	r3, [r7, #19]
        break;
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ef      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d15c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d019      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd f9c7 	bl	8000c84 <HAL_GetTick>
 80038f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f8:	e00b      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd f9c3 	bl	8000c84 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d902      	bls.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	74fb      	strb	r3, [r7, #19]
            break;
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ec      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800393e:	e009      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
 8003944:	e006      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003954:	7c7b      	ldrb	r3, [r7, #17]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4aa6      	ldr	r2, [pc, #664]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800395c:	4ba5      	ldr	r3, [pc, #660]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003972:	49a0      	ldr	r1, [pc, #640]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003974:	4b9f      	ldr	r3, [pc, #636]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003994:	4997      	ldr	r1, [pc, #604]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003996:	4b97      	ldr	r3, [pc, #604]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f023 020c 	bic.w	r2, r3, #12
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b6:	498f      	ldr	r1, [pc, #572]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039b8:	4b8e      	ldr	r3, [pc, #568]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039d8:	4986      	ldr	r1, [pc, #536]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039da:	4b86      	ldr	r3, [pc, #536]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039fa:	497e      	ldr	r1, [pc, #504]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039fc:	4b7d      	ldr	r3, [pc, #500]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a1c:	4975      	ldr	r1, [pc, #468]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a1e:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3e:	496d      	ldr	r1, [pc, #436]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a40:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a60:	4964      	ldr	r1, [pc, #400]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a62:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a82:	495c      	ldr	r1, [pc, #368]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a84:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa4:	4953      	ldr	r1, [pc, #332]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac6:	494b      	ldr	r1, [pc, #300]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac8:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ae8:	4942      	ldr	r1, [pc, #264]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aea:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af0:	f023 0203 	bic.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d028      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0a:	493a      	ldr	r1, [pc, #232]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2a:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	e011      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f8d9 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d028      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b68:	4922      	ldr	r1, [pc, #136]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b92:	60d3      	str	r3, [r2, #12]
 8003b94:	e011      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b9e:	d10c      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f8aa 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bc6:	490b      	ldr	r1, [pc, #44]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be4:	d108      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be6:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be8:	4b02      	ldr	r3, [pc, #8]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf0:	60d3      	str	r3, [r2, #12]
 8003bf2:	e013      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003bf4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f879 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02f      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c28:	492c      	ldr	r1, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c2a:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f856 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d014      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	74bb      	strb	r3, [r7, #18]
 8003c62:	e011      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3320      	adds	r3, #32
 8003c72:	2102      	movs	r1, #2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f933 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c94:	4911      	ldr	r1, [pc, #68]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cb8:	4908      	ldr	r1, [pc, #32]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ce4:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d0e:	4b73      	ldr	r3, [pc, #460]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d1a:	4b70      	ldr	r3, [pc, #448]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d32:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
       ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d044      	beq.n	8003dd0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e041      	b.n	8003dd0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d00c      	beq.n	8003d6e <RCCEx_PLLSAI1_Config+0x6e>
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d013      	beq.n	8003d80 <RCCEx_PLLSAI1_Config+0x80>
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d120      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d5c:	4b5f      	ldr	r3, [pc, #380]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11d      	bne.n	8003da4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6c:	e01a      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7e:	e013      	b.n	8003da8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10f      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d9c:	e006      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      break;
 8003da2:	e004      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003dac:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003db4:	4849      	ldr	r0, [pc, #292]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db6:	4b49      	ldr	r3, [pc, #292]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d17c      	bne.n	8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dd6:	4a41      	ldr	r2, [pc, #260]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd8:	4b40      	ldr	r3, [pc, #256]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de2:	f7fc ff4f 	bl	8000c84 <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003de8:	e009      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dea:	f7fc ff4b 	bl	8000c84 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ef      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d15f      	bne.n	8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d110      	bne.n	8003e38 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e16:	4831      	ldr	r0, [pc, #196]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	0211      	lsls	r1, r2, #8
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	06d2      	lsls	r2, r2, #27
 8003e30:	430a      	orrs	r2, r1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	6103      	str	r3, [r0, #16]
 8003e36:	e027      	b.n	8003e88 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d112      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e3e:	4827      	ldr	r0, [pc, #156]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e40:	4b26      	ldr	r3, [pc, #152]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6892      	ldr	r2, [r2, #8]
 8003e50:	0211      	lsls	r1, r2, #8
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6912      	ldr	r2, [r2, #16]
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0552      	lsls	r2, r2, #21
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	6103      	str	r3, [r0, #16]
 8003e62:	e011      	b.n	8003e88 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e64:	481d      	ldr	r0, [pc, #116]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6892      	ldr	r2, [r2, #8]
 8003e76:	0211      	lsls	r1, r2, #8
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6952      	ldr	r2, [r2, #20]
 8003e7c:	0852      	lsrs	r2, r2, #1
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0652      	lsls	r2, r2, #25
 8003e82:	430a      	orrs	r2, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fc fef6 	bl	8000c84 <HAL_GetTick>
 8003e98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e9a:	e009      	b.n	8003eb0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e9c:	f7fc fef2 	bl	8000c84 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d902      	bls.n	8003eb0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	73fb      	strb	r3, [r7, #15]
          break;
 8003eae:	e005      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ef      	beq.n	8003e9c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ec2:	4906      	ldr	r1, [pc, #24]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000

08003ee0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eee:	4b68      	ldr	r3, [pc, #416]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0203 	and.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d10d      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f12:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
       ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d044      	beq.n	8003fb0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	e041      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d00c      	beq.n	8003f4e <RCCEx_PLLSAI2_Config+0x6e>
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d013      	beq.n	8003f60 <RCCEx_PLLSAI2_Config+0x80>
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d120      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f3c:	4b54      	ldr	r3, [pc, #336]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11d      	bne.n	8003f84 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e01a      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f4e:	4b50      	ldr	r3, [pc, #320]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5e:	e013      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f6c:	4b48      	ldr	r3, [pc, #288]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f7c:	e006      	b.n	8003f8c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
      break;
 8003f82:	e004      	b.n	8003f8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f8c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10d      	bne.n	8003fb0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f94:	483e      	ldr	r0, [pc, #248]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f96:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6819      	ldr	r1, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	430b      	orrs	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d166      	bne.n	8004084 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fb6:	4a36      	ldr	r2, [pc, #216]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fc fe5f 	bl	8000c84 <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fc8:	e009      	b.n	8003fde <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fca:	f7fc fe5b 	bl	8000c84 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	73fb      	strb	r3, [r7, #15]
        break;
 8003fdc:	e005      	b.n	8003fea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ef      	bne.n	8003fca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d149      	bne.n	8004084 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d110      	bne.n	8004018 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ff6:	4826      	ldr	r0, [pc, #152]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004000:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6892      	ldr	r2, [r2, #8]
 8004008:	0211      	lsls	r1, r2, #8
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68d2      	ldr	r2, [r2, #12]
 800400e:	06d2      	lsls	r2, r2, #27
 8004010:	430a      	orrs	r2, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	6143      	str	r3, [r0, #20]
 8004016:	e011      	b.n	800403c <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004018:	481d      	ldr	r0, [pc, #116]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004022:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	0211      	lsls	r1, r2, #8
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6912      	ldr	r2, [r2, #16]
 8004030:	0852      	lsrs	r2, r2, #1
 8004032:	3a01      	subs	r2, #1
 8004034:	0652      	lsls	r2, r2, #25
 8004036:	430a      	orrs	r2, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fc fe1c 	bl	8000c84 <HAL_GetTick>
 800404c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800404e:	e009      	b.n	8004064 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004050:	f7fc fe18 	bl	8000c84 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d902      	bls.n	8004064 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	73fb      	strb	r3, [r7, #15]
          break;
 8004062:	e005      	b.n	8004070 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ef      	beq.n	8004050 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004076:	4906      	ldr	r1, [pc, #24]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <RCCEx_PLLSAI2_Config+0x1b0>)
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e040      	b.n	8004128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc fc58 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8c0 	bl	8004258 <UART_SetConfig>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e022      	b.n	8004128 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fb38 	bl	8004760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	6852      	ldr	r2, [r2, #4]
 80040fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	6892      	ldr	r2, [r2, #8]
 800410a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fbbf 	bl	80048a4 <UART_CheckIdleState>
 8004126:	4603      	mov	r3, r0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004144:	2b20      	cmp	r3, #32
 8004146:	f040 8082 	bne.w	800424e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit+0x26>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07a      	b.n	8004250 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit+0x38>
 8004164:	2302      	movs	r3, #2
 8004166:	e073      	b.n	8004250 <HAL_UART_Transmit+0x120>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2221      	movs	r2, #33	; 0x21
 800417c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417e:	f7fc fd81 	bl	8000c84 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d108      	bne.n	80041b0 <HAL_UART_Transmit+0x80>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e003      	b.n	80041b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80041c0:	e02d      	b.n	800421e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2180      	movs	r1, #128	; 0x80
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fbb2 	bl	8004936 <UART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e039      	b.n	8004250 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	8812      	ldrh	r2, [r2, #0]
 80041ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ee:	b292      	uxth	r2, r2
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	3302      	adds	r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	e008      	b.n	800420c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	b292      	uxth	r2, r2
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3301      	adds	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cb      	bne.n	80041c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fb7e 	bl	8004936 <UART_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e005      	b.n	8004250 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4313      	orrs	r3, r2
 800427a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	4bac      	ldr	r3, [pc, #688]	; (8004538 <UART_SetConfig+0x2e0>)
 8004288:	400b      	ands	r3, r1
 800428a:	69f9      	ldr	r1, [r7, #28]
 800428c:	430b      	orrs	r3, r1
 800428e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	6852      	ldr	r2, [r2, #4]
 800429a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4aa2      	ldr	r2, [pc, #648]	; (800453c <UART_SetConfig+0x2e4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a99      	ldr	r2, [pc, #612]	; (8004540 <UART_SetConfig+0x2e8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d122      	bne.n	8004324 <UART_SetConfig+0xcc>
 80042de:	4b99      	ldr	r3, [pc, #612]	; (8004544 <UART_SetConfig+0x2ec>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0xc4>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0x9c>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004305 	.word	0x08004305
 80042f8:	08004311 	.word	0x08004311
 80042fc:	0800430b 	.word	0x0800430b
 8004300:	08004317 	.word	0x08004317
 8004304:	2301      	movs	r3, #1
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e0e8      	b.n	80044dc <UART_SetConfig+0x284>
 800430a:	2302      	movs	r3, #2
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	e0e5      	b.n	80044dc <UART_SetConfig+0x284>
 8004310:	2304      	movs	r3, #4
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e0e2      	b.n	80044dc <UART_SetConfig+0x284>
 8004316:	2308      	movs	r3, #8
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e0df      	b.n	80044dc <UART_SetConfig+0x284>
 800431c:	2310      	movs	r3, #16
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	bf00      	nop
 8004322:	e0db      	b.n	80044dc <UART_SetConfig+0x284>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a87      	ldr	r2, [pc, #540]	; (8004548 <UART_SetConfig+0x2f0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d134      	bne.n	8004398 <UART_SetConfig+0x140>
 800432e:	4b85      	ldr	r3, [pc, #532]	; (8004544 <UART_SetConfig+0x2ec>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d829      	bhi.n	8004390 <UART_SetConfig+0x138>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <UART_SetConfig+0xec>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004379 	.word	0x08004379
 8004348:	08004391 	.word	0x08004391
 800434c:	08004391 	.word	0x08004391
 8004350:	08004391 	.word	0x08004391
 8004354:	08004385 	.word	0x08004385
 8004358:	08004391 	.word	0x08004391
 800435c:	08004391 	.word	0x08004391
 8004360:	08004391 	.word	0x08004391
 8004364:	0800437f 	.word	0x0800437f
 8004368:	08004391 	.word	0x08004391
 800436c:	08004391 	.word	0x08004391
 8004370:	08004391 	.word	0x08004391
 8004374:	0800438b 	.word	0x0800438b
 8004378:	2300      	movs	r3, #0
 800437a:	76fb      	strb	r3, [r7, #27]
 800437c:	e0ae      	b.n	80044dc <UART_SetConfig+0x284>
 800437e:	2302      	movs	r3, #2
 8004380:	76fb      	strb	r3, [r7, #27]
 8004382:	e0ab      	b.n	80044dc <UART_SetConfig+0x284>
 8004384:	2304      	movs	r3, #4
 8004386:	76fb      	strb	r3, [r7, #27]
 8004388:	e0a8      	b.n	80044dc <UART_SetConfig+0x284>
 800438a:	2308      	movs	r3, #8
 800438c:	76fb      	strb	r3, [r7, #27]
 800438e:	e0a5      	b.n	80044dc <UART_SetConfig+0x284>
 8004390:	2310      	movs	r3, #16
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	bf00      	nop
 8004396:	e0a1      	b.n	80044dc <UART_SetConfig+0x284>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6b      	ldr	r2, [pc, #428]	; (800454c <UART_SetConfig+0x2f4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d120      	bne.n	80043e4 <UART_SetConfig+0x18c>
 80043a2:	4b68      	ldr	r3, [pc, #416]	; (8004544 <UART_SetConfig+0x2ec>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d00f      	beq.n	80043d0 <UART_SetConfig+0x178>
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d802      	bhi.n	80043ba <UART_SetConfig+0x162>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <UART_SetConfig+0x16c>
 80043b8:	e010      	b.n	80043dc <UART_SetConfig+0x184>
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d005      	beq.n	80043ca <UART_SetConfig+0x172>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d009      	beq.n	80043d6 <UART_SetConfig+0x17e>
 80043c2:	e00b      	b.n	80043dc <UART_SetConfig+0x184>
 80043c4:	2300      	movs	r3, #0
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e088      	b.n	80044dc <UART_SetConfig+0x284>
 80043ca:	2302      	movs	r3, #2
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e085      	b.n	80044dc <UART_SetConfig+0x284>
 80043d0:	2304      	movs	r3, #4
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e082      	b.n	80044dc <UART_SetConfig+0x284>
 80043d6:	2308      	movs	r3, #8
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e07f      	b.n	80044dc <UART_SetConfig+0x284>
 80043dc:	2310      	movs	r3, #16
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	bf00      	nop
 80043e2:	e07b      	b.n	80044dc <UART_SetConfig+0x284>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a59      	ldr	r2, [pc, #356]	; (8004550 <UART_SetConfig+0x2f8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d120      	bne.n	8004430 <UART_SetConfig+0x1d8>
 80043ee:	4b55      	ldr	r3, [pc, #340]	; (8004544 <UART_SetConfig+0x2ec>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d00f      	beq.n	800441c <UART_SetConfig+0x1c4>
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d802      	bhi.n	8004406 <UART_SetConfig+0x1ae>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <UART_SetConfig+0x1b8>
 8004404:	e010      	b.n	8004428 <UART_SetConfig+0x1d0>
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d005      	beq.n	8004416 <UART_SetConfig+0x1be>
 800440a:	2bc0      	cmp	r3, #192	; 0xc0
 800440c:	d009      	beq.n	8004422 <UART_SetConfig+0x1ca>
 800440e:	e00b      	b.n	8004428 <UART_SetConfig+0x1d0>
 8004410:	2300      	movs	r3, #0
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	e062      	b.n	80044dc <UART_SetConfig+0x284>
 8004416:	2302      	movs	r3, #2
 8004418:	76fb      	strb	r3, [r7, #27]
 800441a:	e05f      	b.n	80044dc <UART_SetConfig+0x284>
 800441c:	2304      	movs	r3, #4
 800441e:	76fb      	strb	r3, [r7, #27]
 8004420:	e05c      	b.n	80044dc <UART_SetConfig+0x284>
 8004422:	2308      	movs	r3, #8
 8004424:	76fb      	strb	r3, [r7, #27]
 8004426:	e059      	b.n	80044dc <UART_SetConfig+0x284>
 8004428:	2310      	movs	r3, #16
 800442a:	76fb      	strb	r3, [r7, #27]
 800442c:	bf00      	nop
 800442e:	e055      	b.n	80044dc <UART_SetConfig+0x284>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a47      	ldr	r2, [pc, #284]	; (8004554 <UART_SetConfig+0x2fc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d124      	bne.n	8004484 <UART_SetConfig+0x22c>
 800443a:	4b42      	ldr	r3, [pc, #264]	; (8004544 <UART_SetConfig+0x2ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004448:	d012      	beq.n	8004470 <UART_SetConfig+0x218>
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d802      	bhi.n	8004456 <UART_SetConfig+0x1fe>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <UART_SetConfig+0x20c>
 8004454:	e012      	b.n	800447c <UART_SetConfig+0x224>
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	d006      	beq.n	800446a <UART_SetConfig+0x212>
 800445c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004460:	d009      	beq.n	8004476 <UART_SetConfig+0x21e>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x224>
 8004464:	2300      	movs	r3, #0
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e038      	b.n	80044dc <UART_SetConfig+0x284>
 800446a:	2302      	movs	r3, #2
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e035      	b.n	80044dc <UART_SetConfig+0x284>
 8004470:	2304      	movs	r3, #4
 8004472:	76fb      	strb	r3, [r7, #27]
 8004474:	e032      	b.n	80044dc <UART_SetConfig+0x284>
 8004476:	2308      	movs	r3, #8
 8004478:	76fb      	strb	r3, [r7, #27]
 800447a:	e02f      	b.n	80044dc <UART_SetConfig+0x284>
 800447c:	2310      	movs	r3, #16
 800447e:	76fb      	strb	r3, [r7, #27]
 8004480:	bf00      	nop
 8004482:	e02b      	b.n	80044dc <UART_SetConfig+0x284>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2c      	ldr	r2, [pc, #176]	; (800453c <UART_SetConfig+0x2e4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d124      	bne.n	80044d8 <UART_SetConfig+0x280>
 800448e:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <UART_SetConfig+0x2ec>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d012      	beq.n	80044c4 <UART_SetConfig+0x26c>
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	d802      	bhi.n	80044aa <UART_SetConfig+0x252>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <UART_SetConfig+0x260>
 80044a8:	e012      	b.n	80044d0 <UART_SetConfig+0x278>
 80044aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x266>
 80044b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b4:	d009      	beq.n	80044ca <UART_SetConfig+0x272>
 80044b6:	e00b      	b.n	80044d0 <UART_SetConfig+0x278>
 80044b8:	2300      	movs	r3, #0
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	e00e      	b.n	80044dc <UART_SetConfig+0x284>
 80044be:	2302      	movs	r3, #2
 80044c0:	76fb      	strb	r3, [r7, #27]
 80044c2:	e00b      	b.n	80044dc <UART_SetConfig+0x284>
 80044c4:	2304      	movs	r3, #4
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	e008      	b.n	80044dc <UART_SetConfig+0x284>
 80044ca:	2308      	movs	r3, #8
 80044cc:	76fb      	strb	r3, [r7, #27]
 80044ce:	e005      	b.n	80044dc <UART_SetConfig+0x284>
 80044d0:	2310      	movs	r3, #16
 80044d2:	76fb      	strb	r3, [r7, #27]
 80044d4:	bf00      	nop
 80044d6:	e001      	b.n	80044dc <UART_SetConfig+0x284>
 80044d8:	2310      	movs	r3, #16
 80044da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <UART_SetConfig+0x2e4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	f040 8080 	bne.w	80045e8 <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044e8:	7efb      	ldrb	r3, [r7, #27]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d836      	bhi.n	800455c <UART_SetConfig+0x304>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x29c>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004519 	.word	0x08004519
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	08004521 	.word	0x08004521
 8004500:	0800455d 	.word	0x0800455d
 8004504:	08004527 	.word	0x08004527
 8004508:	0800455d 	.word	0x0800455d
 800450c:	0800455d 	.word	0x0800455d
 8004510:	0800455d 	.word	0x0800455d
 8004514:	0800452f 	.word	0x0800452f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7ff f85e 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 800451c:	6178      	str	r0, [r7, #20]
        break;
 800451e:	e022      	b.n	8004566 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <UART_SetConfig+0x300>)
 8004522:	617b      	str	r3, [r7, #20]
        break;
 8004524:	e01f      	b.n	8004566 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe ffc1 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800452a:	6178      	str	r0, [r7, #20]
        break;
 800452c:	e01b      	b.n	8004566 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	617b      	str	r3, [r7, #20]
        break;
 8004534:	e017      	b.n	8004566 <UART_SetConfig+0x30e>
 8004536:	bf00      	nop
 8004538:	efff69f3 	.word	0xefff69f3
 800453c:	40008000 	.word	0x40008000
 8004540:	40013800 	.word	0x40013800
 8004544:	40021000 	.word	0x40021000
 8004548:	40004400 	.word	0x40004400
 800454c:	40004800 	.word	0x40004800
 8004550:	40004c00 	.word	0x40004c00
 8004554:	40005000 	.word	0x40005000
 8004558:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	76bb      	strb	r3, [r7, #26]
        break;
 8004564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80eb 	beq.w	8004744 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	441a      	add	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	429a      	cmp	r2, r3
 800457c:	d805      	bhi.n	800458a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	429a      	cmp	r2, r3
 8004588:	d202      	bcs.n	8004590 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	76bb      	strb	r3, [r7, #26]
 800458e:	e0d9      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	461a      	mov	r2, r3
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	021d      	lsls	r5, r3, #8
 800459a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800459e:	0214      	lsls	r4, r2, #8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	461a      	mov	r2, r3
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	18a0      	adds	r0, r4, r2
 80045ae:	eb45 0103 	adc.w	r1, r5, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	f7fb fe6f 	bl	80002a0 <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d308      	bcc.n	80045e2 <UART_SetConfig+0x38a>
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d204      	bcs.n	80045e2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e0b0      	b.n	8004744 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	76bb      	strb	r3, [r7, #26]
 80045e6:	e0ad      	b.n	8004744 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	d15b      	bne.n	80046aa <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80045f2:	7efb      	ldrb	r3, [r7, #27]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d828      	bhi.n	800464a <UART_SetConfig+0x3f2>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x3a8>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	0800462d 	.word	0x0800462d
 8004608:	08004635 	.word	0x08004635
 800460c:	0800464b 	.word	0x0800464b
 8004610:	0800463b 	.word	0x0800463b
 8004614:	0800464b 	.word	0x0800464b
 8004618:	0800464b 	.word	0x0800464b
 800461c:	0800464b 	.word	0x0800464b
 8004620:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fe ffd8 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004628:	6178      	str	r0, [r7, #20]
        break;
 800462a:	e013      	b.n	8004654 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe ffea 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8004630:	6178      	str	r0, [r7, #20]
        break;
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b49      	ldr	r3, [pc, #292]	; (800475c <UART_SetConfig+0x504>)
 8004636:	617b      	str	r3, [r7, #20]
        break;
 8004638:	e00c      	b.n	8004654 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7fe ff37 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800463e:	6178      	str	r0, [r7, #20]
        break;
 8004640:	e008      	b.n	8004654 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	617b      	str	r3, [r7, #20]
        break;
 8004648:	e004      	b.n	8004654 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	76bb      	strb	r3, [r7, #26]
        break;
 8004652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d074      	beq.n	8004744 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005a      	lsls	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d916      	bls.n	80046a4 <UART_SetConfig+0x44c>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d212      	bcs.n	80046a4 <UART_SetConfig+0x44c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f023 030f 	bic.w	r3, r3, #15
 8004686:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	b29a      	uxth	r2, r3
 8004694:	89fb      	ldrh	r3, [r7, #14]
 8004696:	4313      	orrs	r3, r2
 8004698:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	89fa      	ldrh	r2, [r7, #14]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	e04f      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	76bb      	strb	r3, [r7, #26]
 80046a8:	e04c      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046aa:	7efb      	ldrb	r3, [r7, #27]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d828      	bhi.n	8004702 <UART_SetConfig+0x4aa>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x460>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046dd 	.word	0x080046dd
 80046bc:	080046e5 	.word	0x080046e5
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	08004703 	.word	0x08004703
 80046c8:	080046f3 	.word	0x080046f3
 80046cc:	08004703 	.word	0x08004703
 80046d0:	08004703 	.word	0x08004703
 80046d4:	08004703 	.word	0x08004703
 80046d8:	080046fb 	.word	0x080046fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046dc:	f7fe ff7c 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80046e0:	6178      	str	r0, [r7, #20]
        break;
 80046e2:	e013      	b.n	800470c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e4:	f7fe ff8e 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 80046e8:	6178      	str	r0, [r7, #20]
        break;
 80046ea:	e00f      	b.n	800470c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <UART_SetConfig+0x504>)
 80046ee:	617b      	str	r3, [r7, #20]
        break;
 80046f0:	e00c      	b.n	800470c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fe fedb 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 80046f6:	6178      	str	r0, [r7, #20]
        break;
 80046f8:	e008      	b.n	800470c <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fe:	617b      	str	r3, [r7, #20]
        break;
 8004700:	e004      	b.n	800470c <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	76bb      	strb	r3, [r7, #26]
        break;
 800470a:	bf00      	nop
    }

    if (pclk != 0U)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	085a      	lsrs	r2, r3, #1
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	441a      	add	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b0f      	cmp	r3, #15
 800472a:	d909      	bls.n	8004740 <UART_SetConfig+0x4e8>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004732:	d205      	bcs.n	8004740 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	b292      	uxth	r2, r2
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	e001      	b.n	8004744 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004750:	7ebb      	ldrb	r3, [r7, #26]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bdb0      	pop	{r4, r5, r7, pc}
 800475a:	bf00      	nop
 800475c:	00f42400 	.word	0x00f42400

08004760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	6852      	ldr	r2, [r2, #4]
 800477e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6852      	ldr	r2, [r2, #4]
 80047a0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	6852      	ldr	r2, [r2, #4]
 80047c2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	6852      	ldr	r2, [r2, #4]
 80047e4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	6892      	ldr	r2, [r2, #8]
 8004806:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800480e:	430a      	orrs	r2, r1
 8004810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	6852      	ldr	r2, [r2, #4]
 800484a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485e:	d10a      	bne.n	8004876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	6852      	ldr	r2, [r2, #4]
 800486a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6852      	ldr	r2, [r2, #4]
 800488c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b4:	f7fc f9e6 	bl	8000c84 <HAL_GetTick>
 80048b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d10e      	bne.n	80048e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f82d 	bl	8004936 <UART_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e023      	b.n	800492e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d10e      	bne.n	8004912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f817 	bl	8004936 <UART_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00d      	b.n	800492e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b09c      	sub	sp, #112	; 0x70
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	4613      	mov	r3, r2
 8004944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004946:	e0a5      	b.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	f000 80a1 	beq.w	8004a94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fc f997 	bl	8000c84 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495e:	429a      	cmp	r2, r3
 8004960:	d802      	bhi.n	8004968 <UART_WaitOnFlagUntilTimeout+0x32>
 8004962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004964:	2b00      	cmp	r3, #0
 8004966:	d13e      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004978:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800497c:	667b      	str	r3, [r7, #100]	; 0x64
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004988:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800498c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	663b      	str	r3, [r7, #96]	; 0x60
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3308      	adds	r3, #8
 80049b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80049bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e5      	bne.n	800499a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e067      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d04f      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a02:	d147      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e6      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3308      	adds	r3, #8
 8004a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a60:	623a      	str	r2, [r7, #32]
 8004a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	69f9      	ldr	r1, [r7, #28]
 8004a66:	6a3a      	ldr	r2, [r7, #32]
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e5      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e010      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	f43f af4a 	beq.w	8004948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3770      	adds	r7, #112	; 0x70
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004abe:	b084      	sub	sp, #16
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	f107 001c 	add.w	r0, r7, #28
 8004acc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f99f 	bl	8004e20 <USB_CoreReset>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
 8004af8:	e005      	b.n	8004b06 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b12:	b004      	add	sp, #16
 8004b14:	4770      	bx	lr

08004b16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f043 0201 	orr.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 0201 	bic.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d115      	bne.n	8004ba8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7fc f887 	bl	8000c9c <HAL_Delay>
      ms++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f935 	bl	8004e04 <USB_GetMode>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d01e      	beq.n	8004bde <USB_SetCurrentMode+0x84>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b31      	cmp	r3, #49	; 0x31
 8004ba4:	d9f0      	bls.n	8004b88 <USB_SetCurrentMode+0x2e>
 8004ba6:	e01a      	b.n	8004bde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d115      	bne.n	8004bda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bba:	2001      	movs	r0, #1
 8004bbc:	f7fc f86e 	bl	8000c9c <HAL_Delay>
      ms++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f91c 	bl	8004e04 <USB_GetMode>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <USB_SetCurrentMode+0x84>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b31      	cmp	r3, #49	; 0x31
 8004bd6:	d9f0      	bls.n	8004bba <USB_SetCurrentMode+0x60>
 8004bd8:	e001      	b.n	8004bde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e005      	b.n	8004bea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b32      	cmp	r3, #50	; 0x32
 8004be2:	d101      	bne.n	8004be8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <USB_FlushTxFifo+0x64>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e01b      	b.n	8004c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	daf2      	bge.n	8004c02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	019b      	lsls	r3, r3, #6
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <USB_FlushTxFifo+0x64>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e006      	b.n	8004c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d0f0      	beq.n	8004c2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	00030d40 	.word	0x00030d40

08004c5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <USB_FlushRxFifo+0x5c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e018      	b.n	8004cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	daf2      	bge.n	8004c68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <USB_FlushRxFifo+0x5c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e006      	b.n	8004cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d0f0      	beq.n	8004c8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	00030d40 	.word	0x00030d40

08004cbc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	; 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	460b      	mov	r3, r1
 8004ccc:	71fb      	strb	r3, [r7, #7]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004cda:	88bb      	ldrh	r3, [r7, #4]
 8004cdc:	3303      	adds	r3, #3
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e018      	b.n	8004d1a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	031a      	lsls	r2, r3, #12
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3301      	adds	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	3301      	adds	r3, #1
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d3e2      	bcc.n	8004ce8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3724      	adds	r7, #36	; 0x24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b08b      	sub	sp, #44	; 0x2c
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e014      	b.n	8004d86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	3301      	adds	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	3301      	adds	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	3301      	adds	r3, #1
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	6a3a      	ldr	r2, [r7, #32]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d3e6      	bcc.n	8004d5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d8e:	8bfb      	ldrh	r3, [r7, #30]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01d      	beq.n	8004dd0 <USB_ReadPacket+0xa0>
  {
    i = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	fa22 f303 	lsr.w	r3, r2, r3
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	701a      	strb	r2, [r3, #0]
      i++;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	623b      	str	r3, [r7, #32]
      pDest++;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004dc4:	8bfb      	ldrh	r3, [r7, #30]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dca:	8bfb      	ldrh	r3, [r7, #30]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ea      	bne.n	8004da6 <USB_ReadPacket+0x76>
  }

  return ((void *)pDest);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	372c      	adds	r7, #44	; 0x2c
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4013      	ands	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0301 	and.w	r3, r3, #1
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <USB_CoreReset+0x64>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e01b      	b.n	8004e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	daf2      	bge.n	8004e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <USB_CoreReset+0x64>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e006      	b.n	8004e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d0f0      	beq.n	8004e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	00030d40 	.word	0x00030d40

08004e88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e88:	b084      	sub	sp, #16
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004edc:	2110      	movs	r1, #16
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fe88 	bl	8004bf4 <USB_FlushTxFifo>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <USB_HostInit+0x66>
  {
    ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff feb4 	bl	8004c5c <USB_FlushRxFifo>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <USB_HostInit+0x76>
  {
    ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e015      	b.n	8004f30 <USB_HostInit+0xa8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	461a      	mov	r2, r3
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d8e5      	bhi.n	8004f04 <USB_HostInit+0x7c>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295
 8004f44:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <USB_HostInit+0xfc>)
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <USB_HostInit+0x100>)
 8004f56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f043 0210 	orr.w	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <USB_HostInit+0x104>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f7e:	b004      	add	sp, #16
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	00600080 	.word	0x00600080
 8004f88:	004000e0 	.word	0x004000e0
 8004f8c:	a3200008 	.word	0xa3200008

08004f90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d107      	bne.n	8004fe6 <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004fe2:	6053      	str	r3, [r2, #4]
 8004fe4:	e009      	b.n	8004ffa <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d106      	bne.n	8004ffa <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ff8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005028:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800503a:	2064      	movs	r0, #100	; 0x64
 800503c:	f7fb fe2e 	bl	8000c9c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005046:	461a      	mov	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800504e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005050:	200a      	movs	r0, #10
 8005052:	f7fb fe23 	bl	8000c9c <HAL_Delay>

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005084:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <USB_DriveVbus+0x46>
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d107      	bne.n	80050a6 <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b0:	d10a      	bne.n	80050c8 <USB_DriveVbus+0x68>
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050be:	461a      	mov	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	0c5b      	lsrs	r3, r3, #17
 80050f4:	f003 0303 	and.w	r3, r3, #3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	b29b      	uxth	r3, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	4608      	mov	r0, r1
 8005132:	4611      	mov	r1, r2
 8005134:	461a      	mov	r2, r3
 8005136:	4603      	mov	r3, r0
 8005138:	70fb      	strb	r3, [r7, #3]
 800513a:	460b      	mov	r3, r1
 800513c:	70bb      	strb	r3, [r7, #2]
 800513e:	4613      	mov	r3, r2
 8005140:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800515e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005162:	2b03      	cmp	r3, #3
 8005164:	d86a      	bhi.n	800523c <USB_HC_Init+0x114>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <USB_HC_Init+0x44>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	0800517d 	.word	0x0800517d
 8005170:	080051fd 	.word	0x080051fd
 8005174:	0800517d 	.word	0x0800517d
 8005178:	080051bd 	.word	0x080051bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	461a      	mov	r2, r3
 800518a:	f240 439d 	movw	r3, #1181	; 0x49d
 800518e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005194:	2b00      	cmp	r3, #0
 8005196:	da54      	bge.n	8005242 <USB_HC_Init+0x11a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a4:	4619      	mov	r1, r3
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	60cb      	str	r3, [r1, #12]
      }
      break;
 80051ba:	e042      	b.n	8005242 <USB_HC_Init+0x11a>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	461a      	mov	r2, r3
 80051ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80051ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da36      	bge.n	8005246 <USB_HC_Init+0x11e>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	4619      	mov	r1, r3
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f8:	60cb      	str	r3, [r1, #12]
      }

      break;
 80051fa:	e024      	b.n	8005246 <USB_HC_Init+0x11e>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	f240 2325 	movw	r3, #549	; 0x225
 800520e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005210:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005214:	2b00      	cmp	r3, #0
 8005216:	da18      	bge.n	800524a <USB_HC_Init+0x122>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	4619      	mov	r1, r3
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005238:	60cb      	str	r3, [r1, #12]
      }
      break;
 800523a:	e006      	b.n	800524a <USB_HC_Init+0x122>

    default:
      ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	77fb      	strb	r3, [r7, #31]
      break;
 8005240:	e004      	b.n	800524c <USB_HC_Init+0x124>
      break;
 8005242:	bf00      	nop
 8005244:	e002      	b.n	800524c <USB_HC_Init+0x124>
      break;
 8005246:	bf00      	nop
 8005248:	e000      	b.n	800524c <USB_HC_Init+0x124>
      break;
 800524a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	4619      	mov	r1, r3
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f043 0302 	orr.w	r3, r3, #2
 800526c:	60cb      	str	r3, [r1, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005274:	4618      	mov	r0, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800529a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da03      	bge.n	80052aa <USB_HC_Init+0x182>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e001      	b.n	80052ae <USB_HC_Init+0x186>
  }
  else
  {
    HCcharEpDir = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ff11 	bl	80050d6 <USB_GetHostSpeed>
 80052b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80052b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d106      	bne.n	80052cc <USB_HC_Init+0x1a4>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d003      	beq.n	80052cc <USB_HC_Init+0x1a4>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e001      	b.n	80052d0 <USB_HC_Init+0x1a8>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	4619      	mov	r1, r3
 80052de:	787b      	ldrb	r3, [r7, #1]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052e6:	78bb      	ldrb	r3, [r7, #2]
 80052e8:	02db      	lsls	r3, r3, #11
 80052ea:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052ee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052f4:	049b      	lsls	r3, r3, #18
 80052f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005302:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	431a      	orrs	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800530c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800530e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005312:	2b03      	cmp	r3, #3
 8005314:	d003      	beq.n	800531e <USB_HC_Init+0x1f6>
 8005316:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800531a:	2b01      	cmp	r3, #1
 800531c:	d110      	bne.n	8005340 <USB_HC_Init+0x218>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	4619      	mov	r1, r3
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800533e:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8005340:	7ffb      	ldrb	r3, [r7, #31]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005364:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	8912      	ldrh	r2, [r2, #8]
 8005376:	4413      	add	r3, r2
 8005378:	3b01      	subs	r3, #1
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	8912      	ldrh	r2, [r2, #8]
 800537e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005382:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005384:	8bfa      	ldrh	r2, [r7, #30]
 8005386:	8a7b      	ldrh	r3, [r7, #18]
 8005388:	429a      	cmp	r2, r3
 800538a:	d90b      	bls.n	80053a4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800538c:	8a7b      	ldrh	r3, [r7, #18]
 800538e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005390:	8bfb      	ldrh	r3, [r7, #30]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	8912      	ldrh	r2, [r2, #8]
 8005396:	fb02 f203 	mul.w	r2, r2, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e001      	b.n	80053a4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80053a0:	2301      	movs	r3, #1
 80053a2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053ac:	8bfb      	ldrh	r3, [r7, #30]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	8912      	ldrh	r2, [r2, #8]
 80053b2:	fb02 f203 	mul.w	r2, r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	e003      	b.n	80053c4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	4618      	mov	r0, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053da:	8bfb      	ldrh	r3, [r7, #30]
 80053dc:	04d9      	lsls	r1, r3, #19
 80053de:	4b58      	ldr	r3, [pc, #352]	; (8005540 <USB_HC_StartXfer+0x1f4>)
 80053e0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053e2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	7a9b      	ldrb	r3, [r3, #10]
 80053e8:	075b      	lsls	r3, r3, #29
 80053ea:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053ee:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053f0:	6103      	str	r3, [r0, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	4619      	mov	r1, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800542a:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	4619      	mov	r1, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	7c7b      	ldrb	r3, [r7, #17]
 800544a:	075b      	lsls	r3, r3, #29
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005466:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <USB_HC_StartXfer+0x12e>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	e003      	b.n	8005482 <USB_HC_StartXfer+0x136>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005480:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005488:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	461a      	mov	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	78db      	ldrb	r3, [r3, #3]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d148      	bne.n	8005536 <USB_HC_StartXfer+0x1ea>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d044      	beq.n	8005536 <USB_HC_StartXfer+0x1ea>
  {
    switch (hc->ep_type)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	79db      	ldrb	r3, [r3, #7]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d831      	bhi.n	8005518 <USB_HC_StartXfer+0x1cc>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <USB_HC_StartXfer+0x170>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054cd 	.word	0x080054cd
 80054c8:	080054f1 	.word	0x080054f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	3303      	adds	r3, #3
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054d6:	89fa      	ldrh	r2, [r7, #14]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	b29b      	uxth	r3, r3
 80054de:	429a      	cmp	r2, r3
 80054e0:	d91c      	bls.n	800551c <USB_HC_StartXfer+0x1d0>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80054ee:	e015      	b.n	800551c <USB_HC_StartXfer+0x1d0>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	3303      	adds	r3, #3
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054fa:	89fa      	ldrh	r2, [r7, #14]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	b29b      	uxth	r3, r3
 8005506:	429a      	cmp	r2, r3
 8005508:	d90a      	bls.n	8005520 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	619a      	str	r2, [r3, #24]
        }
        break;
 8005516:	e003      	b.n	8005520 <USB_HC_StartXfer+0x1d4>

      default:
        break;
 8005518:	bf00      	nop
 800551a:	e002      	b.n	8005522 <USB_HC_StartXfer+0x1d6>
        break;
 800551c:	bf00      	nop
 800551e:	e000      	b.n	8005522 <USB_HC_StartXfer+0x1d6>
        break;
 8005520:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68d9      	ldr	r1, [r3, #12]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	785a      	ldrb	r2, [r3, #1]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	b29b      	uxth	r3, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fbc3 	bl	8004cbc <USB_WritePacket>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	1ff80000 	.word	0x1ff80000

08005544 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	b29b      	uxth	r3, r3
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005566:	b480      	push	{r7}
 8005568:	b089      	sub	sp, #36	; 0x24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	0c9b      	lsrs	r3, r3, #18
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	0fdb      	lsrs	r3, r3, #31
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d104      	bne.n	80055c0 <USB_HC_Halt+0x5a>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	e0d0      	b.n	8005762 <USB_HC_Halt+0x1fc>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <USB_HC_Halt+0x66>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d167      	bne.n	800569c <USB_HC_Halt+0x136>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d8:	4619      	mov	r1, r3
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ec:	600b      	str	r3, [r1, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 80b2 	bne.w	8005760 <USB_HC_Halt+0x1fa>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d135      	bne.n	8005674 <USB_HC_Halt+0x10e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005614:	4619      	mov	r1, r3
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005628:	600b      	str	r3, [r1, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	4619      	mov	r1, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800564a:	600b      	str	r3, [r1, #0]
        do
        {
          count++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005658:	d81e      	bhi.n	8005698 <USB_HC_Halt+0x132>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005670:	d0ec      	beq.n	800564c <USB_HC_Halt+0xe6>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005672:	e075      	b.n	8005760 <USB_HC_Halt+0x1fa>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005680:	4619      	mov	r1, r3
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005694:	600b      	str	r3, [r1, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005696:	e063      	b.n	8005760 <USB_HC_Halt+0x1fa>
            break;
 8005698:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800569a:	e061      	b.n	8005760 <USB_HC_Halt+0x1fa>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a8:	4619      	mov	r1, r3
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056bc:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d135      	bne.n	800573a <USB_HC_Halt+0x1d4>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	4619      	mov	r1, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ee:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	4619      	mov	r1, r3
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005710:	600b      	str	r3, [r1, #0]
      do
      {
        count++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571e:	d81e      	bhi.n	800575e <USB_HC_Halt+0x1f8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d0ec      	beq.n	8005712 <USB_HC_Halt+0x1ac>
 8005738:	e012      	b.n	8005760 <USB_HC_Halt+0x1fa>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	4619      	mov	r1, r3
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800575a:	600b      	str	r3, [r1, #0]
 800575c:	e000      	b.n	8005760 <USB_HC_Halt+0x1fa>
          break;
 800575e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b088      	sub	sp, #32
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff f9d8 	bl	8004b38 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005788:	2110      	movs	r1, #16
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fa32 	bl	8004bf4 <USB_FlushTxFifo>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fa5e 	bl	8004c5c <USB_FlushRxFifo>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e01f      	b.n	80057f0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057ce:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	461a      	mov	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d9dc      	bls.n	80057b0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e034      	b.n	8005866 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005812:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800581a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005822:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005830:	461a      	mov	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005842:	d80c      	bhi.n	800585e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800585a:	d0ec      	beq.n	8005836 <USB_StopHost+0xc8>
 800585c:	e000      	b.n	8005860 <USB_StopHost+0xf2>
        break;
 800585e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	3301      	adds	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b0f      	cmp	r3, #15
 800586a:	d9c7      	bls.n	80057fc <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005872:	461a      	mov	r2, r3
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f04f 32ff 	mov.w	r2, #4294967295
 8005880:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff f947 	bl	8004b16 <USB_EnableGlobalInt>

  return ret;
 8005888:	7ffb      	ldrb	r3, [r7, #31]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3720      	adds	r7, #32
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b08b      	sub	sp, #44	; 0x2c
 8005898:	af04      	add	r7, sp, #16
 800589a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a6:	7919      	ldrb	r1, [r3, #4]
 80058a8:	23ff      	movs	r3, #255	; 0xff
 80058aa:	2201      	movs	r2, #1
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 f823 	bl	80068f8 <USBH_FindInterface>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75bb      	strb	r3, [r7, #22]
  interface++;
 80058b6:	7dbb      	ldrb	r3, [r7, #22]
 80058b8:	3301      	adds	r3, #1
 80058ba:	75bb      	strb	r3, [r7, #22]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80058bc:	7dbb      	ldrb	r3, [r7, #22]
 80058be:	2bff      	cmp	r3, #255	; 0xff
 80058c0:	d002      	beq.n	80058c8 <USBH_HID_InterfaceInit+0x34>
 80058c2:	7dbb      	ldrb	r3, [r7, #22]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d90f      	bls.n	80058e8 <USBH_HID_InterfaceInit+0x54>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 80058c8:	48a6      	ldr	r0, [pc, #664]	; (8005b64 <USBH_HID_InterfaceInit+0x2d0>)
 80058ca:	f003 f833 	bl	8008934 <iprintf>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	48a3      	ldr	r0, [pc, #652]	; (8005b68 <USBH_HID_InterfaceInit+0x2d4>)
 80058da:	f003 f82b 	bl	8008934 <iprintf>
 80058de:	200a      	movs	r0, #10
 80058e0:	f003 f840 	bl	8008964 <putchar>
    return USBH_FAIL;
 80058e4:	2302      	movs	r3, #2
 80058e6:	e138      	b.n	8005b5a <USBH_HID_InterfaceInit+0x2c6>
  }

  status = USBH_SelectInterface(phost, interface);
 80058e8:	7dbb      	ldrb	r3, [r7, #22]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 ff9b 	bl	8006828 <USBH_SelectInterface>
 80058f2:	4603      	mov	r3, r0
 80058f4:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80058f6:	7d7b      	ldrb	r3, [r7, #21]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <USBH_HID_InterfaceInit+0x6c>
  {
    return USBH_FAIL;
 80058fc:	2302      	movs	r3, #2
 80058fe:	e12c      	b.n	8005b5a <USBH_HID_InterfaceInit+0x2c6>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005906:	2034      	movs	r0, #52	; 0x34
 8005908:	f002 ff50 	bl	80087ac <malloc>
 800590c:	4603      	mov	r3, r0
 800590e:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <USBH_HID_InterfaceInit+0xa2>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8005920:	4890      	ldr	r0, [pc, #576]	; (8005b64 <USBH_HID_InterfaceInit+0x2d0>)
 8005922:	f003 f807 	bl	8008934 <iprintf>
 8005926:	4891      	ldr	r0, [pc, #580]	; (8005b6c <USBH_HID_InterfaceInit+0x2d8>)
 8005928:	f003 f804 	bl	8008934 <iprintf>
 800592c:	200a      	movs	r0, #10
 800592e:	f003 f819 	bl	8008964 <putchar>
    return USBH_FAIL;
 8005932:	2302      	movs	r3, #2
 8005934:	e111      	b.n	8005b5a <USBH_HID_InterfaceInit+0x2c6>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005936:	2234      	movs	r2, #52	; 0x34
 8005938:	2100      	movs	r1, #0
 800593a:	6938      	ldr	r0, [r7, #16]
 800593c:	f002 ff46 	bl	80087cc <memset>

  HID_Handle->state = HID_ERROR;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2207      	movs	r2, #7
 8005944:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005946:	7dbb      	ldrb	r3, [r7, #22]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	211a      	movs	r1, #26
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	4413      	add	r3, r2
 8005952:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d109      	bne.n	8005970 <USBH_HID_InterfaceInit+0xdc>
  {
    USBH_UsrLog("KeyBoard device found!");
 800595c:	4884      	ldr	r0, [pc, #528]	; (8005b70 <USBH_HID_InterfaceInit+0x2dc>)
 800595e:	f002 ffe9 	bl	8008934 <iprintf>
 8005962:	200a      	movs	r0, #10
 8005964:	f002 fffe 	bl	8008964 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4a82      	ldr	r2, [pc, #520]	; (8005b74 <USBH_HID_InterfaceInit+0x2e0>)
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
 800596e:	e031      	b.n	80059d4 <USBH_HID_InterfaceInit+0x140>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005970:	7dbb      	ldrb	r3, [r7, #22]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	211a      	movs	r1, #26
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	4413      	add	r3, r2
 800597c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d109      	bne.n	800599a <USBH_HID_InterfaceInit+0x106>
  {
    USBH_UsrLog("Mouse device found!");
 8005986:	487c      	ldr	r0, [pc, #496]	; (8005b78 <USBH_HID_InterfaceInit+0x2e4>)
 8005988:	f002 ffd4 	bl	8008934 <iprintf>
 800598c:	200a      	movs	r0, #10
 800598e:	f002 ffe9 	bl	8008964 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4a79      	ldr	r2, [pc, #484]	; (8005b7c <USBH_HID_InterfaceInit+0x2e8>)
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
 8005998:	e01c      	b.n	80059d4 <USBH_HID_InterfaceInit+0x140>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_GAME_BOOT_CODE)
 800599a:	7dbb      	ldrb	r3, [r7, #22]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	211a      	movs	r1, #26
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 3349 	addw	r3, r3, #841	; 0x349
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <USBH_HID_InterfaceInit+0x130>
  {
    USBH_UsrLog("Wheel device found!");
 80059b0:	4873      	ldr	r0, [pc, #460]	; (8005b80 <USBH_HID_InterfaceInit+0x2ec>)
 80059b2:	f002 ffbf 	bl	8008934 <iprintf>
 80059b6:	200a      	movs	r0, #10
 80059b8:	f002 ffd4 	bl	8008964 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4a6d      	ldr	r2, [pc, #436]	; (8005b74 <USBH_HID_InterfaceInit+0x2e0>)
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
 80059c2:	e007      	b.n	80059d4 <USBH_HID_InterfaceInit+0x140>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 80059c4:	486f      	ldr	r0, [pc, #444]	; (8005b84 <USBH_HID_InterfaceInit+0x2f0>)
 80059c6:	f002 ffb5 	bl	8008934 <iprintf>
 80059ca:	200a      	movs	r0, #10
 80059cc:	f002 ffca 	bl	8008964 <putchar>
    return USBH_FAIL;
 80059d0:	2302      	movs	r3, #2
 80059d2:	e0c2      	b.n	8005b5a <USBH_HID_InterfaceInit+0x2c6>
  }

  HID_Handle->state     = HID_INIT;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2200      	movs	r2, #0
 80059d8:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2200      	movs	r2, #0
 80059de:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059e0:	7dbb      	ldrb	r3, [r7, #22]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	211a      	movs	r1, #26
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059f6:	7dbb      	ldrb	r3, [r7, #22]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	211a      	movs	r1, #26
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a06:	881a      	ldrh	r2, [r3, #0]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005a0c:	7dbb      	ldrb	r3, [r7, #22]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	211a      	movs	r1, #26
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	8b9b      	ldrh	r3, [r3, #28]
 8005a28:	2b09      	cmp	r3, #9
 8005a2a:	d802      	bhi.n	8005a32 <USBH_HID_InterfaceInit+0x19e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	220a      	movs	r2, #10
 8005a30:	839a      	strh	r2, [r3, #28]

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);
 8005a32:	7dbb      	ldrb	r3, [r7, #22]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	211a      	movs	r1, #26
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005a42:	781b      	ldrb	r3, [r3, #0]
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	bf28      	it	cs
 8005a48:	2302      	movcs	r3, #2
 8005a4a:	73fb      	strb	r3, [r7, #15]


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]
 8005a50:	e07d      	b.n	8005b4e <USBH_HID_InterfaceInit+0x2ba>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
 8005a54:	7df9      	ldrb	r1, [r7, #23]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	3101      	adds	r1, #1
 8005a5a:	00c9      	lsls	r1, r1, #3
 8005a5c:	201a      	movs	r0, #26
 8005a5e:	fb00 f303 	mul.w	r3, r0, r3
 8005a62:	440b      	add	r3, r1
 8005a64:	4413      	add	r3, r2
 8005a66:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da35      	bge.n	8005ade <USBH_HID_InterfaceInit+0x24a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005a72:	7dbb      	ldrb	r3, [r7, #22]
 8005a74:	7df9      	ldrb	r1, [r7, #23]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	3101      	adds	r1, #1
 8005a7a:	00c9      	lsls	r1, r1, #3
 8005a7c:	201a      	movs	r0, #26
 8005a7e:	fb00 f303 	mul.w	r3, r0, r3
 8005a82:	440b      	add	r3, r1
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	791b      	ldrb	r3, [r3, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f002 fa87 	bl	8007faa <USBH_AllocPipe>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	7859      	ldrb	r1, [r3, #1]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	7918      	ldrb	r0, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	8b12      	ldrh	r2, [r2, #24]
 8005abc:	9202      	str	r2, [sp, #8]
 8005abe:	2203      	movs	r2, #3
 8005ac0:	9201      	str	r2, [sp, #4]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f002 fa3f 	bl	8007f4c <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	785b      	ldrb	r3, [r3, #1]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 fd90 	bl	80085fc <USBH_LL_SetToggle>
 8005adc:	e034      	b.n	8005b48 <USBH_HID_InterfaceInit+0x2b4>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005ade:	7dbb      	ldrb	r3, [r7, #22]
 8005ae0:	7df9      	ldrb	r1, [r7, #23]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	3101      	adds	r1, #1
 8005ae6:	00c9      	lsls	r1, r1, #3
 8005ae8:	201a      	movs	r0, #26
 8005aea:	fb00 f303 	mul.w	r3, r0, r3
 8005aee:	440b      	add	r3, r1
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 fa51 	bl	8007faa <USBH_AllocPipe>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	7819      	ldrb	r1, [r3, #0]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	78d8      	ldrb	r0, [r3, #3]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	8b12      	ldrh	r2, [r2, #24]
 8005b28:	9202      	str	r2, [sp, #8]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	9201      	str	r2, [sp, #4]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4623      	mov	r3, r4
 8005b32:	4602      	mov	r2, r0
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f002 fa09 	bl	8007f4c <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f002 fd5a 	bl	80085fc <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
 8005b4e:	7dfa      	ldrb	r2, [r7, #23]
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	f4ff af7d 	bcc.w	8005a52 <USBH_HID_InterfaceInit+0x1be>
    }
  }

  return USBH_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd90      	pop	{r4, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08009a2c 	.word	0x08009a2c
 8005b68:	08009a38 	.word	0x08009a38
 8005b6c:	08009a60 	.word	0x08009a60
 8005b70:	08009a88 	.word	0x08009a88
 8005b74:	080062b5 	.word	0x080062b5
 8005b78:	08009aa0 	.word	0x08009aa0
 8005b7c:	080064ad 	.word	0x080064ad
 8005b80:	08009ab4 	.word	0x08009ab4
 8005b84:	08009ac8 	.word	0x08009ac8

08005b88 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00e      	beq.n	8005bc0 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f002 f9ee 	bl	8007f8a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f002 fa19 	bl	8007fec <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 f9db 	bl	8007f8a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f002 fa06 	bl	8007fec <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 fdde 	bl	80087bc <free>
    phost->pActiveClass->pData = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c06:	2200      	movs	r2, #0
 8005c08:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	795b      	ldrb	r3, [r3, #5]
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d872      	bhi.n	8005d1c <USBH_HID_ClassRequest+0x108>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBH_HID_ClassRequest+0x28>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c55 	.word	0x08005c55
 8005c40:	08005d1d 	.word	0x08005d1d
 8005c44:	08005c6f 	.word	0x08005c6f
 8005c48:	08005c55 	.word	0x08005c55
 8005c4c:	08005cab 	.word	0x08005cab
 8005c50:	08005cd5 	.word	0x08005cd5
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	331c      	adds	r3, #28
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f000 f9e5 	bl	8006030 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	715a      	strb	r2, [r3, #5]

    break;
 8005c6c:	e05d      	b.n	8005d2a <USBH_HID_ClassRequest+0x116>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f948 	bl	8005f0a <USBH_HID_GetHIDReportDescriptor>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2204      	movs	r2, #4
 8005c88:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 8005c8a:	e049      	b.n	8005d20 <USBH_HID_ClassRequest+0x10c>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d146      	bne.n	8005d20 <USBH_HID_ClassRequest+0x10c>
      USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 8005c92:	4828      	ldr	r0, [pc, #160]	; (8005d34 <USBH_HID_ClassRequest+0x120>)
 8005c94:	f002 fe4e 	bl	8008934 <iprintf>
 8005c98:	4827      	ldr	r0, [pc, #156]	; (8005d38 <USBH_HID_ClassRequest+0x124>)
 8005c9a:	f002 fe4b 	bl	8008934 <iprintf>
 8005c9e:	200a      	movs	r0, #10
 8005ca0:	f002 fe60 	bl	8008964 <putchar>
      status = USBH_FAIL;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ca8:	e03a      	b.n	8005d20 <USBH_HID_ClassRequest+0x10c>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8005caa:	2200      	movs	r2, #0
 8005cac:	2100      	movs	r1, #0
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f944 	bl	8005f3c <USBH_HID_SetIdle>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <USBH_HID_ClassRequest+0xb2>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8005cc4:	e02e      	b.n	8005d24 <USBH_HID_ClassRequest+0x110>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d12b      	bne.n	8005d24 <USBH_HID_ClassRequest+0x110>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2205      	movs	r2, #5
 8005cd0:	715a      	strb	r2, [r3, #5]
    break;
 8005cd2:	e027      	b.n	8005d24 <USBH_HID_ClassRequest+0x110>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f984 	bl	8005fe4 <USBH_HID_SetProtocol>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <USBH_HID_ClassRequest+0xea>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
      status = USBH_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 8005cfc:	e014      	b.n	8005d28 <USBH_HID_ClassRequest+0x114>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d111      	bne.n	8005d28 <USBH_HID_ClassRequest+0x114>
      USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 8005d04:	480b      	ldr	r0, [pc, #44]	; (8005d34 <USBH_HID_ClassRequest+0x120>)
 8005d06:	f002 fe15 	bl	8008934 <iprintf>
 8005d0a:	480c      	ldr	r0, [pc, #48]	; (8005d3c <USBH_HID_ClassRequest+0x128>)
 8005d0c:	f002 fe12 	bl	8008934 <iprintf>
 8005d10:	200a      	movs	r0, #10
 8005d12:	f002 fe27 	bl	8008964 <putchar>
      status = USBH_FAIL;
 8005d16:	2302      	movs	r3, #2
 8005d18:	73fb      	strb	r3, [r7, #15]
    break;
 8005d1a:	e005      	b.n	8005d28 <USBH_HID_ClassRequest+0x114>

  case HID_REQ_IDLE:
  default:
    break;
 8005d1c:	bf00      	nop
 8005d1e:	e004      	b.n	8005d2a <USBH_HID_ClassRequest+0x116>
    break;
 8005d20:	bf00      	nop
 8005d22:	e002      	b.n	8005d2a <USBH_HID_ClassRequest+0x116>
    break;
 8005d24:	bf00      	nop
 8005d26:	e000      	b.n	8005d2a <USBH_HID_ClassRequest+0x116>
    break;
 8005d28:	bf00      	nop
  }

  return status;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08009ae0 	.word	0x08009ae0
 8005d38:	08009ae8 	.word	0x08009ae8
 8005d3c:	08009b28 	.word	0x08009b28

08005d40 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	789b      	ldrb	r3, [r3, #2]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	f200 80a9 	bhi.w	8005eb2 <USBH_HID_Process+0x172>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <USBH_HID_Process+0x28>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005eb3 	.word	0x08005eb3
 8005d74:	08005eb3 	.word	0x08005eb3
 8005d78:	08005e05 	.word	0x08005e05
 8005d7c:	08005def 	.word	0x08005def
 8005d80:	08005e33 	.word	0x08005e33
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d92:	e093      	b.n	8005ebc <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	8b1b      	ldrh	r3, [r3, #24]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	2101      	movs	r1, #1
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8f0 	bl	8005f8c <USBH_HID_GetReport>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2205      	movs	r2, #5
 8005dba:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005dbc:	e07e      	b.n	8005ebc <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dce:	e075      	b.n	8005ebc <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d105      	bne.n	8005de2 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2205      	movs	r2, #5
 8005dda:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]
      break;
 8005de0:	e06c      	b.n	8005ebc <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2207      	movs	r2, #7
 8005de6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	75fb      	strb	r3, [r7, #23]
      break;
 8005dec:	e066      	b.n	8005ebc <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d05c      	beq.n	8005eb6 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e02:	e058      	b.n	8005eb6 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f002 f87b 	bl	8007f0e <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2206      	movs	r2, #6
 8005e1c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8005e30:	e044      	b.n	8005ebc <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f002 fbb5 	bl	80085a8 <USBH_LL_GetURBState>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d120      	bne.n	8005e86 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f002 fb1a 	bl	8008484 <USBH_LL_GetLastXferSize>
 8005e50:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d12e      	bne.n	8005eba <USBH_HID_Process+0x17a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d02b      	beq.n	8005eba <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f103 0008 	add.w	r0, r3, #8
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6959      	ldr	r1, [r3, #20]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	8b1b      	ldrh	r3, [r3, #24]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f000 f9ca 	bl	800620a <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fa fb96 	bl	80005b0 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8005e84:	e019      	b.n	8005eba <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f002 fb8b 	bl	80085a8 <USBH_LL_GetURBState>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	d110      	bne.n	8005eba <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	7e9b      	ldrb	r3, [r3, #26]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fc37 	bl	8007712 <USBH_ClrFeature>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2204      	movs	r2, #4
 8005eae:	709a      	strb	r2, [r3, #2]
      break;
 8005eb0:	e003      	b.n	8005eba <USBH_HID_Process+0x17a>

    default:
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e002      	b.n	8005ebc <USBH_HID_Process+0x17c>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e000      	b.n	8005ebc <USBH_HID_Process+0x17c>
      break;
 8005eba:	bf00      	nop
  }

  return status;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop

08005ec8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	789b      	ldrb	r3, [r3, #2]
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d10c      	bne.n	8005efc <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	8b92      	ldrh	r2, [r2, #28]
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d302      	bcc.n	8005efc <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2204      	movs	r2, #4
 8005efa:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af02      	add	r7, sp, #8
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8005f26:	2101      	movs	r1, #1
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fb52 	bl	80075d2 <USBH_GetDescriptor>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2221      	movs	r2, #33	; 0x21
 8005f50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	220a      	movs	r2, #10
 8005f56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	78bb      	ldrb	r3, [r7, #2]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 fda8 	bl	8007ad2 <USBH_CtlReq>
 8005f82:	4603      	mov	r3, r0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	72fb      	strb	r3, [r7, #11]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	22a1      	movs	r2, #161	; 0xa1
 8005fa2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	7abb      	ldrb	r3, [r7, #10]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005fc4:	7e3b      	ldrb	r3, [r7, #24]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005fcc:	7e3b      	ldrb	r3, [r7, #24]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f001 fd7c 	bl	8007ad2 <USBH_CtlReq>
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2221      	movs	r2, #33	; 0x21
 8005ff4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	220b      	movs	r2, #11
 8005ffa:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	825a      	strh	r2, [r3, #18]
 8006008:	e002      	b.n	8006010 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800601c:	2200      	movs	r2, #0
 800601e:	2100      	movs	r1, #0
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fd56 	bl	8007ad2 <USBH_CtlReq>
 8006026:	4603      	mov	r3, r0

}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	3302      	adds	r3, #2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b29a      	uxth	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	3303      	adds	r3, #3
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	b29b      	uxth	r3, r3
 8006052:	4313      	orrs	r3, r2
 8006054:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8006056:	897b      	ldrh	r3, [r7, #10]
 8006058:	2b09      	cmp	r3, #9
 800605a:	d943      	bls.n	80060e4 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800605c:	2309      	movs	r3, #9
 800605e:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8006060:	e03c      	b.n	80060dc <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	4619      	mov	r1, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f001 fd17 	bl	8007a9c <USBH_GetNextDesc>
 800606e:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b21      	cmp	r3, #33	; 0x21
 8006076:	d131      	bne.n	80060dc <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	785a      	ldrb	r2, [r3, #1]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3302      	adds	r3, #2
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3303      	adds	r3, #3
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	b29b      	uxth	r3, r3
 800609c:	4313      	orrs	r3, r2
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	791a      	ldrb	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	795a      	ldrb	r2, [r3, #5]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	799a      	ldrb	r2, [r3, #6]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3307      	adds	r3, #7
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3308      	adds	r3, #8
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4313      	orrs	r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	811a      	strh	r2, [r3, #8]
        break;
 80060d8:	bf00      	nop
      }
    }
  }
}
 80060da:	e003      	b.n	80060e4 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80060dc:	893b      	ldrh	r3, [r7, #8]
 80060de:	897a      	ldrh	r2, [r7, #10]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d8be      	bhi.n	8006062 <USBH_HID_ParseHIDDesc+0x32>
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 80060f4:	23ff      	movs	r3, #255	; 0xff
 80060f6:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b0b      	cmp	r3, #11
 8006100:	d117      	bne.n	8006132 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006108:	4619      	mov	r1, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	231a      	movs	r3, #26
 800610e:	fb03 f301 	mul.w	r3, r3, r1
 8006112:	4413      	add	r3, r2
 8006114:	f203 3349 	addw	r3, r3, #841	; 0x349
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d102      	bne.n	8006128 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8006122:	2302      	movs	r3, #2
 8006124:	73fb      	strb	r3, [r7, #15]
 8006126:	e004      	b.n	8006132 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d101      	bne.n	8006132 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800612e:	2301      	movs	r3, #1
 8006130:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	601a      	str	r2, [r3, #0]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	7a9b      	ldrb	r3, [r3, #10]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d131      	bne.n	80061f6 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	82fb      	strh	r3, [r7, #22]
 800619c:	e027      	b.n	80061ee <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	88da      	ldrh	r2, [r3, #6]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	889b      	ldrh	r3, [r3, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d019      	beq.n	80061de <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	613a      	str	r2, [r7, #16]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	88c9      	ldrh	r1, [r1, #6]
 80061b8:	440a      	add	r2, r1
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88db      	ldrh	r3, [r3, #6]
 80061c2:	3301      	adds	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88da      	ldrh	r2, [r3, #6]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	891b      	ldrh	r3, [r3, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d108      	bne.n	80061e8 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	80da      	strh	r2, [r3, #6]
 80061dc:	e004      	b.n	80061e8 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	729a      	strb	r2, [r3, #10]
        return i;
 80061e4:	8afb      	ldrh	r3, [r7, #22]
 80061e6:	e00a      	b.n	80061fe <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 80061e8:	8afb      	ldrh	r3, [r7, #22]
 80061ea:	3301      	adds	r3, #1
 80061ec:	82fb      	strh	r3, [r7, #22]
 80061ee:	8afa      	ldrh	r2, [r7, #22]
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3d3      	bcc.n	800619e <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80061fc:	88fb      	ldrh	r3, [r7, #6]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800620a:	b480      	push	{r7}
 800620c:	b087      	sub	sp, #28
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7a9b      	ldrb	r3, [r3, #10]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d13c      	bne.n	800629e <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800622a:	2300      	movs	r3, #0
 800622c:	82fb      	strh	r3, [r7, #22]
 800622e:	e032      	b.n	8006296 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	889b      	ldrh	r3, [r3, #4]
 8006234:	3301      	adds	r3, #1
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	88d2      	ldrh	r2, [r2, #6]
 800623a:	4293      	cmp	r3, r2
 800623c:	d00a      	beq.n	8006254 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	889b      	ldrh	r3, [r3, #4]
 8006242:	3301      	adds	r3, #1
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	88db      	ldrh	r3, [r3, #6]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	729a      	strb	r2, [r3, #10]
        return i;
 800625a:	8afb      	ldrh	r3, [r7, #22]
 800625c:	e023      	b.n	80062a6 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	8892      	ldrh	r2, [r2, #4]
 8006266:	441a      	add	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	6139      	str	r1, [r7, #16]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	7013      	strb	r3, [r2, #0]
        f->head++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	889b      	ldrh	r3, [r3, #4]
 8006276:	3301      	adds	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	889a      	ldrh	r2, [r3, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	891b      	ldrh	r3, [r3, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	d102      	bne.n	8006290 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8006290:	8afb      	ldrh	r3, [r7, #22]
 8006292:	3301      	adds	r3, #1
 8006294:	82fb      	strh	r3, [r7, #22]
 8006296:	8afa      	ldrh	r2, [r7, #22]
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3c8      	bcc.n	8006230 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80062a4:	88fb      	ldrh	r3, [r7, #6]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	709a      	strb	r2, [r3, #2]
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062ce:	789a      	ldrb	r2, [r3, #2]
 80062d0:	4b21      	ldr	r3, [pc, #132]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062d2:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	711a      	strb	r2, [r3, #4]
 80062da:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062dc:	791a      	ldrb	r2, [r3, #4]
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062e0:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80062e2:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	719a      	strb	r2, [r3, #6]
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062ea:	799a      	ldrb	r2, [r3, #6]
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062ee:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	721a      	strb	r2, [r3, #8]
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062f8:	7a1a      	ldrb	r2, [r3, #8]
 80062fa:	4b17      	ldr	r3, [pc, #92]	; (8006358 <USBH_HID_KeybdInit+0xa4>)
 80062fc:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e00c      	b.n	800631e <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <USBH_HID_KeybdInit+0xa8>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2100      	movs	r1, #0
 800630a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800630e:	4a14      	ldr	r2, [pc, #80]	; (8006360 <USBH_HID_KeybdInit+0xac>)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2100      	movs	r1, #0
 8006314:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d9ef      	bls.n	8006304 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	8b1b      	ldrh	r3, [r3, #24]
 8006328:	2b08      	cmp	r3, #8
 800632a:	d902      	bls.n	8006332 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2208      	movs	r2, #8
 8006330:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a0a      	ldr	r2, [pc, #40]	; (8006360 <USBH_HID_KeybdInit+0xac>)
 8006336:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f103 0008 	add.w	r0, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006344:	2250      	movs	r2, #80	; 0x50
 8006346:	4619      	mov	r1, r3
 8006348:	f7ff fefa 	bl	8006140 <USBH_HID_FifoInit>

  return USBH_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000154 	.word	0x20000154
 800635c:	20000144 	.word	0x20000144
 8006360:	2000014c 	.word	0x2000014c

08006364 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f80d 	bl	800638c <USBH_HID_KeybdDecode>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8006378:	4b03      	ldr	r3, [pc, #12]	; (8006388 <USBH_HID_GetKeybdInfo+0x24>)
 800637a:	e000      	b.n	800637e <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800637c:	2300      	movs	r3, #0
  }
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000154 	.word	0x20000154

0800638c <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	8b1b      	ldrh	r3, [r3, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 80063a6:	2302      	movs	r3, #2
 80063a8:	e065      	b.n	8006476 <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f103 0008 	add.w	r0, r3, #8
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	8b1b      	ldrh	r3, [r3, #24]
 80063b4:	461a      	mov	r2, r3
 80063b6:	4932      	ldr	r1, [pc, #200]	; (8006480 <USBH_HID_KeybdDecode+0xf4>)
 80063b8:	f7ff fede 	bl	8006178 <USBH_HID_FifoRead>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	8b1b      	ldrh	r3, [r3, #24]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d155      	bne.n	8006474 <USBH_HID_KeybdDecode+0xe8>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80063c8:	2100      	movs	r1, #0
 80063ca:	482e      	ldr	r0, [pc, #184]	; (8006484 <USBH_HID_KeybdDecode+0xf8>)
 80063cc:	f000 f8b8 	bl	8006540 <HID_ReadItem>
 80063d0:	4603      	mov	r3, r0
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	4b2c      	ldr	r3, [pc, #176]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 80063d6:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80063d8:	2100      	movs	r1, #0
 80063da:	482c      	ldr	r0, [pc, #176]	; (800648c <USBH_HID_KeybdDecode+0x100>)
 80063dc:	f000 f8b0 	bl	8006540 <HID_ReadItem>
 80063e0:	4603      	mov	r3, r0
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b28      	ldr	r3, [pc, #160]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 80063e6:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 80063e8:	2100      	movs	r1, #0
 80063ea:	4829      	ldr	r0, [pc, #164]	; (8006490 <USBH_HID_KeybdDecode+0x104>)
 80063ec:	f000 f8a8 	bl	8006540 <HID_ReadItem>
 80063f0:	4603      	mov	r3, r0
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b24      	ldr	r3, [pc, #144]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 80063f6:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 80063f8:	2100      	movs	r1, #0
 80063fa:	4826      	ldr	r0, [pc, #152]	; (8006494 <USBH_HID_KeybdDecode+0x108>)
 80063fc:	f000 f8a0 	bl	8006540 <HID_ReadItem>
 8006400:	4603      	mov	r3, r0
 8006402:	b2da      	uxtb	r2, r3
 8006404:	4b20      	ldr	r3, [pc, #128]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 8006406:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8006408:	2100      	movs	r1, #0
 800640a:	4823      	ldr	r0, [pc, #140]	; (8006498 <USBH_HID_KeybdDecode+0x10c>)
 800640c:	f000 f898 	bl	8006540 <HID_ReadItem>
 8006410:	4603      	mov	r3, r0
 8006412:	b2da      	uxtb	r2, r3
 8006414:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 8006416:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8006418:	2100      	movs	r1, #0
 800641a:	4820      	ldr	r0, [pc, #128]	; (800649c <USBH_HID_KeybdDecode+0x110>)
 800641c:	f000 f890 	bl	8006540 <HID_ReadItem>
 8006420:	4603      	mov	r3, r0
 8006422:	b2da      	uxtb	r2, r3
 8006424:	4b18      	ldr	r3, [pc, #96]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 8006426:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8006428:	2100      	movs	r1, #0
 800642a:	481d      	ldr	r0, [pc, #116]	; (80064a0 <USBH_HID_KeybdDecode+0x114>)
 800642c:	f000 f888 	bl	8006540 <HID_ReadItem>
 8006430:	4603      	mov	r3, r0
 8006432:	b2da      	uxtb	r2, r3
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 8006436:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8006438:	2100      	movs	r1, #0
 800643a:	481a      	ldr	r0, [pc, #104]	; (80064a4 <USBH_HID_KeybdDecode+0x118>)
 800643c:	f000 f880 	bl	8006540 <HID_ReadItem>
 8006440:	4603      	mov	r3, r0
 8006442:	b2da      	uxtb	r2, r3
 8006444:	4b10      	ldr	r3, [pc, #64]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 8006446:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	e00d      	b.n	800646a <USBH_HID_KeybdDecode+0xde>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800644e:	7bfc      	ldrb	r4, [r7, #15]
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	4619      	mov	r1, r3
 8006454:	4814      	ldr	r0, [pc, #80]	; (80064a8 <USBH_HID_KeybdDecode+0x11c>)
 8006456:	f000 f873 	bl	8006540 <HID_ReadItem>
 800645a:	4603      	mov	r3, r0
 800645c:	b2da      	uxtb	r2, r3
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <USBH_HID_KeybdDecode+0xfc>)
 8006460:	4423      	add	r3, r4
 8006462:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	3301      	adds	r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b05      	cmp	r3, #5
 800646e:	d9ee      	bls.n	800644e <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e000      	b.n	8006476 <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;
 8006474:	2302      	movs	r3, #2
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bd90      	pop	{r4, r7, pc}
 800647e:	bf00      	nop
 8006480:	20000144 	.word	0x20000144
 8006484:	0800a024 	.word	0x0800a024
 8006488:	20000154 	.word	0x20000154
 800648c:	0800a044 	.word	0x0800a044
 8006490:	0800a064 	.word	0x0800a064
 8006494:	0800a084 	.word	0x0800a084
 8006498:	0800a0a4 	.word	0x0800a0a4
 800649c:	0800a0c4 	.word	0x0800a0c4
 80064a0:	0800a0e4 	.word	0x0800a0e4
 80064a4:	0800a104 	.word	0x0800a104
 80064a8:	0800a124 	.word	0x0800a124

080064ac <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <USBH_HID_MouseInit+0x88>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <USBH_HID_MouseInit+0x88>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <USBH_HID_MouseInit+0x88>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80064d0:	4b18      	ldr	r3, [pc, #96]	; (8006534 <USBH_HID_MouseInit+0x88>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80064d6:	4b17      	ldr	r3, [pc, #92]	; (8006534 <USBH_HID_MouseInit+0x88>)
 80064d8:	2200      	movs	r2, #0
 80064da:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e00c      	b.n	80064fc <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80064e2:	4a15      	ldr	r2, [pc, #84]	; (8006538 <USBH_HID_MouseInit+0x8c>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2100      	movs	r1, #0
 80064e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80064ec:	4a13      	ldr	r2, [pc, #76]	; (800653c <USBH_HID_MouseInit+0x90>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2100      	movs	r1, #0
 80064f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d9ef      	bls.n	80064e2 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	8b1b      	ldrh	r3, [r3, #24]
 8006506:	2b08      	cmp	r3, #8
 8006508:	d902      	bls.n	8006510 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2208      	movs	r2, #8
 800650e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a0a      	ldr	r2, [pc, #40]	; (800653c <USBH_HID_MouseInit+0x90>)
 8006514:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f103 0008 	add.w	r0, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006522:	2250      	movs	r2, #80	; 0x50
 8006524:	4619      	mov	r1, r3
 8006526:	f7ff fe0b 	bl	8006140 <USBH_HID_FifoInit>

  return USBH_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000164 	.word	0x20000164
 8006538:	2000016c 	.word	0x2000016c
 800653c:	20000174 	.word	0x20000174

08006540 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8006540:	b480      	push	{r7}
 8006542:	b089      	sub	sp, #36	; 0x24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	7a1b      	ldrb	r3, [r3, #8]
 800655e:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7a5b      	ldrb	r3, [r3, #9]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01a      	beq.n	800659e <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7a5b      	ldrb	r3, [r3, #9]
 800656c:	78fa      	ldrb	r2, [r7, #3]
 800656e:	429a      	cmp	r2, r3
 8006570:	d301      	bcc.n	8006576 <HID_ReadItem+0x36>
    {
      return (0U);
 8006572:	2300      	movs	r3, #0
 8006574:	e076      	b.n	8006664 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6852      	ldr	r2, [r2, #4]
 800657c:	fb02 f303 	mul.w	r3, r2, r3
 8006580:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e00a      	b.n	80065ba <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	3301      	adds	r3, #1
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HID_ReadItem+0x90>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	08db      	lsrs	r3, r3, #3
 80065cc:	3301      	adds	r3, #1
 80065ce:	e002      	b.n	80065d6 <HID_ReadItem+0x96>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	08db      	lsrs	r3, r3, #3
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4293      	cmp	r3, r2
 80065da:	d8e3      	bhi.n	80065a4 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80065dc:	7cfb      	ldrb	r3, [r7, #19]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	40da      	lsrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2101      	movs	r1, #1
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	4013      	ands	r3, r2
 80065f0:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d804      	bhi.n	8006606 <HID_ReadItem+0xc6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	429a      	cmp	r2, r3
 8006604:	d201      	bcs.n	800660a <HID_ReadItem+0xca>
  {
    return (0U);
 8006606:	2300      	movs	r3, #0
 8006608:	e02c      	b.n	8006664 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7a9b      	ldrb	r3, [r3, #10]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01d      	beq.n	800664e <HID_ReadItem+0x10e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	3b01      	subs	r3, #1
 8006618:	2201      	movs	r2, #1
 800661a:	409a      	lsls	r2, r3
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d014      	beq.n	800664e <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	425a      	negs	r2, r3
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	4313      	orrs	r3, r2
 8006634:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	e010      	b.n	8006664 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	fb02 f303 	mul.w	r3, r2, r3
 800664c:	e00a      	b.n	8006664 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HID_ReadItem+0x11a>
    {
      return (val);
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	e004      	b.n	8006664 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3724      	adds	r7, #36	; 0x24
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8006684:	481c      	ldr	r0, [pc, #112]	; (80066f8 <USBH_Init+0x88>)
 8006686:	f002 f955 	bl	8008934 <iprintf>
 800668a:	481c      	ldr	r0, [pc, #112]	; (80066fc <USBH_Init+0x8c>)
 800668c:	f002 f952 	bl	8008934 <iprintf>
 8006690:	200a      	movs	r0, #10
 8006692:	f002 f967 	bl	8008964 <putchar>
    return USBH_FAIL;
 8006696:	2302      	movs	r3, #2
 8006698:	e029      	b.n	80066ee <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	79fa      	ldrb	r2, [r7, #7]
 800669e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f824 	bl	8006700 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f001 fe1a 	bl	8008320 <USBH_LL_Init>

  return USBH_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	08009b60 	.word	0x08009b60
 80066fc:	08009b68 	.word	0x08009b68

08006700 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e009      	b.n	8006726 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	33e0      	adds	r3, #224	; 0xe0
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	2200      	movs	r2, #0
 800671e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b0e      	cmp	r3, #14
 800672a:	d9f2      	bls.n	8006712 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e009      	b.n	8006746 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674c:	d3f1      	bcc.n	8006732 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2240      	movs	r2, #64	; 0x40
 8006772:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01f      	beq.n	80067fc <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10e      	bne.n	80067e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	33de      	adds	r3, #222	; 0xde
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
 80067e2:	e016      	b.n	8006812 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 80067e4:	480d      	ldr	r0, [pc, #52]	; (800681c <USBH_RegisterClass+0x74>)
 80067e6:	f002 f8a5 	bl	8008934 <iprintf>
 80067ea:	480d      	ldr	r0, [pc, #52]	; (8006820 <USBH_RegisterClass+0x78>)
 80067ec:	f002 f8a2 	bl	8008934 <iprintf>
 80067f0:	200a      	movs	r0, #10
 80067f2:	f002 f8b7 	bl	8008964 <putchar>
      status = USBH_FAIL;
 80067f6:	2302      	movs	r3, #2
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e00a      	b.n	8006812 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 80067fc:	4807      	ldr	r0, [pc, #28]	; (800681c <USBH_RegisterClass+0x74>)
 80067fe:	f002 f899 	bl	8008934 <iprintf>
 8006802:	4808      	ldr	r0, [pc, #32]	; (8006824 <USBH_RegisterClass+0x7c>)
 8006804:	f002 f896 	bl	8008934 <iprintf>
 8006808:	200a      	movs	r0, #10
 800680a:	f002 f8ab 	bl	8008964 <putchar>
    status = USBH_FAIL;
 800680e:	2302      	movs	r3, #2
 8006810:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	08009b60 	.word	0x08009b60
 8006820:	08009b7c 	.word	0x08009b7c
 8006824:	08009b98 	.word	0x08009b98

08006828 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	429a      	cmp	r2, r3
 8006842:	d23c      	bcs.n	80068be <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	4619      	mov	r1, r3
 8006850:	4823      	ldr	r0, [pc, #140]	; (80068e0 <USBH_SelectInterface+0xb8>)
 8006852:	f002 f86f 	bl	8008934 <iprintf>
 8006856:	200a      	movs	r0, #10
 8006858:	f002 f884 	bl	8008964 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	211a      	movs	r1, #26
 8006862:	fb01 f303 	mul.w	r3, r1, r3
 8006866:	4413      	add	r3, r2
 8006868:	f203 3347 	addw	r3, r3, #839	; 0x347
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	481c      	ldr	r0, [pc, #112]	; (80068e4 <USBH_SelectInterface+0xbc>)
 8006872:	f002 f85f 	bl	8008934 <iprintf>
 8006876:	200a      	movs	r0, #10
 8006878:	f002 f874 	bl	8008964 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	211a      	movs	r1, #26
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	4815      	ldr	r0, [pc, #84]	; (80068e8 <USBH_SelectInterface+0xc0>)
 8006892:	f002 f84f 	bl	8008934 <iprintf>
 8006896:	200a      	movs	r0, #10
 8006898:	f002 f864 	bl	8008964 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	211a      	movs	r1, #26
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	f203 3349 	addw	r3, r3, #841	; 0x349
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	480e      	ldr	r0, [pc, #56]	; (80068ec <USBH_SelectInterface+0xc4>)
 80068b2:	f002 f83f 	bl	8008934 <iprintf>
 80068b6:	200a      	movs	r0, #10
 80068b8:	f002 f854 	bl	8008964 <putchar>
 80068bc:	e00a      	b.n	80068d4 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 80068be:	480c      	ldr	r0, [pc, #48]	; (80068f0 <USBH_SelectInterface+0xc8>)
 80068c0:	f002 f838 	bl	8008934 <iprintf>
 80068c4:	480b      	ldr	r0, [pc, #44]	; (80068f4 <USBH_SelectInterface+0xcc>)
 80068c6:	f002 f835 	bl	8008934 <iprintf>
 80068ca:	200a      	movs	r0, #10
 80068cc:	f002 f84a 	bl	8008964 <putchar>
    status = USBH_FAIL;
 80068d0:	2302      	movs	r3, #2
 80068d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	08009bb0 	.word	0x08009bb0
 80068e4:	08009bd0 	.word	0x08009bd0
 80068e8:	08009be0 	.word	0x08009be0
 80068ec:	08009bf0 	.word	0x08009bf0
 80068f0:	08009b60 	.word	0x08009b60
 80068f4:	08009c00 	.word	0x08009c00

080068f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	461a      	mov	r2, r3
 8006906:	4603      	mov	r3, r0
 8006908:	70fb      	strb	r3, [r7, #3]
 800690a:	460b      	mov	r3, r1
 800690c:	70bb      	strb	r3, [r7, #2]
 800690e:	4613      	mov	r3, r2
 8006910:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006920:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006922:	e025      	b.n	8006970 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	221a      	movs	r2, #26
 8006928:	fb02 f303 	mul.w	r3, r2, r3
 800692c:	3308      	adds	r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	3302      	adds	r3, #2
 8006934:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	795b      	ldrb	r3, [r3, #5]
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	429a      	cmp	r2, r3
 800693e:	d002      	beq.n	8006946 <USBH_FindInterface+0x4e>
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2bff      	cmp	r3, #255	; 0xff
 8006944:	d111      	bne.n	800696a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800694a:	78ba      	ldrb	r2, [r7, #2]
 800694c:	429a      	cmp	r2, r3
 800694e:	d002      	beq.n	8006956 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006950:	78bb      	ldrb	r3, [r7, #2]
 8006952:	2bff      	cmp	r3, #255	; 0xff
 8006954:	d109      	bne.n	800696a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800695a:	787a      	ldrb	r2, [r7, #1]
 800695c:	429a      	cmp	r2, r3
 800695e:	d002      	beq.n	8006966 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006960:	787b      	ldrb	r3, [r7, #1]
 8006962:	2bff      	cmp	r3, #255	; 0xff
 8006964:	d101      	bne.n	800696a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	e006      	b.n	8006978 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	3301      	adds	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d9d6      	bls.n	8006924 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006976:	23ff      	movs	r3, #255	; 0xff
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fd03 	bl	8008398 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fe1a 	bl	80085ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069ac:	2302      	movs	r3, #2
 80069ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d102      	bne.n	80069c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2203      	movs	r2, #3
 80069c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b0b      	cmp	r3, #11
 80069ce:	f200 822b 	bhi.w	8006e28 <USBH_Process+0x484>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <USBH_Process+0x34>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a09 	.word	0x08006a09
 80069dc:	08006a47 	.word	0x08006a47
 80069e0:	08006ac7 	.word	0x08006ac7
 80069e4:	08006db7 	.word	0x08006db7
 80069e8:	08006e29 	.word	0x08006e29
 80069ec:	08006b6b 	.word	0x08006b6b
 80069f0:	08006d39 	.word	0x08006d39
 80069f4:	08006bb9 	.word	0x08006bb9
 80069f8:	08006bd9 	.word	0x08006bd9
 80069fc:	08006c05 	.word	0x08006c05
 8006a00:	08006c3f 	.word	0x08006c3f
 8006a04:	08006d9f 	.word	0x08006d9f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 820b 	beq.w	8006e2c <USBH_Process+0x488>
      {
        USBH_UsrLog("USB Device Connected");
 8006a16:	48b9      	ldr	r0, [pc, #740]	; (8006cfc <USBH_Process+0x358>)
 8006a18:	f001 ff8c 	bl	8008934 <iprintf>
 8006a1c:	200a      	movs	r0, #10
 8006a1e:	f001 ffa1 	bl	8008964 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a28:	20c8      	movs	r0, #200	; 0xc8
 8006a2a:	f001 fe17 	bl	800865c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fd0d 	bl	800844e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a44:	e1f2      	b.n	8006e2c <USBH_Process+0x488>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10d      	bne.n	8006a6c <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8006a50:	48ab      	ldr	r0, [pc, #684]	; (8006d00 <USBH_Process+0x35c>)
 8006a52:	f001 ff6f 	bl	8008934 <iprintf>
 8006a56:	200a      	movs	r0, #10
 8006a58:	f001 ff84 	bl	8008964 <putchar>
        phost->device.RstCnt = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a6a:	e1ec      	b.n	8006e46 <USBH_Process+0x4a2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a76:	d91a      	bls.n	8006aae <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d909      	bls.n	8006aa6 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8006a92:	489c      	ldr	r0, [pc, #624]	; (8006d04 <USBH_Process+0x360>)
 8006a94:	f001 ff4e 	bl	8008934 <iprintf>
 8006a98:	200a      	movs	r0, #10
 8006a9a:	f001 ff63 	bl	8008964 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	220d      	movs	r2, #13
 8006aa2:	701a      	strb	r2, [r3, #0]
      break;
 8006aa4:	e1cf      	b.n	8006e46 <USBH_Process+0x4a2>
            phost->gState = HOST_IDLE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
      break;
 8006aac:	e1cb      	b.n	8006e46 <USBH_Process+0x4a2>
          phost->Timeout += 10U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ab4:	f103 020a 	add.w	r2, r3, #10
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006abe:	200a      	movs	r0, #10
 8006ac0:	f001 fdcc 	bl	800865c <USBH_Delay>
      break;
 8006ac4:	e1bf      	b.n	8006e46 <USBH_Process+0x4a2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006adc:	2064      	movs	r0, #100	; 0x64
 8006ade:	f001 fdbd 	bl	800865c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fc8e 	bl	8008404 <USBH_LL_GetSpeed>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2205      	movs	r2, #5
 8006af6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006af8:	2100      	movs	r1, #0
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fa55 	bl	8007faa <USBH_AllocPipe>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fa4d 	bl	8007faa <USBH_AllocPipe>
 8006b10:	4603      	mov	r3, r0
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7919      	ldrb	r1, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b2c:	b292      	uxth	r2, r2
 8006b2e:	9202      	str	r2, [sp, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	9201      	str	r2, [sp, #4]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	4603      	mov	r3, r0
 8006b38:	2280      	movs	r2, #128	; 0x80
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 fa06 	bl	8007f4c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7959      	ldrb	r1, [r3, #5]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b54:	b292      	uxth	r2, r2
 8006b56:	9202      	str	r2, [sp, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	9201      	str	r2, [sp, #4]
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2200      	movs	r2, #0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f9f2 	bl	8007f4c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b68:	e16d      	b.n	8006e46 <USBH_Process+0x4a2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f97a 	bl	8006e64 <USBH_HandleEnum>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 8159 	bne.w	8006e30 <USBH_Process+0x48c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8006b7e:	4862      	ldr	r0, [pc, #392]	; (8006d08 <USBH_Process+0x364>)
 8006b80:	f001 fed8 	bl	8008934 <iprintf>
 8006b84:	200a      	movs	r0, #10
 8006b86:	f001 feed 	bl	8008964 <putchar>

        phost->device.current_interface = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d109      	bne.n	8006bb0 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8006b9c:	485b      	ldr	r0, [pc, #364]	; (8006d0c <USBH_Process+0x368>)
 8006b9e:	f001 fec9 	bl	8008934 <iprintf>
 8006ba2:	200a      	movs	r0, #10
 8006ba4:	f001 fede 	bl	8008964 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2208      	movs	r2, #8
 8006bac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006bae:	e13f      	b.n	8006e30 <USBH_Process+0x48c>
          phost->gState = HOST_INPUT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2207      	movs	r2, #7
 8006bb4:	701a      	strb	r2, [r3, #0]
      break;
 8006bb6:	e13b      	b.n	8006e30 <USBH_Process+0x48c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8138 	beq.w	8006e34 <USBH_Process+0x490>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bca:	2101      	movs	r1, #1
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bd6:	e12d      	b.n	8006e34 <USBH_Process+0x490>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fd4e 	bl	8007684 <USBH_SetCfg>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 8124 	bne.w	8006e38 <USBH_Process+0x494>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2209      	movs	r2, #9
 8006bf4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8006bf6:	4846      	ldr	r0, [pc, #280]	; (8006d10 <USBH_Process+0x36c>)
 8006bf8:	f001 fe9c 	bl	8008934 <iprintf>
 8006bfc:	200a      	movs	r0, #10
 8006bfe:	f001 feb1 	bl	8008964 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c02:	e119      	b.n	8006e38 <USBH_Process+0x494>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d011      	beq.n	8006c36 <USBH_Process+0x292>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006c12:	2101      	movs	r1, #1
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fd58 	bl	80076ca <USBH_SetFeature>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 810d 	bne.w	8006e3c <USBH_Process+0x498>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8006c22:	483c      	ldr	r0, [pc, #240]	; (8006d14 <USBH_Process+0x370>)
 8006c24:	f001 fe86 	bl	8008934 <iprintf>
 8006c28:	200a      	movs	r0, #10
 8006c2a:	f001 fe9b 	bl	8008964 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	220a      	movs	r2, #10
 8006c32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c34:	e102      	b.n	8006e3c <USBH_Process+0x498>
        phost->gState = HOST_CHECK_CLASS;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	220a      	movs	r2, #10
 8006c3a:	701a      	strb	r2, [r3, #0]
      break;
 8006c3c:	e0fe      	b.n	8006e3c <USBH_Process+0x498>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <USBH_Process+0x2b2>
      {
        USBH_UsrLog("No Class has been registered.");
 8006c48:	4833      	ldr	r0, [pc, #204]	; (8006d18 <USBH_Process+0x374>)
 8006c4a:	f001 fe73 	bl	8008934 <iprintf>
 8006c4e:	200a      	movs	r0, #10
 8006c50:	f001 fe88 	bl	8008964 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c54:	e0f7      	b.n	8006e46 <USBH_Process+0x4a2>
        phost->pActiveClass = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
 8006c62:	e016      	b.n	8006c92 <USBH_Process+0x2ee>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c64:	7bfa      	ldrb	r2, [r7, #15]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32de      	adds	r2, #222	; 0xde
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	791a      	ldrb	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d108      	bne.n	8006c8c <USBH_Process+0x2e8>
            phost->pActiveClass = phost->pClass[idx];
 8006c7a:	7bfa      	ldrb	r2, [r7, #15]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	32de      	adds	r2, #222	; 0xde
 8006c80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c8a:	e005      	b.n	8006c98 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0e5      	beq.n	8006c64 <USBH_Process+0x2c0>
        if (phost->pActiveClass != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d040      	beq.n	8006d24 <USBH_Process+0x380>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d114      	bne.n	8006cde <USBH_Process+0x33a>
            phost->gState = HOST_CLASS_REQUEST;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2206      	movs	r2, #6
 8006cb8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4815      	ldr	r0, [pc, #84]	; (8006d1c <USBH_Process+0x378>)
 8006cc6:	f001 fe35 	bl	8008934 <iprintf>
 8006cca:	200a      	movs	r0, #10
 8006ccc:	f001 fe4a 	bl	8008964 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd6:	2103      	movs	r1, #3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      break;
 8006cdc:	e0b3      	b.n	8006e46 <USBH_Process+0x4a2>
            phost->gState = HOST_ABORT_STATE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	220d      	movs	r2, #13
 8006ce2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	480c      	ldr	r0, [pc, #48]	; (8006d20 <USBH_Process+0x37c>)
 8006cf0:	f001 fe20 	bl	8008934 <iprintf>
 8006cf4:	200a      	movs	r0, #10
 8006cf6:	f001 fe35 	bl	8008964 <putchar>
      break;
 8006cfa:	e0a4      	b.n	8006e46 <USBH_Process+0x4a2>
 8006cfc:	08009c20 	.word	0x08009c20
 8006d00:	08009c38 	.word	0x08009c38
 8006d04:	08009c54 	.word	0x08009c54
 8006d08:	08009c80 	.word	0x08009c80
 8006d0c:	08009c94 	.word	0x08009c94
 8006d10:	08009cbc 	.word	0x08009cbc
 8006d14:	08009cd8 	.word	0x08009cd8
 8006d18:	08009cf8 	.word	0x08009cf8
 8006d1c:	08009d18 	.word	0x08009d18
 8006d20:	08009d2c 	.word	0x08009d2c
          phost->gState = HOST_ABORT_STATE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	220d      	movs	r2, #13
 8006d28:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8006d2a:	4849      	ldr	r0, [pc, #292]	; (8006e50 <USBH_Process+0x4ac>)
 8006d2c:	f001 fe02 	bl	8008934 <iprintf>
 8006d30:	200a      	movs	r0, #10
 8006d32:	f001 fe17 	bl	8008964 <putchar>
      break;
 8006d36:	e086      	b.n	8006e46 <USBH_Process+0x4a2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d020      	beq.n	8006d84 <USBH_Process+0x3e0>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d103      	bne.n	8006d62 <USBH_Process+0x3be>
        {
          phost->gState = HOST_CLASS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	220b      	movs	r2, #11
 8006d5e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d60:	e06e      	b.n	8006e40 <USBH_Process+0x49c>
        else if (status == USBH_FAIL)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d16a      	bne.n	8006e40 <USBH_Process+0x49c>
          phost->gState = HOST_ABORT_STATE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	220d      	movs	r2, #13
 8006d6e:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8006d70:	4838      	ldr	r0, [pc, #224]	; (8006e54 <USBH_Process+0x4b0>)
 8006d72:	f001 fddf 	bl	8008934 <iprintf>
 8006d76:	4838      	ldr	r0, [pc, #224]	; (8006e58 <USBH_Process+0x4b4>)
 8006d78:	f001 fddc 	bl	8008934 <iprintf>
 8006d7c:	200a      	movs	r0, #10
 8006d7e:	f001 fdf1 	bl	8008964 <putchar>
      break;
 8006d82:	e05d      	b.n	8006e40 <USBH_Process+0x49c>
        phost->gState = HOST_ABORT_STATE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8006d8a:	4832      	ldr	r0, [pc, #200]	; (8006e54 <USBH_Process+0x4b0>)
 8006d8c:	f001 fdd2 	bl	8008934 <iprintf>
 8006d90:	4832      	ldr	r0, [pc, #200]	; (8006e5c <USBH_Process+0x4b8>)
 8006d92:	f001 fdcf 	bl	8008934 <iprintf>
 8006d96:	200a      	movs	r0, #10
 8006d98:	f001 fde4 	bl	8008964 <putchar>
      break;
 8006d9c:	e050      	b.n	8006e40 <USBH_Process+0x49c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d04d      	beq.n	8006e44 <USBH_Process+0x4a0>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
      }
      break;
 8006db4:	e046      	b.n	8006e44 <USBH_Process+0x4a0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff fc9e 	bl	8006700 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <USBH_Process+0x43e>
      {
        phost->pActiveClass->DeInit(phost);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <USBH_Process+0x454>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006df2:	2105      	movs	r1, #5
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8006df8:	4819      	ldr	r0, [pc, #100]	; (8006e60 <USBH_Process+0x4bc>)
 8006dfa:	f001 fd9b 	bl	8008934 <iprintf>
 8006dfe:	200a      	movs	r0, #10
 8006e00:	f001 fdb0 	bl	8008964 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d107      	bne.n	8006e20 <USBH_Process+0x47c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff fdb3 	bl	8006984 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e1e:	e012      	b.n	8006e46 <USBH_Process+0x4a2>
        USBH_LL_Start(phost);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fab9 	bl	8008398 <USBH_LL_Start>
      break;
 8006e26:	e00e      	b.n	8006e46 <USBH_Process+0x4a2>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e28:	bf00      	nop
 8006e2a:	e00c      	b.n	8006e46 <USBH_Process+0x4a2>
      break;
 8006e2c:	bf00      	nop
 8006e2e:	e00a      	b.n	8006e46 <USBH_Process+0x4a2>
      break;
 8006e30:	bf00      	nop
 8006e32:	e008      	b.n	8006e46 <USBH_Process+0x4a2>
    break;
 8006e34:	bf00      	nop
 8006e36:	e006      	b.n	8006e46 <USBH_Process+0x4a2>
      break;
 8006e38:	bf00      	nop
 8006e3a:	e004      	b.n	8006e46 <USBH_Process+0x4a2>
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e002      	b.n	8006e46 <USBH_Process+0x4a2>
      break;
 8006e40:	bf00      	nop
 8006e42:	e000      	b.n	8006e46 <USBH_Process+0x4a2>
      break;
 8006e44:	bf00      	nop
  }
  return USBH_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	08009d4c 	.word	0x08009d4c
 8006e54:	08009b60 	.word	0x08009b60
 8006e58:	08009d74 	.word	0x08009d74
 8006e5c:	08009d9c 	.word	0x08009d9c
 8006e60:	08009db4 	.word	0x08009db4

08006e64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af04      	add	r7, sp, #16
 8006e6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b07      	cmp	r3, #7
 8006e7a:	f200 8280 	bhi.w	800737e <USBH_HandleEnum+0x51a>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <USBH_HandleEnum+0x20>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ea5 	.word	0x08006ea5
 8006e88:	08006f81 	.word	0x08006f81
 8006e8c:	08007031 	.word	0x08007031
 8006e90:	080070f1 	.word	0x080070f1
 8006e94:	08007179 	.word	0x08007179
 8006e98:	0800722d 	.word	0x0800722d
 8006e9c:	080072a1 	.word	0x080072a1
 8006ea0:	08007313 	.word	0x08007313
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ea4:	2108      	movs	r1, #8
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fb1c 	bl	80074e4 <USBH_Get_DevDesc>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d130      	bne.n	8006f18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7919      	ldrb	r1, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eda:	b292      	uxth	r2, r2
 8006edc:	9202      	str	r2, [sp, #8]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	9201      	str	r2, [sp, #4]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2280      	movs	r2, #128	; 0x80
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f82f 	bl	8007f4c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7959      	ldrb	r1, [r3, #5]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f02:	b292      	uxth	r2, r2
 8006f04:	9202      	str	r2, [sp, #8]
 8006f06:	2200      	movs	r2, #0
 8006f08:	9201      	str	r2, [sp, #4]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2200      	movs	r2, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f81b 	bl	8007f4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f16:	e234      	b.n	8007382 <USBH_HandleEnum+0x51e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	f040 8231 	bne.w	8007382 <USBH_HandleEnum+0x51e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8006f20:	48b9      	ldr	r0, [pc, #740]	; (8007208 <USBH_HandleEnum+0x3a4>)
 8006f22:	f001 fd07 	bl	8008934 <iprintf>
 8006f26:	48b9      	ldr	r0, [pc, #740]	; (800720c <USBH_HandleEnum+0x3a8>)
 8006f28:	f001 fd04 	bl	8008934 <iprintf>
 8006f2c:	200a      	movs	r0, #10
 8006f2e:	f001 fd19 	bl	8008964 <putchar>
        phost->device.EnumCnt++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f38:	3301      	adds	r3, #1
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d909      	bls.n	8006f60 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8006f4c:	48b0      	ldr	r0, [pc, #704]	; (8007210 <USBH_HandleEnum+0x3ac>)
 8006f4e:	f001 fcf1 	bl	8008934 <iprintf>
 8006f52:	200a      	movs	r0, #10
 8006f54:	f001 fd06 	bl	8008964 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	220d      	movs	r2, #13
 8006f5c:	701a      	strb	r2, [r3, #0]
      break;
 8006f5e:	e210      	b.n	8007382 <USBH_HandleEnum+0x51e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	795b      	ldrb	r3, [r3, #5]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f840 	bl	8007fec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	791b      	ldrb	r3, [r3, #4]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 f83a 	bl	8007fec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e200      	b.n	8007382 <USBH_HandleEnum+0x51e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f80:	2112      	movs	r1, #18
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 faae 	bl	80074e4 <USBH_Get_DevDesc>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d117      	bne.n	8006fc2 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8006f98:	4619      	mov	r1, r3
 8006f9a:	489e      	ldr	r0, [pc, #632]	; (8007214 <USBH_HandleEnum+0x3b0>)
 8006f9c:	f001 fcca 	bl	8008934 <iprintf>
 8006fa0:	200a      	movs	r0, #10
 8006fa2:	f001 fcdf 	bl	8008964 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8006fac:	4619      	mov	r1, r3
 8006fae:	489a      	ldr	r0, [pc, #616]	; (8007218 <USBH_HandleEnum+0x3b4>)
 8006fb0:	f001 fcc0 	bl	8008934 <iprintf>
 8006fb4:	200a      	movs	r0, #10
 8006fb6:	f001 fcd5 	bl	8008964 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fc0:	e1e1      	b.n	8007386 <USBH_HandleEnum+0x522>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	f040 81de 	bne.w	8007386 <USBH_HandleEnum+0x522>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8006fca:	488f      	ldr	r0, [pc, #572]	; (8007208 <USBH_HandleEnum+0x3a4>)
 8006fcc:	f001 fcb2 	bl	8008934 <iprintf>
 8006fd0:	4892      	ldr	r0, [pc, #584]	; (800721c <USBH_HandleEnum+0x3b8>)
 8006fd2:	f001 fcaf 	bl	8008934 <iprintf>
 8006fd6:	200a      	movs	r0, #10
 8006fd8:	f001 fcc4 	bl	8008964 <putchar>
        phost->device.EnumCnt++;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d909      	bls.n	800700a <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8006ff6:	4886      	ldr	r0, [pc, #536]	; (8007210 <USBH_HandleEnum+0x3ac>)
 8006ff8:	f001 fc9c 	bl	8008934 <iprintf>
 8006ffc:	200a      	movs	r0, #10
 8006ffe:	f001 fcb1 	bl	8008964 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	220d      	movs	r2, #13
 8007006:	701a      	strb	r2, [r3, #0]
      break;
 8007008:	e1bd      	b.n	8007386 <USBH_HandleEnum+0x522>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	795b      	ldrb	r3, [r3, #5]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 ffeb 	bl	8007fec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	791b      	ldrb	r3, [r3, #4]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 ffe5 	bl	8007fec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
      break;
 800702e:	e1aa      	b.n	8007386 <USBH_HandleEnum+0x522>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007030:	2101      	movs	r1, #1
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fb02 	bl	800763c <USBH_SetAddress>
 8007038:	4603      	mov	r3, r0
 800703a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d13c      	bne.n	80070bc <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 8007042:	2002      	movs	r0, #2
 8007044:	f001 fb0a 	bl	800865c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8007056:	4619      	mov	r1, r3
 8007058:	4871      	ldr	r0, [pc, #452]	; (8007220 <USBH_HandleEnum+0x3bc>)
 800705a:	f001 fc6b 	bl	8008934 <iprintf>
 800705e:	200a      	movs	r0, #10
 8007060:	f001 fc80 	bl	8008964 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2203      	movs	r2, #3
 8007068:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7919      	ldrb	r1, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800707e:	b292      	uxth	r2, r2
 8007080:	9202      	str	r2, [sp, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4603      	mov	r3, r0
 800708a:	2280      	movs	r2, #128	; 0x80
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 ff5d 	bl	8007f4c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	7959      	ldrb	r1, [r3, #5]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070a6:	b292      	uxth	r2, r2
 80070a8:	9202      	str	r2, [sp, #8]
 80070aa:	2200      	movs	r2, #0
 80070ac:	9201      	str	r2, [sp, #4]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4603      	mov	r3, r0
 80070b2:	2200      	movs	r2, #0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 ff49 	bl	8007f4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070ba:	e166      	b.n	800738a <USBH_HandleEnum+0x526>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	f040 8163 	bne.w	800738a <USBH_HandleEnum+0x526>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80070c4:	4850      	ldr	r0, [pc, #320]	; (8007208 <USBH_HandleEnum+0x3a4>)
 80070c6:	f001 fc35 	bl	8008934 <iprintf>
 80070ca:	4856      	ldr	r0, [pc, #344]	; (8007224 <USBH_HandleEnum+0x3c0>)
 80070cc:	f001 fc32 	bl	8008934 <iprintf>
 80070d0:	200a      	movs	r0, #10
 80070d2:	f001 fc47 	bl	8008964 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80070d6:	484e      	ldr	r0, [pc, #312]	; (8007210 <USBH_HandleEnum+0x3ac>)
 80070d8:	f001 fc2c 	bl	8008934 <iprintf>
 80070dc:	200a      	movs	r0, #10
 80070de:	f001 fc41 	bl	8008964 <putchar>
        phost->gState = HOST_ABORT_STATE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	220d      	movs	r2, #13
 80070e6:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	705a      	strb	r2, [r3, #1]
      break;
 80070ee:	e14c      	b.n	800738a <USBH_HandleEnum+0x526>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070f0:	2109      	movs	r1, #9
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa1e 	bl	8007534 <USBH_Get_CfgDesc>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d103      	bne.n	800710a <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007108:	e141      	b.n	800738e <USBH_HandleEnum+0x52a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b03      	cmp	r3, #3
 800710e:	f040 813e 	bne.w	800738e <USBH_HandleEnum+0x52a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8007112:	483d      	ldr	r0, [pc, #244]	; (8007208 <USBH_HandleEnum+0x3a4>)
 8007114:	f001 fc0e 	bl	8008934 <iprintf>
 8007118:	4843      	ldr	r0, [pc, #268]	; (8007228 <USBH_HandleEnum+0x3c4>)
 800711a:	f001 fc0b 	bl	8008934 <iprintf>
 800711e:	200a      	movs	r0, #10
 8007120:	f001 fc20 	bl	8008964 <putchar>
        phost->device.EnumCnt++;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800712a:	3301      	adds	r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800713a:	2b03      	cmp	r3, #3
 800713c:	d909      	bls.n	8007152 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800713e:	4834      	ldr	r0, [pc, #208]	; (8007210 <USBH_HandleEnum+0x3ac>)
 8007140:	f001 fbf8 	bl	8008934 <iprintf>
 8007144:	200a      	movs	r0, #10
 8007146:	f001 fc0d 	bl	8008964 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	220d      	movs	r2, #13
 800714e:	701a      	strb	r2, [r3, #0]
      break;
 8007150:	e11d      	b.n	800738e <USBH_HandleEnum+0x52a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	795b      	ldrb	r3, [r3, #5]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 ff47 	bl	8007fec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	791b      	ldrb	r3, [r3, #4]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 ff41 	bl	8007fec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
      break;
 8007176:	e10a      	b.n	800738e <USBH_HandleEnum+0x52a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9d7 	bl	8007534 <USBH_Get_CfgDesc>
 8007186:	4603      	mov	r3, r0
 8007188:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2205      	movs	r2, #5
 8007194:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007196:	e0fc      	b.n	8007392 <USBH_HandleEnum+0x52e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b03      	cmp	r3, #3
 800719c:	f040 80f9 	bne.w	8007392 <USBH_HandleEnum+0x52e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80071a0:	4819      	ldr	r0, [pc, #100]	; (8007208 <USBH_HandleEnum+0x3a4>)
 80071a2:	f001 fbc7 	bl	8008934 <iprintf>
 80071a6:	4820      	ldr	r0, [pc, #128]	; (8007228 <USBH_HandleEnum+0x3c4>)
 80071a8:	f001 fbc4 	bl	8008934 <iprintf>
 80071ac:	200a      	movs	r0, #10
 80071ae:	f001 fbd9 	bl	8008964 <putchar>
        phost->device.EnumCnt++;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071b8:	3301      	adds	r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d909      	bls.n	80071e0 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80071cc:	4810      	ldr	r0, [pc, #64]	; (8007210 <USBH_HandleEnum+0x3ac>)
 80071ce:	f001 fbb1 	bl	8008934 <iprintf>
 80071d2:	200a      	movs	r0, #10
 80071d4:	f001 fbc6 	bl	8008964 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220d      	movs	r2, #13
 80071dc:	701a      	strb	r2, [r3, #0]
      break;
 80071de:	e0d8      	b.n	8007392 <USBH_HandleEnum+0x52e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	795b      	ldrb	r3, [r3, #5]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 ff00 	bl	8007fec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	791b      	ldrb	r3, [r3, #4]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fefa 	bl	8007fec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
      break;
 8007204:	e0c5      	b.n	8007392 <USBH_HandleEnum+0x52e>
 8007206:	bf00      	nop
 8007208:	08009b60 	.word	0x08009b60
 800720c:	08009dcc 	.word	0x08009dcc
 8007210:	08009e00 	.word	0x08009e00
 8007214:	08009e40 	.word	0x08009e40
 8007218:	08009e4c 	.word	0x08009e4c
 800721c:	08009e58 	.word	0x08009e58
 8007220:	08009e94 	.word	0x08009e94
 8007224:	08009eac 	.word	0x08009eac
 8007228:	08009ee0 	.word	0x08009ee0

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007232:	2b00      	cmp	r3, #0
 8007234:	d02a      	beq.n	800728c <USBH_HandleEnum+0x428>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007242:	23ff      	movs	r3, #255	; 0xff
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f999 	bl	800757c <USBH_Get_StringDesc>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <USBH_HandleEnum+0x40c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800725a:	4619      	mov	r1, r3
 800725c:	4853      	ldr	r0, [pc, #332]	; (80073ac <USBH_HandleEnum+0x548>)
 800725e:	f001 fb69 	bl	8008934 <iprintf>
 8007262:	200a      	movs	r0, #10
 8007264:	f001 fb7e 	bl	8008964 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2206      	movs	r2, #6
 800726c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800726e:	e092      	b.n	8007396 <USBH_HandleEnum+0x532>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b03      	cmp	r3, #3
 8007274:	f040 808f 	bne.w	8007396 <USBH_HandleEnum+0x532>
          USBH_UsrLog("Manufacturer : N/A");
 8007278:	484d      	ldr	r0, [pc, #308]	; (80073b0 <USBH_HandleEnum+0x54c>)
 800727a:	f001 fb5b 	bl	8008934 <iprintf>
 800727e:	200a      	movs	r0, #10
 8007280:	f001 fb70 	bl	8008964 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2206      	movs	r2, #6
 8007288:	705a      	strb	r2, [r3, #1]
      break;
 800728a:	e084      	b.n	8007396 <USBH_HandleEnum+0x532>
        USBH_UsrLog("Manufacturer : N/A");
 800728c:	4848      	ldr	r0, [pc, #288]	; (80073b0 <USBH_HandleEnum+0x54c>)
 800728e:	f001 fb51 	bl	8008934 <iprintf>
 8007292:	200a      	movs	r0, #10
 8007294:	f001 fb66 	bl	8008964 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2206      	movs	r2, #6
 800729c:	705a      	strb	r2, [r3, #1]
      break;
 800729e:	e07a      	b.n	8007396 <USBH_HandleEnum+0x532>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d029      	beq.n	80072fe <USBH_HandleEnum+0x49a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072b6:	23ff      	movs	r3, #255	; 0xff
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f95f 	bl	800757c <USBH_Get_StringDesc>
 80072be:	4603      	mov	r3, r0
 80072c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10d      	bne.n	80072e4 <USBH_HandleEnum+0x480>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072ce:	4619      	mov	r1, r3
 80072d0:	4838      	ldr	r0, [pc, #224]	; (80073b4 <USBH_HandleEnum+0x550>)
 80072d2:	f001 fb2f 	bl	8008934 <iprintf>
 80072d6:	200a      	movs	r0, #10
 80072d8:	f001 fb44 	bl	8008964 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2207      	movs	r2, #7
 80072e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072e2:	e05a      	b.n	800739a <USBH_HandleEnum+0x536>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d157      	bne.n	800739a <USBH_HandleEnum+0x536>
          USBH_UsrLog("Product : N/A");
 80072ea:	4833      	ldr	r0, [pc, #204]	; (80073b8 <USBH_HandleEnum+0x554>)
 80072ec:	f001 fb22 	bl	8008934 <iprintf>
 80072f0:	200a      	movs	r0, #10
 80072f2:	f001 fb37 	bl	8008964 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2207      	movs	r2, #7
 80072fa:	705a      	strb	r2, [r3, #1]
      break;
 80072fc:	e04d      	b.n	800739a <USBH_HandleEnum+0x536>
        USBH_UsrLog("Product : N/A");
 80072fe:	482e      	ldr	r0, [pc, #184]	; (80073b8 <USBH_HandleEnum+0x554>)
 8007300:	f001 fb18 	bl	8008934 <iprintf>
 8007304:	200a      	movs	r0, #10
 8007306:	f001 fb2d 	bl	8008964 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2207      	movs	r2, #7
 800730e:	705a      	strb	r2, [r3, #1]
      break;
 8007310:	e043      	b.n	800739a <USBH_HandleEnum+0x536>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007318:	2b00      	cmp	r3, #0
 800731a:	d027      	beq.n	800736c <USBH_HandleEnum+0x508>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007328:	23ff      	movs	r3, #255	; 0xff
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f926 	bl	800757c <USBH_Get_StringDesc>
 8007330:	4603      	mov	r3, r0
 8007332:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10c      	bne.n	8007354 <USBH_HandleEnum+0x4f0>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007340:	4619      	mov	r1, r3
 8007342:	481e      	ldr	r0, [pc, #120]	; (80073bc <USBH_HandleEnum+0x558>)
 8007344:	f001 faf6 	bl	8008934 <iprintf>
 8007348:	200a      	movs	r0, #10
 800734a:	f001 fb0b 	bl	8008964 <putchar>
          Status = USBH_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007352:	e024      	b.n	800739e <USBH_HandleEnum+0x53a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b03      	cmp	r3, #3
 8007358:	d121      	bne.n	800739e <USBH_HandleEnum+0x53a>
          USBH_UsrLog("Serial Number : N/A");
 800735a:	4819      	ldr	r0, [pc, #100]	; (80073c0 <USBH_HandleEnum+0x55c>)
 800735c:	f001 faea 	bl	8008934 <iprintf>
 8007360:	200a      	movs	r0, #10
 8007362:	f001 faff 	bl	8008964 <putchar>
          Status = USBH_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e018      	b.n	800739e <USBH_HandleEnum+0x53a>
        USBH_UsrLog("Serial Number : N/A");
 800736c:	4814      	ldr	r0, [pc, #80]	; (80073c0 <USBH_HandleEnum+0x55c>)
 800736e:	f001 fae1 	bl	8008934 <iprintf>
 8007372:	200a      	movs	r0, #10
 8007374:	f001 faf6 	bl	8008964 <putchar>
        Status = USBH_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
      break;
 800737c:	e00f      	b.n	800739e <USBH_HandleEnum+0x53a>

    default:
      break;
 800737e:	bf00      	nop
 8007380:	e00e      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 8007382:	bf00      	nop
 8007384:	e00c      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 8007386:	bf00      	nop
 8007388:	e00a      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 800738a:	bf00      	nop
 800738c:	e008      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 800738e:	bf00      	nop
 8007390:	e006      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <USBH_HandleEnum+0x53c>
      break;
 800739e:	bf00      	nop
  }
  return Status;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	08009f24 	.word	0x08009f24
 80073b0:	08009f38 	.word	0x08009f38
 80073b4:	08009f4c 	.word	0x08009f4c
 80073b8:	08009f5c 	.word	0x08009f5c
 80073bc:	08009f6c 	.word	0x08009f6c
 80073c0:	08009f80 	.word	0x08009f80

080073c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f804 	bl	8007406 <USBH_HandleSof>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b0b      	cmp	r3, #11
 8007416:	d10a      	bne.n	800742e <USBH_HandleSof+0x28>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
  }
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007446:	bf00      	nop
}
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007462:	bf00      	nop
}
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 ff86 	bl	80083ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	791b      	ldrb	r3, [r3, #4]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fd8f 	bl	8007fec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	795b      	ldrb	r3, [r3, #5]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fd89 	bl	8007fec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007502:	2100      	movs	r1, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f864 	bl	80075d2 <USBH_GetDescriptor>
 800750a:	4603      	mov	r3, r0
 800750c:	73fb      	strb	r3, [r7, #15]
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f203 3026 	addw	r0, r3, #806	; 0x326
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	b292      	uxth	r2, r2
 8007524:	4619      	mov	r1, r3
 8007526:	f000 f918 	bl	800775a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	331c      	adds	r3, #28
 8007544:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007550:	2100      	movs	r1, #0
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f83d 	bl	80075d2 <USBH_GetDescriptor>
 8007558:	4603      	mov	r3, r0
 800755a:	72fb      	strb	r3, [r7, #11]
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d107      	bne.n	8007572 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007568:	887a      	ldrh	r2, [r7, #2]
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f964 	bl	800783a <USBH_ParseCfgDesc>
  }

  return status;
 8007572:	7afb      	ldrb	r3, [r7, #11]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	461a      	mov	r2, r3
 8007588:	460b      	mov	r3, r1
 800758a:	72fb      	strb	r3, [r7, #11]
 800758c:	4613      	mov	r3, r2
 800758e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007598:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	460b      	mov	r3, r1
 80075a6:	2100      	movs	r1, #0
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f812 	bl	80075d2 <USBH_GetDescriptor>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75fb      	strb	r3, [r7, #23]
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d107      	bne.n	80075c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075be:	893a      	ldrh	r2, [r7, #8]
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fa37 	bl	8007a36 <USBH_ParseStringDesc>
  }

  return status;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	72fb      	strb	r3, [r7, #11]
 80075e0:	4613      	mov	r3, r2
 80075e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	789b      	ldrb	r3, [r3, #2]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d11c      	bne.n	8007626 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2206      	movs	r2, #6
 80075fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	893a      	ldrh	r2, [r7, #8]
 8007602:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007604:	893b      	ldrh	r3, [r7, #8]
 8007606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d104      	bne.n	800761a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f240 4209 	movw	r2, #1033	; 0x409
 8007616:	829a      	strh	r2, [r3, #20]
 8007618:	e002      	b.n	8007620 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8b3a      	ldrh	r2, [r7, #24]
 8007624:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007626:	8b3b      	ldrh	r3, [r7, #24]
 8007628:	461a      	mov	r2, r3
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fa50 	bl	8007ad2 <USBH_CtlReq>
 8007632:	4603      	mov	r3, r0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	789b      	ldrb	r3, [r3, #2]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d10f      	bne.n	8007670 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2205      	movs	r2, #5
 800765a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fa2c 	bl	8007ad2 <USBH_CtlReq>
 800767a:	4603      	mov	r3, r0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	789b      	ldrb	r3, [r3, #2]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d10e      	bne.n	80076b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2209      	movs	r2, #9
 80076a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	887a      	ldrh	r2, [r7, #2]
 80076a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076b6:	2200      	movs	r2, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa09 	bl	8007ad2 <USBH_CtlReq>
 80076c0:	4603      	mov	r3, r0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	789b      	ldrb	r3, [r3, #2]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10f      	bne.n	80076fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2203      	movs	r2, #3
 80076e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076fe:	2200      	movs	r2, #0
 8007700:	2100      	movs	r1, #0
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9e5 	bl	8007ad2 <USBH_CtlReq>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	789b      	ldrb	r3, [r3, #2]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d10f      	bne.n	8007746 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007746:	2200      	movs	r2, #0
 8007748:	2100      	movs	r1, #0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9c1 	bl	8007ad2 <USBH_CtlReq>
 8007750:	4603      	mov	r3, r0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	4613      	mov	r3, r2
 8007766:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	785a      	ldrb	r2, [r3, #1]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3302      	adds	r3, #2
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b29a      	uxth	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3303      	adds	r3, #3
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	b29b      	uxth	r3, r3
 800778c:	4313      	orrs	r3, r2
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	791a      	ldrb	r2, [r3, #4]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	795a      	ldrb	r2, [r3, #5]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	799a      	ldrb	r2, [r3, #6]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	79da      	ldrb	r2, [r3, #7]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	d939      	bls.n	800782e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3308      	adds	r3, #8
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	3309      	adds	r3, #9
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	330a      	adds	r3, #10
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	330b      	adds	r3, #11
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	330c      	adds	r3, #12
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	330d      	adds	r3, #13
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	b29b      	uxth	r3, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	7b9a      	ldrb	r2, [r3, #14]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	7bda      	ldrb	r2, [r3, #15]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	7c1a      	ldrb	r2, [r3, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	7c5a      	ldrb	r2, [r3, #17]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	745a      	strb	r2, [r3, #17]
  }
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b08a      	sub	sp, #40	; 0x28
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	4613      	mov	r3, r2
 8007846:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	781a      	ldrb	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	785a      	ldrb	r2, [r3, #1]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3302      	adds	r3, #2
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	b29a      	uxth	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3303      	adds	r3, #3
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	b29b      	uxth	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	791a      	ldrb	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	795a      	ldrb	r2, [r3, #5]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	799a      	ldrb	r2, [r3, #6]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	79da      	ldrb	r2, [r3, #7]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	7a1a      	ldrb	r2, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d95f      	bls.n	8007976 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80078b6:	2309      	movs	r3, #9
 80078b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078be:	e051      	b.n	8007964 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078c0:	f107 0316 	add.w	r3, r7, #22
 80078c4:	4619      	mov	r1, r3
 80078c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078c8:	f000 f8e8 	bl	8007a9c <USBH_GetNextDesc>
 80078cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d146      	bne.n	8007964 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80078d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078da:	221a      	movs	r2, #26
 80078dc:	fb02 f303 	mul.w	r3, r2, r3
 80078e0:	3308      	adds	r3, #8
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	3302      	adds	r3, #2
 80078e8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ec:	69f8      	ldr	r0, [r7, #28]
 80078ee:	f000 f846 	bl	800797e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078fc:	e022      	b.n	8007944 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078fe:	f107 0316 	add.w	r3, r7, #22
 8007902:	4619      	mov	r1, r3
 8007904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007906:	f000 f8c9 	bl	8007a9c <USBH_GetNextDesc>
 800790a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	2b05      	cmp	r3, #5
 8007912:	d117      	bne.n	8007944 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007918:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800791c:	3201      	adds	r2, #1
 800791e:	00d2      	lsls	r2, r2, #3
 8007920:	211a      	movs	r1, #26
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	4413      	add	r3, r2
 8007928:	3308      	adds	r3, #8
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007934:	69b8      	ldr	r0, [r7, #24]
 8007936:	f000 f851 	bl	80079dc <USBH_ParseEPDesc>
            ep_ix++;
 800793a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800793e:	3301      	adds	r3, #1
 8007940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	791b      	ldrb	r3, [r3, #4]
 8007948:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800794c:	429a      	cmp	r2, r3
 800794e:	d204      	bcs.n	800795a <USBH_ParseCfgDesc+0x120>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	885a      	ldrh	r2, [r3, #2]
 8007954:	8afb      	ldrh	r3, [r7, #22]
 8007956:	429a      	cmp	r2, r3
 8007958:	d8d1      	bhi.n	80078fe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800795a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800795e:	3301      	adds	r3, #1
 8007960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007968:	2b01      	cmp	r3, #1
 800796a:	d804      	bhi.n	8007976 <USBH_ParseCfgDesc+0x13c>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	885a      	ldrh	r2, [r3, #2]
 8007970:	8afb      	ldrh	r3, [r7, #22]
 8007972:	429a      	cmp	r2, r3
 8007974:	d8a4      	bhi.n	80078c0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007976:	bf00      	nop
 8007978:	3728      	adds	r7, #40	; 0x28
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	785a      	ldrb	r2, [r3, #1]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	789a      	ldrb	r2, [r3, #2]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	78da      	ldrb	r2, [r3, #3]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	791a      	ldrb	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	795a      	ldrb	r2, [r3, #5]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	799a      	ldrb	r2, [r3, #6]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	79da      	ldrb	r2, [r3, #7]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	7a1a      	ldrb	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	721a      	strb	r2, [r3, #8]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	785a      	ldrb	r2, [r3, #1]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	789a      	ldrb	r2, [r3, #2]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	78da      	ldrb	r2, [r3, #3]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	3305      	adds	r3, #5
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	799a      	ldrb	r2, [r3, #6]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	719a      	strb	r2, [r3, #6]
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	4613      	mov	r3, r2
 8007a42:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d120      	bne.n	8007a90 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	1e9a      	subs	r2, r3, #2
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	4293      	cmp	r3, r2
 8007a58:	bf28      	it	cs
 8007a5a:	4613      	movcs	r3, r2
 8007a5c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3302      	adds	r3, #2
 8007a62:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a64:	2300      	movs	r3, #0
 8007a66:	82fb      	strh	r3, [r7, #22]
 8007a68:	e00b      	b.n	8007a82 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a6a:	8afb      	ldrh	r3, [r7, #22]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a7c:	8afb      	ldrh	r3, [r7, #22]
 8007a7e:	3302      	adds	r3, #2
 8007a80:	82fb      	strh	r3, [r7, #22]
 8007a82:	8afa      	ldrh	r2, [r7, #22]
 8007a84:	8abb      	ldrh	r3, [r7, #20]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d3ef      	bcc.n	8007a6a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
  }
}
 8007a90:	bf00      	nop
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	881a      	ldrh	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	4613      	mov	r3, r2
 8007ade:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	789b      	ldrb	r3, [r3, #2]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d002      	beq.n	8007af2 <USBH_CtlReq+0x20>
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d00f      	beq.n	8007b10 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007af0:	e027      	b.n	8007b42 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	88fa      	ldrh	r2, [r7, #6]
 8007afc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2202      	movs	r2, #2
 8007b08:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0e:	e018      	b.n	8007b42 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f81b 	bl	8007b4c <USBH_HandleControl>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <USBH_CtlReq+0x54>
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d106      	bne.n	8007b34 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	761a      	strb	r2, [r3, #24]
      break;
 8007b32:	e005      	b.n	8007b40 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d102      	bne.n	8007b40 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	709a      	strb	r2, [r3, #2]
      break;
 8007b40:	bf00      	nop
  }
  return status;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b54:	2301      	movs	r3, #1
 8007b56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7e1b      	ldrb	r3, [r3, #24]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	2b0a      	cmp	r3, #10
 8007b64:	f200 8161 	bhi.w	8007e2a <USBH_HandleControl+0x2de>
 8007b68:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <USBH_HandleControl+0x24>)
 8007b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6e:	bf00      	nop
 8007b70:	08007b9d 	.word	0x08007b9d
 8007b74:	08007bb7 	.word	0x08007bb7
 8007b78:	08007c21 	.word	0x08007c21
 8007b7c:	08007c47 	.word	0x08007c47
 8007b80:	08007c7f 	.word	0x08007c7f
 8007b84:	08007cab 	.word	0x08007cab
 8007b88:	08007cfd 	.word	0x08007cfd
 8007b8c:	08007d1f 	.word	0x08007d1f
 8007b90:	08007d5b 	.word	0x08007d5b
 8007b94:	08007d83 	.word	0x08007d83
 8007b98:	08007dc1 	.word	0x08007dc1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f103 0110 	add.w	r1, r3, #16
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	795b      	ldrb	r3, [r3, #5]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f953 	bl	8007e54 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	761a      	strb	r2, [r3, #24]
      break;
 8007bb4:	e144      	b.n	8007e40 <USBH_HandleControl+0x2f4>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	795b      	ldrb	r3, [r3, #5]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fcf3 	bl	80085a8 <USBH_LL_GetURBState>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d11e      	bne.n	8007c0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7c1b      	ldrb	r3, [r3, #16]
 8007bd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8adb      	ldrh	r3, [r3, #22]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007bde:	7b7b      	ldrb	r3, [r7, #13]
 8007be0:	2b80      	cmp	r3, #128	; 0x80
 8007be2:	d103      	bne.n	8007bec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2203      	movs	r2, #3
 8007be8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bea:	e120      	b.n	8007e2e <USBH_HandleControl+0x2e2>
            phost->Control.state = CTRL_DATA_OUT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2205      	movs	r2, #5
 8007bf0:	761a      	strb	r2, [r3, #24]
      break;
 8007bf2:	e11c      	b.n	8007e2e <USBH_HandleControl+0x2e2>
          if (direction == USB_D2H)
 8007bf4:	7b7b      	ldrb	r3, [r7, #13]
 8007bf6:	2b80      	cmp	r3, #128	; 0x80
 8007bf8:	d103      	bne.n	8007c02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2209      	movs	r2, #9
 8007bfe:	761a      	strb	r2, [r3, #24]
      break;
 8007c00:	e115      	b.n	8007e2e <USBH_HandleControl+0x2e2>
            phost->Control.state = CTRL_STATUS_IN;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2207      	movs	r2, #7
 8007c06:	761a      	strb	r2, [r3, #24]
      break;
 8007c08:	e111      	b.n	8007e2e <USBH_HandleControl+0x2e2>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d003      	beq.n	8007c18 <USBH_HandleControl+0xcc>
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	f040 810b 	bne.w	8007e2e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	220b      	movs	r2, #11
 8007c1c:	761a      	strb	r2, [r3, #24]
      break;
 8007c1e:	e106      	b.n	8007e2e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6899      	ldr	r1, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	899a      	ldrh	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	791b      	ldrb	r3, [r3, #4]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f94a 	bl	8007ed2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2204      	movs	r2, #4
 8007c42:	761a      	strb	r2, [r3, #24]
      break;
 8007c44:	e0fc      	b.n	8007e40 <USBH_HandleControl+0x2f4>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	791b      	ldrb	r3, [r3, #4]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fcab 	bl	80085a8 <USBH_LL_GetURBState>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d102      	bne.n	8007c62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2209      	movs	r2, #9
 8007c60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d102      	bne.n	8007c6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c6c:	e0e1      	b.n	8007e32 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	f040 80de 	bne.w	8007e32 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	220b      	movs	r2, #11
 8007c7a:	761a      	strb	r2, [r3, #24]
      break;
 8007c7c:	e0d9      	b.n	8007e32 <USBH_HandleControl+0x2e6>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6899      	ldr	r1, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	899a      	ldrh	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7958      	ldrb	r0, [r3, #5]
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f8f9 	bl	8007e88 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2206      	movs	r2, #6
 8007ca6:	761a      	strb	r2, [r3, #24]
      break;
 8007ca8:	e0ca      	b.n	8007e40 <USBH_HandleControl+0x2f4>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	795b      	ldrb	r3, [r3, #5]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fc79 	bl	80085a8 <USBH_LL_GetURBState>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d103      	bne.n	8007cc8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2207      	movs	r2, #7
 8007cc4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cc6:	e0b6      	b.n	8007e36 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_STALL)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d105      	bne.n	8007cda <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	220c      	movs	r2, #12
 8007cd2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd8:	e0ad      	b.n	8007e36 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d103      	bne.n	8007ce8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	761a      	strb	r2, [r3, #24]
      break;
 8007ce6:	e0a6      	b.n	8007e36 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_ERROR)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	f040 80a3 	bne.w	8007e36 <USBH_HandleControl+0x2ea>
          phost->Control.state = CTRL_ERROR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	220b      	movs	r2, #11
 8007cf4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfa:	e09c      	b.n	8007e36 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	791b      	ldrb	r3, [r3, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f8e4 	bl	8007ed2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	761a      	strb	r2, [r3, #24]

      break;
 8007d1c:	e090      	b.n	8007e40 <USBH_HandleControl+0x2f4>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	791b      	ldrb	r3, [r3, #4]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc3f 	bl	80085a8 <USBH_LL_GetURBState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	220d      	movs	r2, #13
 8007d38:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d3e:	e07c      	b.n	8007e3a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_ERROR)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d103      	bne.n	8007d4e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	220b      	movs	r2, #11
 8007d4a:	761a      	strb	r2, [r3, #24]
      break;
 8007d4c:	e075      	b.n	8007e3a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_STALL)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b05      	cmp	r3, #5
 8007d52:	d172      	bne.n	8007e3a <USBH_HandleControl+0x2ee>
          status = USBH_NOT_SUPPORTED;
 8007d54:	2303      	movs	r3, #3
 8007d56:	73fb      	strb	r3, [r7, #15]
      break;
 8007d58:	e06f      	b.n	8007e3a <USBH_HandleControl+0x2ee>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	795a      	ldrb	r2, [r3, #5]
 8007d5e:	2301      	movs	r3, #1
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	4613      	mov	r3, r2
 8007d64:	2200      	movs	r2, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f88d 	bl	8007e88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220a      	movs	r2, #10
 8007d7e:	761a      	strb	r2, [r3, #24]
      break;
 8007d80:	e05e      	b.n	8007e40 <USBH_HandleControl+0x2f4>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	795b      	ldrb	r3, [r3, #5]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc0d 	bl	80085a8 <USBH_LL_GetURBState>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d105      	bne.n	8007da4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	220d      	movs	r2, #13
 8007da0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007da2:	e04c      	b.n	8007e3e <USBH_HandleControl+0x2f2>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d103      	bne.n	8007db2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2209      	movs	r2, #9
 8007dae:	761a      	strb	r2, [r3, #24]
      break;
 8007db0:	e045      	b.n	8007e3e <USBH_HandleControl+0x2f2>
        if (URB_Status == USBH_URB_ERROR)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d142      	bne.n	8007e3e <USBH_HandleControl+0x2f2>
          phost->Control.state = CTRL_ERROR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	220b      	movs	r2, #11
 8007dbc:	761a      	strb	r2, [r3, #24]
      break;
 8007dbe:	e03e      	b.n	8007e3e <USBH_HandleControl+0x2f2>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7e5b      	ldrb	r3, [r3, #25]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	765a      	strb	r2, [r3, #25]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7e5b      	ldrb	r3, [r3, #25]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d806      	bhi.n	8007de2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007de0:	e02e      	b.n	8007e40 <USBH_HandleControl+0x2f4>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007de8:	2106      	movs	r1, #6
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8007df4:	4815      	ldr	r0, [pc, #84]	; (8007e4c <USBH_HandleControl+0x300>)
 8007df6:	f000 fd9d 	bl	8008934 <iprintf>
 8007dfa:	4815      	ldr	r0, [pc, #84]	; (8007e50 <USBH_HandleControl+0x304>)
 8007dfc:	f000 fd9a 	bl	8008934 <iprintf>
 8007e00:	200a      	movs	r0, #10
 8007e02:	f000 fdaf 	bl	8008964 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	795b      	ldrb	r3, [r3, #5]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f8ed 	bl	8007fec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	791b      	ldrb	r3, [r3, #4]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8e7 	bl	8007fec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e24:	2302      	movs	r3, #2
 8007e26:	73fb      	strb	r3, [r7, #15]
      break;
 8007e28:	e00a      	b.n	8007e40 <USBH_HandleControl+0x2f4>

    default:
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e008      	b.n	8007e40 <USBH_HandleControl+0x2f4>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e006      	b.n	8007e40 <USBH_HandleControl+0x2f4>
      break;
 8007e32:	bf00      	nop
 8007e34:	e004      	b.n	8007e40 <USBH_HandleControl+0x2f4>
      break;
 8007e36:	bf00      	nop
 8007e38:	e002      	b.n	8007e40 <USBH_HandleControl+0x2f4>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <USBH_HandleControl+0x2f4>
      break;
 8007e3e:	bf00      	nop
  }

  return status;
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	08009f94 	.word	0x08009f94
 8007e50:	08009f9c 	.word	0x08009f9c

08007e54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af04      	add	r7, sp, #16
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e62:	79f9      	ldrb	r1, [r7, #7]
 8007e64:	2300      	movs	r3, #0
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	2308      	movs	r3, #8
 8007e6a:	9302      	str	r3, [sp, #8]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fb64 	bl	8008546 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af04      	add	r7, sp, #16
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4611      	mov	r1, r2
 8007e94:	461a      	mov	r2, r3
 8007e96:	460b      	mov	r3, r1
 8007e98:	80fb      	strh	r3, [r7, #6]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eac:	7979      	ldrb	r1, [r7, #5]
 8007eae:	7e3b      	ldrb	r3, [r7, #24]
 8007eb0:	9303      	str	r3, [sp, #12]
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	2301      	movs	r3, #1
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fb3f 	bl	8008546 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b088      	sub	sp, #32
 8007ed6:	af04      	add	r7, sp, #16
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	4611      	mov	r1, r2
 8007ede:	461a      	mov	r2, r3
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	80fb      	strh	r3, [r7, #6]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ee8:	7979      	ldrb	r1, [r7, #5]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	9302      	str	r3, [sp, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	2300      	movs	r3, #0
 8007efc:	2201      	movs	r2, #1
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fb21 	bl	8008546 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f04:	2300      	movs	r3, #0

}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b088      	sub	sp, #32
 8007f12:	af04      	add	r7, sp, #16
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	71fb      	strb	r3, [r7, #7]
 8007f20:	4613      	mov	r3, r2
 8007f22:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	79b9      	ldrb	r1, [r7, #6]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	9203      	str	r2, [sp, #12]
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	2301      	movs	r3, #1
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2303      	movs	r3, #3
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 fb02 	bl	8008546 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af04      	add	r7, sp, #16
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	70fb      	strb	r3, [r7, #3]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70bb      	strb	r3, [r7, #2]
 8007f62:	4613      	mov	r3, r2
 8007f64:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f66:	7878      	ldrb	r0, [r7, #1]
 8007f68:	78ba      	ldrb	r2, [r7, #2]
 8007f6a:	78f9      	ldrb	r1, [r7, #3]
 8007f6c:	8b3b      	ldrh	r3, [r7, #24]
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	7d3b      	ldrb	r3, [r7, #20]
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	7c3b      	ldrb	r3, [r7, #16]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	4603      	mov	r3, r0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa95 	bl	80084aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fab4 	bl	8008508 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f837 	bl	800802a <USBH_GetFreePipe>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00a      	beq.n	8007fe0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007fca:	89fb      	ldrh	r3, [r7, #14]
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	78fa      	ldrb	r2, [r7, #3]
 8007fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	33e0      	adds	r3, #224	; 0xe0
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fe0:	89fb      	ldrh	r3, [r7, #14]
 8007fe2:	b2db      	uxtb	r3, r3
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	2b0a      	cmp	r3, #10
 8007ffc:	d80e      	bhi.n	800801c <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007ffe:	78f8      	ldrb	r0, [r7, #3]
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	33e0      	adds	r3, #224	; 0xe0
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
 800803a:	e00f      	b.n	800805c <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	33e0      	adds	r3, #224	; 0xe0
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	b29b      	uxth	r3, r3
 8008054:	e007      	b.n	8008066 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	3301      	adds	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	2b0a      	cmp	r3, #10
 8008060:	d9ec      	bls.n	800803c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008062:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
	...

08008074 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008078:	2201      	movs	r2, #1
 800807a:	490e      	ldr	r1, [pc, #56]	; (80080b4 <MX_USB_HOST_Init+0x40>)
 800807c:	480e      	ldr	r0, [pc, #56]	; (80080b8 <MX_USB_HOST_Init+0x44>)
 800807e:	f7fe faf7 	bl	8006670 <USBH_Init>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008088:	f7f8 fc48 	bl	800091c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800808c:	490b      	ldr	r1, [pc, #44]	; (80080bc <MX_USB_HOST_Init+0x48>)
 800808e:	480a      	ldr	r0, [pc, #40]	; (80080b8 <MX_USB_HOST_Init+0x44>)
 8008090:	f7fe fb8a 	bl	80067a8 <USBH_RegisterClass>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800809a:	f7f8 fc3f 	bl	800091c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800809e:	4806      	ldr	r0, [pc, #24]	; (80080b8 <MX_USB_HOST_Init+0x44>)
 80080a0:	f7fe fc70 	bl	8006984 <USBH_Start>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080aa:	f7f8 fc37 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80080ae:	bf00      	nop
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	080080d5 	.word	0x080080d5
 80080b8:	2000017c 	.word	0x2000017c
 80080bc:	2000000c 	.word	0x2000000c

080080c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80080c4:	4802      	ldr	r0, [pc, #8]	; (80080d0 <MX_USB_HOST_Process+0x10>)
 80080c6:	f7fe fc6d 	bl	80069a4 <USBH_Process>
}
 80080ca:	bf00      	nop
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	2000017c 	.word	0x2000017c

080080d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d819      	bhi.n	800811c <USBH_UserProcess+0x48>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <USBH_UserProcess+0x1c>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	0800810d 	.word	0x0800810d
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	08008115 	.word	0x08008115
 8008100:	08008105 	.word	0x08008105
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <USBH_UserProcess+0x58>)
 8008106:	2203      	movs	r2, #3
 8008108:	701a      	strb	r2, [r3, #0]
  break;
 800810a:	e008      	b.n	800811e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800810c:	4b07      	ldr	r3, [pc, #28]	; (800812c <USBH_UserProcess+0x58>)
 800810e:	2202      	movs	r2, #2
 8008110:	701a      	strb	r2, [r3, #0]
  break;
 8008112:	e004      	b.n	800811e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <USBH_UserProcess+0x58>)
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
  break;
 800811a:	e000      	b.n	800811e <USBH_UserProcess+0x4a>

  default:
  break;
 800811c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	200000b0 	.word	0x200000b0

08008130 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b0ae      	sub	sp, #184	; 0xb8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008138:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008148:	f107 0318 	add.w	r3, r7, #24
 800814c:	228c      	movs	r2, #140	; 0x8c
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fb3b 	bl	80087cc <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800815e:	f040 8085 	bne.w	800826c <HAL_HCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008166:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008168:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800816c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008170:	2301      	movs	r3, #1
 8008172:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8008174:	2305      	movs	r3, #5
 8008176:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8008178:	2314      	movs	r3, #20
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800817c:	2302      	movs	r3, #2
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008180:	2302      	movs	r3, #2
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008184:	2302      	movs	r3, #2
 8008186:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f7fb faac 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 800819e:	f7f8 fbbd 	bl	800091c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a2:	4a34      	ldr	r2, [pc, #208]	; (8008274 <HAL_HCD_MspInit+0x144>)
 80081a4:	4b33      	ldr	r3, [pc, #204]	; (8008274 <HAL_HCD_MspInit+0x144>)
 80081a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ae:	4b31      	ldr	r3, [pc, #196]	; (8008274 <HAL_HCD_MspInit+0x144>)
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80081ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80081be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c2:	2302      	movs	r3, #2
 80081c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ce:	2303      	movs	r3, #3
 80081d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081d4:	230a      	movs	r3, #10
 80081d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081de:	4619      	mov	r1, r3
 80081e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081e4:	f7f8 fe8c 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80081e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80081fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008200:	4619      	mov	r1, r3
 8008202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008206:	f7f8 fe7b 	bl	8000f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800820a:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <HAL_HCD_MspInit+0x144>)
 800820c:	4b19      	ldr	r3, [pc, #100]	; (8008274 <HAL_HCD_MspInit+0x144>)
 800820e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008216:	4b17      	ldr	r3, [pc, #92]	; (8008274 <HAL_HCD_MspInit+0x144>)
 8008218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008222:	4b14      	ldr	r3, [pc, #80]	; (8008274 <HAL_HCD_MspInit+0x144>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d114      	bne.n	8008258 <HAL_HCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800822e:	4a11      	ldr	r2, [pc, #68]	; (8008274 <HAL_HCD_MspInit+0x144>)
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <HAL_HCD_MspInit+0x144>)
 8008232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008238:	6593      	str	r3, [r2, #88]	; 0x58
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <HAL_HCD_MspInit+0x144>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008246:	f7fa fbf9 	bl	8002a3c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800824a:	4a0a      	ldr	r2, [pc, #40]	; (8008274 <HAL_HCD_MspInit+0x144>)
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <HAL_HCD_MspInit+0x144>)
 800824e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008254:	6593      	str	r3, [r2, #88]	; 0x58
 8008256:	e001      	b.n	800825c <HAL_HCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008258:	f7fa fbf0 	bl	8002a3c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	2043      	movs	r0, #67	; 0x43
 8008262:	f7f8 fe16 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008266:	2043      	movs	r0, #67	; 0x43
 8008268:	f7f8 fe2f 	bl	8000eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800826c:	bf00      	nop
 800826e:	37b8      	adds	r7, #184	; 0xb8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40021000 	.word	0x40021000

08008278 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff f8ab 	bl	80073e2 <USBH_LL_IncTimer>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff f8e3 	bl	800746e <USBH_LL_Connect>
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff f8ec 	bl	800749c <USBH_LL_Disconnect>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
 80082d8:	4613      	mov	r3, r2
 80082da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff f89d 	bl	8007436 <USBH_LL_PortEnabled>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff f89d 	bl	8007452 <USBH_LL_PortDisabled>
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800832e:	2b01      	cmp	r3, #1
 8008330:	d12a      	bne.n	8008388 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008332:	4a18      	ldr	r2, [pc, #96]	; (8008394 <USBH_LL_Init+0x74>)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a15      	ldr	r2, [pc, #84]	; (8008394 <USBH_LL_Init+0x74>)
 800833e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008342:	4b14      	ldr	r3, [pc, #80]	; (8008394 <USBH_LL_Init+0x74>)
 8008344:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008348:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <USBH_LL_Init+0x74>)
 800834c:	220c      	movs	r2, #12
 800834e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008350:	4b10      	ldr	r3, [pc, #64]	; (8008394 <USBH_LL_Init+0x74>)
 8008352:	2201      	movs	r2, #1
 8008354:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008356:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <USBH_LL_Init+0x74>)
 8008358:	2200      	movs	r2, #0
 800835a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800835c:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <USBH_LL_Init+0x74>)
 800835e:	2202      	movs	r2, #2
 8008360:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <USBH_LL_Init+0x74>)
 8008364:	2200      	movs	r2, #0
 8008366:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008368:	480a      	ldr	r0, [pc, #40]	; (8008394 <USBH_LL_Init+0x74>)
 800836a:	f7f8 ff73 	bl	8001254 <HAL_HCD_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008374:	f7f8 fad2 	bl	800091c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008378:	4806      	ldr	r0, [pc, #24]	; (8008394 <USBH_LL_Init+0x74>)
 800837a:	f7f9 fb52 	bl	8001a22 <HAL_HCD_GetCurrentFrame>
 800837e:	4603      	mov	r3, r0
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff f81e 	bl	80073c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000554 	.word	0x20000554

08008398 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7f9 fac1 	bl	8001936 <HAL_HCD_Start>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 f95a 	bl	8008674 <USBH_Get_USB_Status>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7f9 fac9 	bl	800197c <HAL_HCD_Stop>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 f93f 	bl	8008674 <USBH_Get_USB_Status>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008416:	4618      	mov	r0, r3
 8008418:	f7f9 fb11 	bl	8001a3e <HAL_HCD_GetCurrentSpeed>
 800841c:	4603      	mov	r3, r0
 800841e:	2b01      	cmp	r3, #1
 8008420:	d007      	beq.n	8008432 <USBH_LL_GetSpeed+0x2e>
 8008422:	2b01      	cmp	r3, #1
 8008424:	d302      	bcc.n	800842c <USBH_LL_GetSpeed+0x28>
 8008426:	2b02      	cmp	r3, #2
 8008428:	d006      	beq.n	8008438 <USBH_LL_GetSpeed+0x34>
 800842a:	e008      	b.n	800843e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
    break;
 8008430:	e008      	b.n	8008444 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008432:	2301      	movs	r3, #1
 8008434:	73fb      	strb	r3, [r7, #15]
    break;
 8008436:	e005      	b.n	8008444 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008438:	2302      	movs	r3, #2
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e002      	b.n	8008444 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800843e:	2301      	movs	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	bf00      	nop
  }
  return  speed;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008464:	4618      	mov	r0, r3
 8008466:	f7f9 faa6 	bl	80019b6 <HAL_HCD_ResetPort>
 800846a:	4603      	mov	r3, r0
 800846c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	4618      	mov	r0, r3
 8008472:	f000 f8ff 	bl	8008674 <USBH_Get_USB_Status>
 8008476:	4603      	mov	r3, r0
 8008478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800847a:	7bbb      	ldrb	r3, [r7, #14]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	4611      	mov	r1, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f7f9 faad 	bl	80019fa <HAL_HCD_HC_GetXferCount>
 80084a0:	4603      	mov	r3, r0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084aa:	b590      	push	{r4, r7, lr}
 80084ac:	b089      	sub	sp, #36	; 0x24
 80084ae:	af04      	add	r7, sp, #16
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	461a      	mov	r2, r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	70fb      	strb	r3, [r7, #3]
 80084bc:	460b      	mov	r3, r1
 80084be:	70bb      	strb	r3, [r7, #2]
 80084c0:	4613      	mov	r3, r2
 80084c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084d2:	787c      	ldrb	r4, [r7, #1]
 80084d4:	78ba      	ldrb	r2, [r7, #2]
 80084d6:	78f9      	ldrb	r1, [r7, #3]
 80084d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084da:	9302      	str	r3, [sp, #8]
 80084dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4623      	mov	r3, r4
 80084ea:	f7f8 ff15 	bl	8001318 <HAL_HCD_HC_Init>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 f8bd 	bl	8008674 <USBH_Get_USB_Status>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	bd90      	pop	{r4, r7, pc}

08008508 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 ff85 	bl	8001436 <HAL_HCD_HC_Halt>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f89e 	bl	8008674 <USBH_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008546:	b590      	push	{r4, r7, lr}
 8008548:	b089      	sub	sp, #36	; 0x24
 800854a:	af04      	add	r7, sp, #16
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	4608      	mov	r0, r1
 8008550:	4611      	mov	r1, r2
 8008552:	461a      	mov	r2, r3
 8008554:	4603      	mov	r3, r0
 8008556:	70fb      	strb	r3, [r7, #3]
 8008558:	460b      	mov	r3, r1
 800855a:	70bb      	strb	r3, [r7, #2]
 800855c:	4613      	mov	r3, r2
 800855e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800856e:	787c      	ldrb	r4, [r7, #1]
 8008570:	78ba      	ldrb	r2, [r7, #2]
 8008572:	78f9      	ldrb	r1, [r7, #3]
 8008574:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	4623      	mov	r3, r4
 800858a:	f7f8 ff77 	bl	800147c <HAL_HCD_HC_SubmitRequest>
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 f86d 	bl	8008674 <USBH_Get_USB_Status>
 800859a:	4603      	mov	r3, r0
 800859c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800859e:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd90      	pop	{r4, r7, pc}

080085a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f9 fa07 	bl	80019d2 <HAL_HCD_HC_GetURBState>
 80085c4:	4603      	mov	r3, r0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d103      	bne.n	80085ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f870 	bl	80086cc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80085ec:	20c8      	movs	r0, #200	; 0xc8
 80085ee:	f7f8 fb55 	bl	8000c9c <HAL_Delay>
  return USBH_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
 8008608:	4613      	mov	r3, r2
 800860a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008612:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	212c      	movs	r1, #44	; 0x2c
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	4413      	add	r3, r2
 8008620:	333b      	adds	r3, #59	; 0x3b
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	212c      	movs	r1, #44	; 0x2c
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	3354      	adds	r3, #84	; 0x54
 8008636:	78ba      	ldrb	r2, [r7, #2]
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e008      	b.n	800864e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	212c      	movs	r1, #44	; 0x2c
 8008642:	fb01 f303 	mul.w	r3, r1, r3
 8008646:	4413      	add	r3, r2
 8008648:	3355      	adds	r3, #85	; 0x55
 800864a:	78ba      	ldrb	r2, [r7, #2]
 800864c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7f8 fb19 	bl	8000c9c <HAL_Delay>
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d817      	bhi.n	80086b8 <USBH_Get_USB_Status+0x44>
 8008688:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <USBH_Get_USB_Status+0x1c>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086a1 	.word	0x080086a1
 8008694:	080086a7 	.word	0x080086a7
 8008698:	080086ad 	.word	0x080086ad
 800869c:	080086b3 	.word	0x080086b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
    break;
 80086a4:	e00b      	b.n	80086be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80086a6:	2302      	movs	r3, #2
 80086a8:	73fb      	strb	r3, [r7, #15]
    break;
 80086aa:	e008      	b.n	80086be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
    break;
 80086b0:	e005      	b.n	80086be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80086b2:	2302      	movs	r3, #2
 80086b4:	73fb      	strb	r3, [r7, #15]
    break;
 80086b6:	e002      	b.n	80086be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80086b8:	2302      	movs	r3, #2
 80086ba:	73fb      	strb	r3, [r7, #15]
    break;
 80086bc:	bf00      	nop
  }
  return usb_status;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	e001      	b.n	80086ea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	461a      	mov	r2, r3
 80086ee:	2140      	movs	r1, #64	; 0x40
 80086f0:	4803      	ldr	r0, [pc, #12]	; (8008700 <MX_DriverVbusFS+0x34>)
 80086f2:	f7f8 fd97 	bl	8001224 <HAL_GPIO_WritePin>
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	48001800 	.word	0x48001800

08008704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800873c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008708:	f7f8 fa42 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800870c:	480c      	ldr	r0, [pc, #48]	; (8008740 <LoopForever+0x6>)
  ldr r1, =_edata
 800870e:	490d      	ldr	r1, [pc, #52]	; (8008744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008710:	4a0d      	ldr	r2, [pc, #52]	; (8008748 <LoopForever+0xe>)
  movs r3, #0
 8008712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008714:	e002      	b.n	800871c <LoopCopyDataInit>

08008716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800871a:	3304      	adds	r3, #4

0800871c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800871c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800871e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008720:	d3f9      	bcc.n	8008716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008722:	4a0a      	ldr	r2, [pc, #40]	; (800874c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008724:	4c0a      	ldr	r4, [pc, #40]	; (8008750 <LoopForever+0x16>)
  movs r3, #0
 8008726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008728:	e001      	b.n	800872e <LoopFillZerobss>

0800872a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800872a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800872c:	3204      	adds	r2, #4

0800872e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800872e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008730:	d3fb      	bcc.n	800872a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008732:	f000 f817 	bl	8008764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008736:	f7f7 ff7b 	bl	8000630 <main>

0800873a <LoopForever>:

LoopForever:
    b LoopForever
 800873a:	e7fe      	b.n	800873a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800873c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8008740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008744:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8008748:	0800a1ec 	.word	0x0800a1ec
  ldr r2, =_sbss
 800874c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8008750:	2000085c 	.word	0x2000085c

08008754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008754:	e7fe      	b.n	8008754 <ADC1_2_IRQHandler>
	...

08008758 <__errno>:
 8008758:	4b01      	ldr	r3, [pc, #4]	; (8008760 <__errno+0x8>)
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	2000002c 	.word	0x2000002c

08008764 <__libc_init_array>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0d      	ldr	r6, [pc, #52]	; (800879c <__libc_init_array+0x38>)
 8008768:	4c0d      	ldr	r4, [pc, #52]	; (80087a0 <__libc_init_array+0x3c>)
 800876a:	1ba4      	subs	r4, r4, r6
 800876c:	10a4      	asrs	r4, r4, #2
 800876e:	2500      	movs	r5, #0
 8008770:	42a5      	cmp	r5, r4
 8008772:	d109      	bne.n	8008788 <__libc_init_array+0x24>
 8008774:	4e0b      	ldr	r6, [pc, #44]	; (80087a4 <__libc_init_array+0x40>)
 8008776:	4c0c      	ldr	r4, [pc, #48]	; (80087a8 <__libc_init_array+0x44>)
 8008778:	f001 f93c 	bl	80099f4 <_init>
 800877c:	1ba4      	subs	r4, r4, r6
 800877e:	10a4      	asrs	r4, r4, #2
 8008780:	2500      	movs	r5, #0
 8008782:	42a5      	cmp	r5, r4
 8008784:	d105      	bne.n	8008792 <__libc_init_array+0x2e>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800878c:	4798      	blx	r3
 800878e:	3501      	adds	r5, #1
 8008790:	e7ee      	b.n	8008770 <__libc_init_array+0xc>
 8008792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008796:	4798      	blx	r3
 8008798:	3501      	adds	r5, #1
 800879a:	e7f2      	b.n	8008782 <__libc_init_array+0x1e>
 800879c:	0800a1e4 	.word	0x0800a1e4
 80087a0:	0800a1e4 	.word	0x0800a1e4
 80087a4:	0800a1e4 	.word	0x0800a1e4
 80087a8:	0800a1e8 	.word	0x0800a1e8

080087ac <malloc>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <malloc+0xc>)
 80087ae:	4601      	mov	r1, r0
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f000 b861 	b.w	8008878 <_malloc_r>
 80087b6:	bf00      	nop
 80087b8:	2000002c 	.word	0x2000002c

080087bc <free>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <free+0xc>)
 80087be:	4601      	mov	r1, r0
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f000 b80b 	b.w	80087dc <_free_r>
 80087c6:	bf00      	nop
 80087c8:	2000002c 	.word	0x2000002c

080087cc <memset>:
 80087cc:	4402      	add	r2, r0
 80087ce:	4603      	mov	r3, r0
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d100      	bne.n	80087d6 <memset+0xa>
 80087d4:	4770      	bx	lr
 80087d6:	f803 1b01 	strb.w	r1, [r3], #1
 80087da:	e7f9      	b.n	80087d0 <memset+0x4>

080087dc <_free_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4605      	mov	r5, r0
 80087e0:	2900      	cmp	r1, #0
 80087e2:	d045      	beq.n	8008870 <_free_r+0x94>
 80087e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e8:	1f0c      	subs	r4, r1, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfb8      	it	lt
 80087ee:	18e4      	addlt	r4, r4, r3
 80087f0:	f000 f9ca 	bl	8008b88 <__malloc_lock>
 80087f4:	4a1f      	ldr	r2, [pc, #124]	; (8008874 <_free_r+0x98>)
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	4610      	mov	r0, r2
 80087fa:	b933      	cbnz	r3, 800880a <_free_r+0x2e>
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	6014      	str	r4, [r2, #0]
 8008800:	4628      	mov	r0, r5
 8008802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008806:	f000 b9c0 	b.w	8008b8a <__malloc_unlock>
 800880a:	42a3      	cmp	r3, r4
 800880c:	d90c      	bls.n	8008828 <_free_r+0x4c>
 800880e:	6821      	ldr	r1, [r4, #0]
 8008810:	1862      	adds	r2, r4, r1
 8008812:	4293      	cmp	r3, r2
 8008814:	bf04      	itt	eq
 8008816:	681a      	ldreq	r2, [r3, #0]
 8008818:	685b      	ldreq	r3, [r3, #4]
 800881a:	6063      	str	r3, [r4, #4]
 800881c:	bf04      	itt	eq
 800881e:	1852      	addeq	r2, r2, r1
 8008820:	6022      	streq	r2, [r4, #0]
 8008822:	6004      	str	r4, [r0, #0]
 8008824:	e7ec      	b.n	8008800 <_free_r+0x24>
 8008826:	4613      	mov	r3, r2
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	b10a      	cbz	r2, 8008830 <_free_r+0x54>
 800882c:	42a2      	cmp	r2, r4
 800882e:	d9fa      	bls.n	8008826 <_free_r+0x4a>
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	1858      	adds	r0, r3, r1
 8008834:	42a0      	cmp	r0, r4
 8008836:	d10b      	bne.n	8008850 <_free_r+0x74>
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	4401      	add	r1, r0
 800883c:	1858      	adds	r0, r3, r1
 800883e:	4282      	cmp	r2, r0
 8008840:	6019      	str	r1, [r3, #0]
 8008842:	d1dd      	bne.n	8008800 <_free_r+0x24>
 8008844:	6810      	ldr	r0, [r2, #0]
 8008846:	6852      	ldr	r2, [r2, #4]
 8008848:	605a      	str	r2, [r3, #4]
 800884a:	4401      	add	r1, r0
 800884c:	6019      	str	r1, [r3, #0]
 800884e:	e7d7      	b.n	8008800 <_free_r+0x24>
 8008850:	d902      	bls.n	8008858 <_free_r+0x7c>
 8008852:	230c      	movs	r3, #12
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	e7d3      	b.n	8008800 <_free_r+0x24>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	1821      	adds	r1, r4, r0
 800885c:	428a      	cmp	r2, r1
 800885e:	bf04      	itt	eq
 8008860:	6811      	ldreq	r1, [r2, #0]
 8008862:	6852      	ldreq	r2, [r2, #4]
 8008864:	6062      	str	r2, [r4, #4]
 8008866:	bf04      	itt	eq
 8008868:	1809      	addeq	r1, r1, r0
 800886a:	6021      	streq	r1, [r4, #0]
 800886c:	605c      	str	r4, [r3, #4]
 800886e:	e7c7      	b.n	8008800 <_free_r+0x24>
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	bf00      	nop
 8008874:	200000b4 	.word	0x200000b4

08008878 <_malloc_r>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	1ccd      	adds	r5, r1, #3
 800887c:	f025 0503 	bic.w	r5, r5, #3
 8008880:	3508      	adds	r5, #8
 8008882:	2d0c      	cmp	r5, #12
 8008884:	bf38      	it	cc
 8008886:	250c      	movcc	r5, #12
 8008888:	2d00      	cmp	r5, #0
 800888a:	4606      	mov	r6, r0
 800888c:	db01      	blt.n	8008892 <_malloc_r+0x1a>
 800888e:	42a9      	cmp	r1, r5
 8008890:	d903      	bls.n	800889a <_malloc_r+0x22>
 8008892:	230c      	movs	r3, #12
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	2000      	movs	r0, #0
 8008898:	bd70      	pop	{r4, r5, r6, pc}
 800889a:	f000 f975 	bl	8008b88 <__malloc_lock>
 800889e:	4a23      	ldr	r2, [pc, #140]	; (800892c <_malloc_r+0xb4>)
 80088a0:	6814      	ldr	r4, [r2, #0]
 80088a2:	4621      	mov	r1, r4
 80088a4:	b991      	cbnz	r1, 80088cc <_malloc_r+0x54>
 80088a6:	4c22      	ldr	r4, [pc, #136]	; (8008930 <_malloc_r+0xb8>)
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	b91b      	cbnz	r3, 80088b4 <_malloc_r+0x3c>
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 f86d 	bl	800898c <_sbrk_r>
 80088b2:	6020      	str	r0, [r4, #0]
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f868 	bl	800898c <_sbrk_r>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d126      	bne.n	800890e <_malloc_r+0x96>
 80088c0:	230c      	movs	r3, #12
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 f960 	bl	8008b8a <__malloc_unlock>
 80088ca:	e7e4      	b.n	8008896 <_malloc_r+0x1e>
 80088cc:	680b      	ldr	r3, [r1, #0]
 80088ce:	1b5b      	subs	r3, r3, r5
 80088d0:	d41a      	bmi.n	8008908 <_malloc_r+0x90>
 80088d2:	2b0b      	cmp	r3, #11
 80088d4:	d90f      	bls.n	80088f6 <_malloc_r+0x7e>
 80088d6:	600b      	str	r3, [r1, #0]
 80088d8:	50cd      	str	r5, [r1, r3]
 80088da:	18cc      	adds	r4, r1, r3
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 f954 	bl	8008b8a <__malloc_unlock>
 80088e2:	f104 000b 	add.w	r0, r4, #11
 80088e6:	1d23      	adds	r3, r4, #4
 80088e8:	f020 0007 	bic.w	r0, r0, #7
 80088ec:	1ac3      	subs	r3, r0, r3
 80088ee:	d01b      	beq.n	8008928 <_malloc_r+0xb0>
 80088f0:	425a      	negs	r2, r3
 80088f2:	50e2      	str	r2, [r4, r3]
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	428c      	cmp	r4, r1
 80088f8:	bf0d      	iteet	eq
 80088fa:	6863      	ldreq	r3, [r4, #4]
 80088fc:	684b      	ldrne	r3, [r1, #4]
 80088fe:	6063      	strne	r3, [r4, #4]
 8008900:	6013      	streq	r3, [r2, #0]
 8008902:	bf18      	it	ne
 8008904:	460c      	movne	r4, r1
 8008906:	e7e9      	b.n	80088dc <_malloc_r+0x64>
 8008908:	460c      	mov	r4, r1
 800890a:	6849      	ldr	r1, [r1, #4]
 800890c:	e7ca      	b.n	80088a4 <_malloc_r+0x2c>
 800890e:	1cc4      	adds	r4, r0, #3
 8008910:	f024 0403 	bic.w	r4, r4, #3
 8008914:	42a0      	cmp	r0, r4
 8008916:	d005      	beq.n	8008924 <_malloc_r+0xac>
 8008918:	1a21      	subs	r1, r4, r0
 800891a:	4630      	mov	r0, r6
 800891c:	f000 f836 	bl	800898c <_sbrk_r>
 8008920:	3001      	adds	r0, #1
 8008922:	d0cd      	beq.n	80088c0 <_malloc_r+0x48>
 8008924:	6025      	str	r5, [r4, #0]
 8008926:	e7d9      	b.n	80088dc <_malloc_r+0x64>
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	bf00      	nop
 800892c:	200000b4 	.word	0x200000b4
 8008930:	200000b8 	.word	0x200000b8

08008934 <iprintf>:
 8008934:	b40f      	push	{r0, r1, r2, r3}
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <iprintf+0x2c>)
 8008938:	b513      	push	{r0, r1, r4, lr}
 800893a:	681c      	ldr	r4, [r3, #0]
 800893c:	b124      	cbz	r4, 8008948 <iprintf+0x14>
 800893e:	69a3      	ldr	r3, [r4, #24]
 8008940:	b913      	cbnz	r3, 8008948 <iprintf+0x14>
 8008942:	4620      	mov	r0, r4
 8008944:	f000 f896 	bl	8008a74 <__sinit>
 8008948:	ab05      	add	r3, sp, #20
 800894a:	9a04      	ldr	r2, [sp, #16]
 800894c:	68a1      	ldr	r1, [r4, #8]
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fa95 	bl	8008e80 <_vfiprintf_r>
 8008956:	b002      	add	sp, #8
 8008958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800895c:	b004      	add	sp, #16
 800895e:	4770      	bx	lr
 8008960:	2000002c 	.word	0x2000002c

08008964 <putchar>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <putchar+0x24>)
 8008968:	681c      	ldr	r4, [r3, #0]
 800896a:	4605      	mov	r5, r0
 800896c:	b124      	cbz	r4, 8008978 <putchar+0x14>
 800896e:	69a3      	ldr	r3, [r4, #24]
 8008970:	b913      	cbnz	r3, 8008978 <putchar+0x14>
 8008972:	4620      	mov	r0, r4
 8008974:	f000 f87e 	bl	8008a74 <__sinit>
 8008978:	68a2      	ldr	r2, [r4, #8]
 800897a:	4629      	mov	r1, r5
 800897c:	4620      	mov	r0, r4
 800897e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008982:	f000 bd29 	b.w	80093d8 <_putc_r>
 8008986:	bf00      	nop
 8008988:	2000002c 	.word	0x2000002c

0800898c <_sbrk_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4c06      	ldr	r4, [pc, #24]	; (80089a8 <_sbrk_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4605      	mov	r5, r0
 8008994:	4608      	mov	r0, r1
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	f7f8 f89a 	bl	8000ad0 <_sbrk>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_sbrk_r+0x1a>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_sbrk_r+0x1a>
 80089a4:	602b      	str	r3, [r5, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000858 	.word	0x20000858

080089ac <siprintf>:
 80089ac:	b40e      	push	{r1, r2, r3}
 80089ae:	b500      	push	{lr}
 80089b0:	b09c      	sub	sp, #112	; 0x70
 80089b2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80089b6:	ab1d      	add	r3, sp, #116	; 0x74
 80089b8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80089bc:	9002      	str	r0, [sp, #8]
 80089be:	9006      	str	r0, [sp, #24]
 80089c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c4:	480a      	ldr	r0, [pc, #40]	; (80089f0 <siprintf+0x44>)
 80089c6:	9104      	str	r1, [sp, #16]
 80089c8:	9107      	str	r1, [sp, #28]
 80089ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80089d6:	6800      	ldr	r0, [r0, #0]
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	a902      	add	r1, sp, #8
 80089dc:	f000 f932 	bl	8008c44 <_svfiprintf_r>
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	b01c      	add	sp, #112	; 0x70
 80089e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ec:	b003      	add	sp, #12
 80089ee:	4770      	bx	lr
 80089f0:	2000002c 	.word	0x2000002c

080089f4 <_cleanup_r>:
 80089f4:	4901      	ldr	r1, [pc, #4]	; (80089fc <_cleanup_r+0x8>)
 80089f6:	f000 b8a9 	b.w	8008b4c <_fwalk_reent>
 80089fa:	bf00      	nop
 80089fc:	080097a1 	.word	0x080097a1

08008a00 <std.isra.0>:
 8008a00:	2300      	movs	r3, #0
 8008a02:	b510      	push	{r4, lr}
 8008a04:	4604      	mov	r4, r0
 8008a06:	6003      	str	r3, [r0, #0]
 8008a08:	6043      	str	r3, [r0, #4]
 8008a0a:	6083      	str	r3, [r0, #8]
 8008a0c:	8181      	strh	r1, [r0, #12]
 8008a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a10:	81c2      	strh	r2, [r0, #14]
 8008a12:	6103      	str	r3, [r0, #16]
 8008a14:	6143      	str	r3, [r0, #20]
 8008a16:	6183      	str	r3, [r0, #24]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	2208      	movs	r2, #8
 8008a1c:	305c      	adds	r0, #92	; 0x5c
 8008a1e:	f7ff fed5 	bl	80087cc <memset>
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <std.isra.0+0x38>)
 8008a24:	6263      	str	r3, [r4, #36]	; 0x24
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <std.isra.0+0x3c>)
 8008a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <std.isra.0+0x40>)
 8008a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <std.isra.0+0x44>)
 8008a30:	6224      	str	r4, [r4, #32]
 8008a32:	6323      	str	r3, [r4, #48]	; 0x30
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	bf00      	nop
 8008a38:	08009445 	.word	0x08009445
 8008a3c:	08009467 	.word	0x08009467
 8008a40:	0800949f 	.word	0x0800949f
 8008a44:	080094c3 	.word	0x080094c3

08008a48 <__sfmoreglue>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	1e4a      	subs	r2, r1, #1
 8008a4c:	2568      	movs	r5, #104	; 0x68
 8008a4e:	4355      	muls	r5, r2
 8008a50:	460e      	mov	r6, r1
 8008a52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a56:	f7ff ff0f 	bl	8008878 <_malloc_r>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	b140      	cbz	r0, 8008a70 <__sfmoreglue+0x28>
 8008a5e:	2100      	movs	r1, #0
 8008a60:	e880 0042 	stmia.w	r0, {r1, r6}
 8008a64:	300c      	adds	r0, #12
 8008a66:	60a0      	str	r0, [r4, #8]
 8008a68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a6c:	f7ff feae 	bl	80087cc <memset>
 8008a70:	4620      	mov	r0, r4
 8008a72:	bd70      	pop	{r4, r5, r6, pc}

08008a74 <__sinit>:
 8008a74:	6983      	ldr	r3, [r0, #24]
 8008a76:	b510      	push	{r4, lr}
 8008a78:	4604      	mov	r4, r0
 8008a7a:	bb33      	cbnz	r3, 8008aca <__sinit+0x56>
 8008a7c:	6483      	str	r3, [r0, #72]	; 0x48
 8008a7e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008a80:	6503      	str	r3, [r0, #80]	; 0x50
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <__sinit+0x58>)
 8008a84:	4a12      	ldr	r2, [pc, #72]	; (8008ad0 <__sinit+0x5c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6282      	str	r2, [r0, #40]	; 0x28
 8008a8a:	4298      	cmp	r0, r3
 8008a8c:	bf04      	itt	eq
 8008a8e:	2301      	moveq	r3, #1
 8008a90:	6183      	streq	r3, [r0, #24]
 8008a92:	f000 f81f 	bl	8008ad4 <__sfp>
 8008a96:	6060      	str	r0, [r4, #4]
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 f81b 	bl	8008ad4 <__sfp>
 8008a9e:	60a0      	str	r0, [r4, #8]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f817 	bl	8008ad4 <__sfp>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	60e0      	str	r0, [r4, #12]
 8008aaa:	2104      	movs	r1, #4
 8008aac:	6860      	ldr	r0, [r4, #4]
 8008aae:	f7ff ffa7 	bl	8008a00 <std.isra.0>
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	2109      	movs	r1, #9
 8008ab6:	68a0      	ldr	r0, [r4, #8]
 8008ab8:	f7ff ffa2 	bl	8008a00 <std.isra.0>
 8008abc:	2202      	movs	r2, #2
 8008abe:	2112      	movs	r1, #18
 8008ac0:	68e0      	ldr	r0, [r4, #12]
 8008ac2:	f7ff ff9d 	bl	8008a00 <std.isra.0>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	61a3      	str	r3, [r4, #24]
 8008aca:	bd10      	pop	{r4, pc}
 8008acc:	0800a144 	.word	0x0800a144
 8008ad0:	080089f5 	.word	0x080089f5

08008ad4 <__sfp>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	4b1c      	ldr	r3, [pc, #112]	; (8008b48 <__sfp+0x74>)
 8008ad8:	681e      	ldr	r6, [r3, #0]
 8008ada:	69b3      	ldr	r3, [r6, #24]
 8008adc:	4607      	mov	r7, r0
 8008ade:	b913      	cbnz	r3, 8008ae6 <__sfp+0x12>
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff ffc7 	bl	8008a74 <__sinit>
 8008ae6:	3648      	adds	r6, #72	; 0x48
 8008ae8:	68b4      	ldr	r4, [r6, #8]
 8008aea:	6873      	ldr	r3, [r6, #4]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	d503      	bpl.n	8008af8 <__sfp+0x24>
 8008af0:	6833      	ldr	r3, [r6, #0]
 8008af2:	b133      	cbz	r3, 8008b02 <__sfp+0x2e>
 8008af4:	6836      	ldr	r6, [r6, #0]
 8008af6:	e7f7      	b.n	8008ae8 <__sfp+0x14>
 8008af8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008afc:	b16d      	cbz	r5, 8008b1a <__sfp+0x46>
 8008afe:	3468      	adds	r4, #104	; 0x68
 8008b00:	e7f4      	b.n	8008aec <__sfp+0x18>
 8008b02:	2104      	movs	r1, #4
 8008b04:	4638      	mov	r0, r7
 8008b06:	f7ff ff9f 	bl	8008a48 <__sfmoreglue>
 8008b0a:	6030      	str	r0, [r6, #0]
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d1f1      	bne.n	8008af4 <__sfp+0x20>
 8008b10:	230c      	movs	r3, #12
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	4604      	mov	r4, r0
 8008b16:	4620      	mov	r0, r4
 8008b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b1e:	81e3      	strh	r3, [r4, #14]
 8008b20:	2301      	movs	r3, #1
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	6665      	str	r5, [r4, #100]	; 0x64
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	60a5      	str	r5, [r4, #8]
 8008b2a:	6065      	str	r5, [r4, #4]
 8008b2c:	6125      	str	r5, [r4, #16]
 8008b2e:	6165      	str	r5, [r4, #20]
 8008b30:	61a5      	str	r5, [r4, #24]
 8008b32:	2208      	movs	r2, #8
 8008b34:	4629      	mov	r1, r5
 8008b36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b3a:	f7ff fe47 	bl	80087cc <memset>
 8008b3e:	6365      	str	r5, [r4, #52]	; 0x34
 8008b40:	63a5      	str	r5, [r4, #56]	; 0x38
 8008b42:	64a5      	str	r5, [r4, #72]	; 0x48
 8008b44:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008b46:	e7e6      	b.n	8008b16 <__sfp+0x42>
 8008b48:	0800a144 	.word	0x0800a144

08008b4c <_fwalk_reent>:
 8008b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b50:	4680      	mov	r8, r0
 8008b52:	4689      	mov	r9, r1
 8008b54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b58:	2600      	movs	r6, #0
 8008b5a:	b914      	cbnz	r4, 8008b62 <_fwalk_reent+0x16>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b62:	68a5      	ldr	r5, [r4, #8]
 8008b64:	6867      	ldr	r7, [r4, #4]
 8008b66:	3f01      	subs	r7, #1
 8008b68:	d501      	bpl.n	8008b6e <_fwalk_reent+0x22>
 8008b6a:	6824      	ldr	r4, [r4, #0]
 8008b6c:	e7f5      	b.n	8008b5a <_fwalk_reent+0xe>
 8008b6e:	89ab      	ldrh	r3, [r5, #12]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d907      	bls.n	8008b84 <_fwalk_reent+0x38>
 8008b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	d003      	beq.n	8008b84 <_fwalk_reent+0x38>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4640      	mov	r0, r8
 8008b80:	47c8      	blx	r9
 8008b82:	4306      	orrs	r6, r0
 8008b84:	3568      	adds	r5, #104	; 0x68
 8008b86:	e7ee      	b.n	8008b66 <_fwalk_reent+0x1a>

08008b88 <__malloc_lock>:
 8008b88:	4770      	bx	lr

08008b8a <__malloc_unlock>:
 8008b8a:	4770      	bx	lr

08008b8c <__ssputs_r>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	688e      	ldr	r6, [r1, #8]
 8008b92:	429e      	cmp	r6, r3
 8008b94:	4682      	mov	sl, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4691      	mov	r9, r2
 8008b9a:	4698      	mov	r8, r3
 8008b9c:	d835      	bhi.n	8008c0a <__ssputs_r+0x7e>
 8008b9e:	898a      	ldrh	r2, [r1, #12]
 8008ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ba4:	d031      	beq.n	8008c0a <__ssputs_r+0x7e>
 8008ba6:	6825      	ldr	r5, [r4, #0]
 8008ba8:	6909      	ldr	r1, [r1, #16]
 8008baa:	1a6f      	subs	r7, r5, r1
 8008bac:	6965      	ldr	r5, [r4, #20]
 8008bae:	2302      	movs	r3, #2
 8008bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8008bb8:	f108 0301 	add.w	r3, r8, #1
 8008bbc:	443b      	add	r3, r7
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	bf38      	it	cc
 8008bc2:	461d      	movcc	r5, r3
 8008bc4:	0553      	lsls	r3, r2, #21
 8008bc6:	d531      	bpl.n	8008c2c <__ssputs_r+0xa0>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7ff fe55 	bl	8008878 <_malloc_r>
 8008bce:	4606      	mov	r6, r0
 8008bd0:	b950      	cbnz	r0, 8008be8 <__ssputs_r+0x5c>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	f8ca 3000 	str.w	r3, [sl]
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be8:	463a      	mov	r2, r7
 8008bea:	6921      	ldr	r1, [r4, #16]
 8008bec:	f000 fe78 	bl	80098e0 <memcpy>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	6126      	str	r6, [r4, #16]
 8008bfe:	6165      	str	r5, [r4, #20]
 8008c00:	443e      	add	r6, r7
 8008c02:	1bed      	subs	r5, r5, r7
 8008c04:	6026      	str	r6, [r4, #0]
 8008c06:	60a5      	str	r5, [r4, #8]
 8008c08:	4646      	mov	r6, r8
 8008c0a:	4546      	cmp	r6, r8
 8008c0c:	bf28      	it	cs
 8008c0e:	4646      	movcs	r6, r8
 8008c10:	4632      	mov	r2, r6
 8008c12:	4649      	mov	r1, r9
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	f000 fe6e 	bl	80098f6 <memmove>
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	1b9b      	subs	r3, r3, r6
 8008c1e:	60a3      	str	r3, [r4, #8]
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	441e      	add	r6, r3
 8008c24:	6026      	str	r6, [r4, #0]
 8008c26:	2000      	movs	r0, #0
 8008c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	f000 fe7c 	bl	800992a <_realloc_r>
 8008c32:	4606      	mov	r6, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d1e1      	bne.n	8008bfc <__ssputs_r+0x70>
 8008c38:	6921      	ldr	r1, [r4, #16]
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	f7ff fdce 	bl	80087dc <_free_r>
 8008c40:	e7c7      	b.n	8008bd2 <__ssputs_r+0x46>
	...

08008c44 <_svfiprintf_r>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	b09d      	sub	sp, #116	; 0x74
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	898b      	ldrh	r3, [r1, #12]
 8008c50:	061c      	lsls	r4, r3, #24
 8008c52:	460d      	mov	r5, r1
 8008c54:	4616      	mov	r6, r2
 8008c56:	d50f      	bpl.n	8008c78 <_svfiprintf_r+0x34>
 8008c58:	690b      	ldr	r3, [r1, #16]
 8008c5a:	b96b      	cbnz	r3, 8008c78 <_svfiprintf_r+0x34>
 8008c5c:	2140      	movs	r1, #64	; 0x40
 8008c5e:	f7ff fe0b 	bl	8008878 <_malloc_r>
 8008c62:	6028      	str	r0, [r5, #0]
 8008c64:	6128      	str	r0, [r5, #16]
 8008c66:	b928      	cbnz	r0, 8008c74 <_svfiprintf_r+0x30>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	f8c8 3000 	str.w	r3, [r8]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	e0c5      	b.n	8008e00 <_svfiprintf_r+0x1bc>
 8008c74:	2340      	movs	r3, #64	; 0x40
 8008c76:	616b      	str	r3, [r5, #20]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c82:	2330      	movs	r3, #48	; 0x30
 8008c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c88:	f04f 0b01 	mov.w	fp, #1
 8008c8c:	4637      	mov	r7, r6
 8008c8e:	463c      	mov	r4, r7
 8008c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d13c      	bne.n	8008d12 <_svfiprintf_r+0xce>
 8008c98:	ebb7 0a06 	subs.w	sl, r7, r6
 8008c9c:	d00b      	beq.n	8008cb6 <_svfiprintf_r+0x72>
 8008c9e:	4653      	mov	r3, sl
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	f7ff ff71 	bl	8008b8c <__ssputs_r>
 8008caa:	3001      	adds	r0, #1
 8008cac:	f000 80a3 	beq.w	8008df6 <_svfiprintf_r+0x1b2>
 8008cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb2:	4453      	add	r3, sl
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	783b      	ldrb	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 809c 	beq.w	8008df6 <_svfiprintf_r+0x1b2>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	9307      	str	r3, [sp, #28]
 8008cc8:	9205      	str	r2, [sp, #20]
 8008cca:	9306      	str	r3, [sp, #24]
 8008ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd2:	2205      	movs	r2, #5
 8008cd4:	7821      	ldrb	r1, [r4, #0]
 8008cd6:	4850      	ldr	r0, [pc, #320]	; (8008e18 <_svfiprintf_r+0x1d4>)
 8008cd8:	f7f7 fa92 	bl	8000200 <memchr>
 8008cdc:	1c67      	adds	r7, r4, #1
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	b9d8      	cbnz	r0, 8008d1a <_svfiprintf_r+0xd6>
 8008ce2:	06d9      	lsls	r1, r3, #27
 8008ce4:	bf44      	itt	mi
 8008ce6:	2220      	movmi	r2, #32
 8008ce8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cec:	071a      	lsls	r2, r3, #28
 8008cee:	bf44      	itt	mi
 8008cf0:	222b      	movmi	r2, #43	; 0x2b
 8008cf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008cf6:	7822      	ldrb	r2, [r4, #0]
 8008cf8:	2a2a      	cmp	r2, #42	; 0x2a
 8008cfa:	d016      	beq.n	8008d2a <_svfiprintf_r+0xe6>
 8008cfc:	9a07      	ldr	r2, [sp, #28]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	200a      	movs	r0, #10
 8008d02:	4627      	mov	r7, r4
 8008d04:	3401      	adds	r4, #1
 8008d06:	783b      	ldrb	r3, [r7, #0]
 8008d08:	3b30      	subs	r3, #48	; 0x30
 8008d0a:	2b09      	cmp	r3, #9
 8008d0c:	d951      	bls.n	8008db2 <_svfiprintf_r+0x16e>
 8008d0e:	b1c9      	cbz	r1, 8008d44 <_svfiprintf_r+0x100>
 8008d10:	e011      	b.n	8008d36 <_svfiprintf_r+0xf2>
 8008d12:	2b25      	cmp	r3, #37	; 0x25
 8008d14:	d0c0      	beq.n	8008c98 <_svfiprintf_r+0x54>
 8008d16:	4627      	mov	r7, r4
 8008d18:	e7b9      	b.n	8008c8e <_svfiprintf_r+0x4a>
 8008d1a:	4a3f      	ldr	r2, [pc, #252]	; (8008e18 <_svfiprintf_r+0x1d4>)
 8008d1c:	1a80      	subs	r0, r0, r2
 8008d1e:	fa0b f000 	lsl.w	r0, fp, r0
 8008d22:	4318      	orrs	r0, r3
 8008d24:	9004      	str	r0, [sp, #16]
 8008d26:	463c      	mov	r4, r7
 8008d28:	e7d3      	b.n	8008cd2 <_svfiprintf_r+0x8e>
 8008d2a:	9a03      	ldr	r2, [sp, #12]
 8008d2c:	1d11      	adds	r1, r2, #4
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	9103      	str	r1, [sp, #12]
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	db01      	blt.n	8008d3a <_svfiprintf_r+0xf6>
 8008d36:	9207      	str	r2, [sp, #28]
 8008d38:	e004      	b.n	8008d44 <_svfiprintf_r+0x100>
 8008d3a:	4252      	negs	r2, r2
 8008d3c:	f043 0302 	orr.w	r3, r3, #2
 8008d40:	9207      	str	r2, [sp, #28]
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	783b      	ldrb	r3, [r7, #0]
 8008d46:	2b2e      	cmp	r3, #46	; 0x2e
 8008d48:	d10e      	bne.n	8008d68 <_svfiprintf_r+0x124>
 8008d4a:	787b      	ldrb	r3, [r7, #1]
 8008d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d4e:	f107 0101 	add.w	r1, r7, #1
 8008d52:	d132      	bne.n	8008dba <_svfiprintf_r+0x176>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	9203      	str	r2, [sp, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfb8      	it	lt
 8008d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d64:	3702      	adds	r7, #2
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	4c2c      	ldr	r4, [pc, #176]	; (8008e1c <_svfiprintf_r+0x1d8>)
 8008d6a:	7839      	ldrb	r1, [r7, #0]
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7f7 fa46 	bl	8000200 <memchr>
 8008d74:	b138      	cbz	r0, 8008d86 <_svfiprintf_r+0x142>
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	1b00      	subs	r0, r0, r4
 8008d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	4303      	orrs	r3, r0
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	3701      	adds	r7, #1
 8008d86:	7839      	ldrb	r1, [r7, #0]
 8008d88:	4825      	ldr	r0, [pc, #148]	; (8008e20 <_svfiprintf_r+0x1dc>)
 8008d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d8e:	2206      	movs	r2, #6
 8008d90:	1c7e      	adds	r6, r7, #1
 8008d92:	f7f7 fa35 	bl	8000200 <memchr>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d035      	beq.n	8008e06 <_svfiprintf_r+0x1c2>
 8008d9a:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <_svfiprintf_r+0x1e0>)
 8008d9c:	b9fb      	cbnz	r3, 8008dde <_svfiprintf_r+0x19a>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	3307      	adds	r3, #7
 8008da2:	f023 0307 	bic.w	r3, r3, #7
 8008da6:	3308      	adds	r3, #8
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	444b      	add	r3, r9
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	e76c      	b.n	8008c8c <_svfiprintf_r+0x48>
 8008db2:	fb00 3202 	mla	r2, r0, r2, r3
 8008db6:	2101      	movs	r1, #1
 8008db8:	e7a3      	b.n	8008d02 <_svfiprintf_r+0xbe>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	240a      	movs	r4, #10
 8008dc2:	460f      	mov	r7, r1
 8008dc4:	3101      	adds	r1, #1
 8008dc6:	783a      	ldrb	r2, [r7, #0]
 8008dc8:	3a30      	subs	r2, #48	; 0x30
 8008dca:	2a09      	cmp	r2, #9
 8008dcc:	d903      	bls.n	8008dd6 <_svfiprintf_r+0x192>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0ca      	beq.n	8008d68 <_svfiprintf_r+0x124>
 8008dd2:	9005      	str	r0, [sp, #20]
 8008dd4:	e7c8      	b.n	8008d68 <_svfiprintf_r+0x124>
 8008dd6:	fb04 2000 	mla	r0, r4, r0, r2
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e7f1      	b.n	8008dc2 <_svfiprintf_r+0x17e>
 8008dde:	ab03      	add	r3, sp, #12
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	462a      	mov	r2, r5
 8008de4:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <_svfiprintf_r+0x1e4>)
 8008de6:	a904      	add	r1, sp, #16
 8008de8:	4640      	mov	r0, r8
 8008dea:	f3af 8000 	nop.w
 8008dee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008df2:	4681      	mov	r9, r0
 8008df4:	d1d9      	bne.n	8008daa <_svfiprintf_r+0x166>
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	065b      	lsls	r3, r3, #25
 8008dfa:	f53f af38 	bmi.w	8008c6e <_svfiprintf_r+0x2a>
 8008dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e00:	b01d      	add	sp, #116	; 0x74
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	ab03      	add	r3, sp, #12
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <_svfiprintf_r+0x1e4>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	4640      	mov	r0, r8
 8008e12:	f000 f9c1 	bl	8009198 <_printf_i>
 8008e16:	e7ea      	b.n	8008dee <_svfiprintf_r+0x1aa>
 8008e18:	0800a1a8 	.word	0x0800a1a8
 8008e1c:	0800a1ae 	.word	0x0800a1ae
 8008e20:	0800a1b2 	.word	0x0800a1b2
 8008e24:	00000000 	.word	0x00000000
 8008e28:	08008b8d 	.word	0x08008b8d

08008e2c <__sfputc_r>:
 8008e2c:	6893      	ldr	r3, [r2, #8]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	b410      	push	{r4}
 8008e34:	6093      	str	r3, [r2, #8]
 8008e36:	da09      	bge.n	8008e4c <__sfputc_r+0x20>
 8008e38:	6994      	ldr	r4, [r2, #24]
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	db02      	blt.n	8008e44 <__sfputc_r+0x18>
 8008e3e:	b2cb      	uxtb	r3, r1
 8008e40:	2b0a      	cmp	r3, #10
 8008e42:	d103      	bne.n	8008e4c <__sfputc_r+0x20>
 8008e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e48:	f000 bb40 	b.w	80094cc <__swbuf_r>
 8008e4c:	6813      	ldr	r3, [r2, #0]
 8008e4e:	1c58      	adds	r0, r3, #1
 8008e50:	6010      	str	r0, [r2, #0]
 8008e52:	7019      	strb	r1, [r3, #0]
 8008e54:	b2c8      	uxtb	r0, r1
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <__sfputs_r>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	4614      	mov	r4, r2
 8008e64:	18d5      	adds	r5, r2, r3
 8008e66:	42ac      	cmp	r4, r5
 8008e68:	d101      	bne.n	8008e6e <__sfputs_r+0x12>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e007      	b.n	8008e7e <__sfputs_r+0x22>
 8008e6e:	463a      	mov	r2, r7
 8008e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffd9 	bl	8008e2c <__sfputc_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d1f3      	bne.n	8008e66 <__sfputs_r+0xa>
 8008e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e80 <_vfiprintf_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	b09d      	sub	sp, #116	; 0x74
 8008e86:	460c      	mov	r4, r1
 8008e88:	4617      	mov	r7, r2
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	b118      	cbz	r0, 8008e98 <_vfiprintf_r+0x18>
 8008e90:	6983      	ldr	r3, [r0, #24]
 8008e92:	b90b      	cbnz	r3, 8008e98 <_vfiprintf_r+0x18>
 8008e94:	f7ff fdee 	bl	8008a74 <__sinit>
 8008e98:	4b7c      	ldr	r3, [pc, #496]	; (800908c <_vfiprintf_r+0x20c>)
 8008e9a:	429c      	cmp	r4, r3
 8008e9c:	d157      	bne.n	8008f4e <_vfiprintf_r+0xce>
 8008e9e:	6874      	ldr	r4, [r6, #4]
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	0718      	lsls	r0, r3, #28
 8008ea4:	d55d      	bpl.n	8008f62 <_vfiprintf_r+0xe2>
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d05a      	beq.n	8008f62 <_vfiprintf_r+0xe2>
 8008eac:	2300      	movs	r3, #0
 8008eae:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb6:	2330      	movs	r3, #48	; 0x30
 8008eb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ebc:	f04f 0b01 	mov.w	fp, #1
 8008ec0:	46b8      	mov	r8, r7
 8008ec2:	4645      	mov	r5, r8
 8008ec4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d155      	bne.n	8008f78 <_vfiprintf_r+0xf8>
 8008ecc:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ed0:	d00b      	beq.n	8008eea <_vfiprintf_r+0x6a>
 8008ed2:	4653      	mov	r3, sl
 8008ed4:	463a      	mov	r2, r7
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff ffbf 	bl	8008e5c <__sfputs_r>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f000 80c4 	beq.w	800906c <_vfiprintf_r+0x1ec>
 8008ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee6:	4453      	add	r3, sl
 8008ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eea:	f898 3000 	ldrb.w	r3, [r8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80bc 	beq.w	800906c <_vfiprintf_r+0x1ec>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	9205      	str	r2, [sp, #20]
 8008f00:	9306      	str	r3, [sp, #24]
 8008f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f06:	931a      	str	r3, [sp, #104]	; 0x68
 8008f08:	2205      	movs	r2, #5
 8008f0a:	7829      	ldrb	r1, [r5, #0]
 8008f0c:	4860      	ldr	r0, [pc, #384]	; (8009090 <_vfiprintf_r+0x210>)
 8008f0e:	f7f7 f977 	bl	8000200 <memchr>
 8008f12:	f105 0801 	add.w	r8, r5, #1
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d131      	bne.n	8008f80 <_vfiprintf_r+0x100>
 8008f1c:	06d9      	lsls	r1, r3, #27
 8008f1e:	bf44      	itt	mi
 8008f20:	2220      	movmi	r2, #32
 8008f22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f26:	071a      	lsls	r2, r3, #28
 8008f28:	bf44      	itt	mi
 8008f2a:	222b      	movmi	r2, #43	; 0x2b
 8008f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f30:	782a      	ldrb	r2, [r5, #0]
 8008f32:	2a2a      	cmp	r2, #42	; 0x2a
 8008f34:	d02c      	beq.n	8008f90 <_vfiprintf_r+0x110>
 8008f36:	9a07      	ldr	r2, [sp, #28]
 8008f38:	2100      	movs	r1, #0
 8008f3a:	200a      	movs	r0, #10
 8008f3c:	46a8      	mov	r8, r5
 8008f3e:	3501      	adds	r5, #1
 8008f40:	f898 3000 	ldrb.w	r3, [r8]
 8008f44:	3b30      	subs	r3, #48	; 0x30
 8008f46:	2b09      	cmp	r3, #9
 8008f48:	d96d      	bls.n	8009026 <_vfiprintf_r+0x1a6>
 8008f4a:	b371      	cbz	r1, 8008faa <_vfiprintf_r+0x12a>
 8008f4c:	e026      	b.n	8008f9c <_vfiprintf_r+0x11c>
 8008f4e:	4b51      	ldr	r3, [pc, #324]	; (8009094 <_vfiprintf_r+0x214>)
 8008f50:	429c      	cmp	r4, r3
 8008f52:	d101      	bne.n	8008f58 <_vfiprintf_r+0xd8>
 8008f54:	68b4      	ldr	r4, [r6, #8]
 8008f56:	e7a3      	b.n	8008ea0 <_vfiprintf_r+0x20>
 8008f58:	4b4f      	ldr	r3, [pc, #316]	; (8009098 <_vfiprintf_r+0x218>)
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	bf08      	it	eq
 8008f5e:	68f4      	ldreq	r4, [r6, #12]
 8008f60:	e79e      	b.n	8008ea0 <_vfiprintf_r+0x20>
 8008f62:	4621      	mov	r1, r4
 8008f64:	4630      	mov	r0, r6
 8008f66:	f000 fb15 	bl	8009594 <__swsetup_r>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d09e      	beq.n	8008eac <_vfiprintf_r+0x2c>
 8008f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f72:	b01d      	add	sp, #116	; 0x74
 8008f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f78:	2b25      	cmp	r3, #37	; 0x25
 8008f7a:	d0a7      	beq.n	8008ecc <_vfiprintf_r+0x4c>
 8008f7c:	46a8      	mov	r8, r5
 8008f7e:	e7a0      	b.n	8008ec2 <_vfiprintf_r+0x42>
 8008f80:	4a43      	ldr	r2, [pc, #268]	; (8009090 <_vfiprintf_r+0x210>)
 8008f82:	1a80      	subs	r0, r0, r2
 8008f84:	fa0b f000 	lsl.w	r0, fp, r0
 8008f88:	4318      	orrs	r0, r3
 8008f8a:	9004      	str	r0, [sp, #16]
 8008f8c:	4645      	mov	r5, r8
 8008f8e:	e7bb      	b.n	8008f08 <_vfiprintf_r+0x88>
 8008f90:	9a03      	ldr	r2, [sp, #12]
 8008f92:	1d11      	adds	r1, r2, #4
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	9103      	str	r1, [sp, #12]
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	db01      	blt.n	8008fa0 <_vfiprintf_r+0x120>
 8008f9c:	9207      	str	r2, [sp, #28]
 8008f9e:	e004      	b.n	8008faa <_vfiprintf_r+0x12a>
 8008fa0:	4252      	negs	r2, r2
 8008fa2:	f043 0302 	orr.w	r3, r3, #2
 8008fa6:	9207      	str	r2, [sp, #28]
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	f898 3000 	ldrb.w	r3, [r8]
 8008fae:	2b2e      	cmp	r3, #46	; 0x2e
 8008fb0:	d110      	bne.n	8008fd4 <_vfiprintf_r+0x154>
 8008fb2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb8:	f108 0101 	add.w	r1, r8, #1
 8008fbc:	d137      	bne.n	800902e <_vfiprintf_r+0x1ae>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fce:	f108 0802 	add.w	r8, r8, #2
 8008fd2:	9305      	str	r3, [sp, #20]
 8008fd4:	4d31      	ldr	r5, [pc, #196]	; (800909c <_vfiprintf_r+0x21c>)
 8008fd6:	f898 1000 	ldrb.w	r1, [r8]
 8008fda:	2203      	movs	r2, #3
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7f7 f90f 	bl	8000200 <memchr>
 8008fe2:	b140      	cbz	r0, 8008ff6 <_vfiprintf_r+0x176>
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	1b40      	subs	r0, r0, r5
 8008fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8008fec:	9b04      	ldr	r3, [sp, #16]
 8008fee:	4303      	orrs	r3, r0
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	f898 1000 	ldrb.w	r1, [r8]
 8008ffa:	4829      	ldr	r0, [pc, #164]	; (80090a0 <_vfiprintf_r+0x220>)
 8008ffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009000:	2206      	movs	r2, #6
 8009002:	f108 0701 	add.w	r7, r8, #1
 8009006:	f7f7 f8fb 	bl	8000200 <memchr>
 800900a:	2800      	cmp	r0, #0
 800900c:	d034      	beq.n	8009078 <_vfiprintf_r+0x1f8>
 800900e:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <_vfiprintf_r+0x224>)
 8009010:	bb03      	cbnz	r3, 8009054 <_vfiprintf_r+0x1d4>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	3307      	adds	r3, #7
 8009016:	f023 0307 	bic.w	r3, r3, #7
 800901a:	3308      	adds	r3, #8
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	444b      	add	r3, r9
 8009022:	9309      	str	r3, [sp, #36]	; 0x24
 8009024:	e74c      	b.n	8008ec0 <_vfiprintf_r+0x40>
 8009026:	fb00 3202 	mla	r2, r0, r2, r3
 800902a:	2101      	movs	r1, #1
 800902c:	e786      	b.n	8008f3c <_vfiprintf_r+0xbc>
 800902e:	2300      	movs	r3, #0
 8009030:	9305      	str	r3, [sp, #20]
 8009032:	4618      	mov	r0, r3
 8009034:	250a      	movs	r5, #10
 8009036:	4688      	mov	r8, r1
 8009038:	3101      	adds	r1, #1
 800903a:	f898 2000 	ldrb.w	r2, [r8]
 800903e:	3a30      	subs	r2, #48	; 0x30
 8009040:	2a09      	cmp	r2, #9
 8009042:	d903      	bls.n	800904c <_vfiprintf_r+0x1cc>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0c5      	beq.n	8008fd4 <_vfiprintf_r+0x154>
 8009048:	9005      	str	r0, [sp, #20]
 800904a:	e7c3      	b.n	8008fd4 <_vfiprintf_r+0x154>
 800904c:	fb05 2000 	mla	r0, r5, r0, r2
 8009050:	2301      	movs	r3, #1
 8009052:	e7f0      	b.n	8009036 <_vfiprintf_r+0x1b6>
 8009054:	ab03      	add	r3, sp, #12
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	4622      	mov	r2, r4
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <_vfiprintf_r+0x228>)
 800905c:	a904      	add	r1, sp, #16
 800905e:	4630      	mov	r0, r6
 8009060:	f3af 8000 	nop.w
 8009064:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009068:	4681      	mov	r9, r0
 800906a:	d1d8      	bne.n	800901e <_vfiprintf_r+0x19e>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	065b      	lsls	r3, r3, #25
 8009070:	f53f af7d 	bmi.w	8008f6e <_vfiprintf_r+0xee>
 8009074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009076:	e77c      	b.n	8008f72 <_vfiprintf_r+0xf2>
 8009078:	ab03      	add	r3, sp, #12
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	4622      	mov	r2, r4
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <_vfiprintf_r+0x228>)
 8009080:	a904      	add	r1, sp, #16
 8009082:	4630      	mov	r0, r6
 8009084:	f000 f888 	bl	8009198 <_printf_i>
 8009088:	e7ec      	b.n	8009064 <_vfiprintf_r+0x1e4>
 800908a:	bf00      	nop
 800908c:	0800a168 	.word	0x0800a168
 8009090:	0800a1a8 	.word	0x0800a1a8
 8009094:	0800a188 	.word	0x0800a188
 8009098:	0800a148 	.word	0x0800a148
 800909c:	0800a1ae 	.word	0x0800a1ae
 80090a0:	0800a1b2 	.word	0x0800a1b2
 80090a4:	00000000 	.word	0x00000000
 80090a8:	08008e5d 	.word	0x08008e5d

080090ac <_printf_common>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	4691      	mov	r9, r2
 80090b2:	461f      	mov	r7, r3
 80090b4:	688a      	ldr	r2, [r1, #8]
 80090b6:	690b      	ldr	r3, [r1, #16]
 80090b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090bc:	4293      	cmp	r3, r2
 80090be:	bfb8      	it	lt
 80090c0:	4613      	movlt	r3, r2
 80090c2:	f8c9 3000 	str.w	r3, [r9]
 80090c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090ca:	4606      	mov	r6, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	b112      	cbz	r2, 80090d6 <_printf_common+0x2a>
 80090d0:	3301      	adds	r3, #1
 80090d2:	f8c9 3000 	str.w	r3, [r9]
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	0699      	lsls	r1, r3, #26
 80090da:	bf42      	ittt	mi
 80090dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090e0:	3302      	addmi	r3, #2
 80090e2:	f8c9 3000 	strmi.w	r3, [r9]
 80090e6:	6825      	ldr	r5, [r4, #0]
 80090e8:	f015 0506 	ands.w	r5, r5, #6
 80090ec:	d107      	bne.n	80090fe <_printf_common+0x52>
 80090ee:	f104 0a19 	add.w	sl, r4, #25
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	f8d9 2000 	ldr.w	r2, [r9]
 80090f8:	1a9b      	subs	r3, r3, r2
 80090fa:	429d      	cmp	r5, r3
 80090fc:	db29      	blt.n	8009152 <_printf_common+0xa6>
 80090fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	3300      	adds	r3, #0
 8009106:	bf18      	it	ne
 8009108:	2301      	movne	r3, #1
 800910a:	0692      	lsls	r2, r2, #26
 800910c:	d42e      	bmi.n	800916c <_printf_common+0xc0>
 800910e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009112:	4639      	mov	r1, r7
 8009114:	4630      	mov	r0, r6
 8009116:	47c0      	blx	r8
 8009118:	3001      	adds	r0, #1
 800911a:	d021      	beq.n	8009160 <_printf_common+0xb4>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	68e5      	ldr	r5, [r4, #12]
 8009120:	f8d9 2000 	ldr.w	r2, [r9]
 8009124:	f003 0306 	and.w	r3, r3, #6
 8009128:	2b04      	cmp	r3, #4
 800912a:	bf08      	it	eq
 800912c:	1aad      	subeq	r5, r5, r2
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	6922      	ldr	r2, [r4, #16]
 8009132:	bf0c      	ite	eq
 8009134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009138:	2500      	movne	r5, #0
 800913a:	4293      	cmp	r3, r2
 800913c:	bfc4      	itt	gt
 800913e:	1a9b      	subgt	r3, r3, r2
 8009140:	18ed      	addgt	r5, r5, r3
 8009142:	f04f 0900 	mov.w	r9, #0
 8009146:	341a      	adds	r4, #26
 8009148:	454d      	cmp	r5, r9
 800914a:	d11b      	bne.n	8009184 <_printf_common+0xd8>
 800914c:	2000      	movs	r0, #0
 800914e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009152:	2301      	movs	r3, #1
 8009154:	4652      	mov	r2, sl
 8009156:	4639      	mov	r1, r7
 8009158:	4630      	mov	r0, r6
 800915a:	47c0      	blx	r8
 800915c:	3001      	adds	r0, #1
 800915e:	d103      	bne.n	8009168 <_printf_common+0xbc>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009168:	3501      	adds	r5, #1
 800916a:	e7c2      	b.n	80090f2 <_printf_common+0x46>
 800916c:	18e1      	adds	r1, r4, r3
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	2030      	movs	r0, #48	; 0x30
 8009172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009176:	4422      	add	r2, r4
 8009178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800917c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009180:	3302      	adds	r3, #2
 8009182:	e7c4      	b.n	800910e <_printf_common+0x62>
 8009184:	2301      	movs	r3, #1
 8009186:	4622      	mov	r2, r4
 8009188:	4639      	mov	r1, r7
 800918a:	4630      	mov	r0, r6
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d0e6      	beq.n	8009160 <_printf_common+0xb4>
 8009192:	f109 0901 	add.w	r9, r9, #1
 8009196:	e7d7      	b.n	8009148 <_printf_common+0x9c>

08009198 <_printf_i>:
 8009198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800919c:	4617      	mov	r7, r2
 800919e:	7e0a      	ldrb	r2, [r1, #24]
 80091a0:	b085      	sub	sp, #20
 80091a2:	2a6e      	cmp	r2, #110	; 0x6e
 80091a4:	4698      	mov	r8, r3
 80091a6:	4606      	mov	r6, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80091b0:	f000 80bc 	beq.w	800932c <_printf_i+0x194>
 80091b4:	d81a      	bhi.n	80091ec <_printf_i+0x54>
 80091b6:	2a63      	cmp	r2, #99	; 0x63
 80091b8:	d02e      	beq.n	8009218 <_printf_i+0x80>
 80091ba:	d80a      	bhi.n	80091d2 <_printf_i+0x3a>
 80091bc:	2a00      	cmp	r2, #0
 80091be:	f000 80c8 	beq.w	8009352 <_printf_i+0x1ba>
 80091c2:	2a58      	cmp	r2, #88	; 0x58
 80091c4:	f000 808a 	beq.w	80092dc <_printf_i+0x144>
 80091c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80091d0:	e02a      	b.n	8009228 <_printf_i+0x90>
 80091d2:	2a64      	cmp	r2, #100	; 0x64
 80091d4:	d001      	beq.n	80091da <_printf_i+0x42>
 80091d6:	2a69      	cmp	r2, #105	; 0x69
 80091d8:	d1f6      	bne.n	80091c8 <_printf_i+0x30>
 80091da:	6821      	ldr	r1, [r4, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80091e2:	d023      	beq.n	800922c <_printf_i+0x94>
 80091e4:	1d11      	adds	r1, r2, #4
 80091e6:	6019      	str	r1, [r3, #0]
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	e027      	b.n	800923c <_printf_i+0xa4>
 80091ec:	2a73      	cmp	r2, #115	; 0x73
 80091ee:	f000 80b4 	beq.w	800935a <_printf_i+0x1c2>
 80091f2:	d808      	bhi.n	8009206 <_printf_i+0x6e>
 80091f4:	2a6f      	cmp	r2, #111	; 0x6f
 80091f6:	d02a      	beq.n	800924e <_printf_i+0xb6>
 80091f8:	2a70      	cmp	r2, #112	; 0x70
 80091fa:	d1e5      	bne.n	80091c8 <_printf_i+0x30>
 80091fc:	680a      	ldr	r2, [r1, #0]
 80091fe:	f042 0220 	orr.w	r2, r2, #32
 8009202:	600a      	str	r2, [r1, #0]
 8009204:	e003      	b.n	800920e <_printf_i+0x76>
 8009206:	2a75      	cmp	r2, #117	; 0x75
 8009208:	d021      	beq.n	800924e <_printf_i+0xb6>
 800920a:	2a78      	cmp	r2, #120	; 0x78
 800920c:	d1dc      	bne.n	80091c8 <_printf_i+0x30>
 800920e:	2278      	movs	r2, #120	; 0x78
 8009210:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009214:	496e      	ldr	r1, [pc, #440]	; (80093d0 <_printf_i+0x238>)
 8009216:	e064      	b.n	80092e2 <_printf_i+0x14a>
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800921e:	1d11      	adds	r1, r2, #4
 8009220:	6019      	str	r1, [r3, #0]
 8009222:	6813      	ldr	r3, [r2, #0]
 8009224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009228:	2301      	movs	r3, #1
 800922a:	e0a3      	b.n	8009374 <_printf_i+0x1dc>
 800922c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009230:	f102 0104 	add.w	r1, r2, #4
 8009234:	6019      	str	r1, [r3, #0]
 8009236:	d0d7      	beq.n	80091e8 <_printf_i+0x50>
 8009238:	f9b2 3000 	ldrsh.w	r3, [r2]
 800923c:	2b00      	cmp	r3, #0
 800923e:	da03      	bge.n	8009248 <_printf_i+0xb0>
 8009240:	222d      	movs	r2, #45	; 0x2d
 8009242:	425b      	negs	r3, r3
 8009244:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009248:	4962      	ldr	r1, [pc, #392]	; (80093d4 <_printf_i+0x23c>)
 800924a:	220a      	movs	r2, #10
 800924c:	e017      	b.n	800927e <_printf_i+0xe6>
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009256:	d003      	beq.n	8009260 <_printf_i+0xc8>
 8009258:	1d08      	adds	r0, r1, #4
 800925a:	6018      	str	r0, [r3, #0]
 800925c:	680b      	ldr	r3, [r1, #0]
 800925e:	e006      	b.n	800926e <_printf_i+0xd6>
 8009260:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009264:	f101 0004 	add.w	r0, r1, #4
 8009268:	6018      	str	r0, [r3, #0]
 800926a:	d0f7      	beq.n	800925c <_printf_i+0xc4>
 800926c:	880b      	ldrh	r3, [r1, #0]
 800926e:	4959      	ldr	r1, [pc, #356]	; (80093d4 <_printf_i+0x23c>)
 8009270:	2a6f      	cmp	r2, #111	; 0x6f
 8009272:	bf14      	ite	ne
 8009274:	220a      	movne	r2, #10
 8009276:	2208      	moveq	r2, #8
 8009278:	2000      	movs	r0, #0
 800927a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800927e:	6865      	ldr	r5, [r4, #4]
 8009280:	60a5      	str	r5, [r4, #8]
 8009282:	2d00      	cmp	r5, #0
 8009284:	f2c0 809c 	blt.w	80093c0 <_printf_i+0x228>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	f020 0004 	bic.w	r0, r0, #4
 800928e:	6020      	str	r0, [r4, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d13f      	bne.n	8009314 <_printf_i+0x17c>
 8009294:	2d00      	cmp	r5, #0
 8009296:	f040 8095 	bne.w	80093c4 <_printf_i+0x22c>
 800929a:	4675      	mov	r5, lr
 800929c:	2a08      	cmp	r2, #8
 800929e:	d10b      	bne.n	80092b8 <_printf_i+0x120>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	07da      	lsls	r2, r3, #31
 80092a4:	d508      	bpl.n	80092b8 <_printf_i+0x120>
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	6862      	ldr	r2, [r4, #4]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	bfde      	ittt	le
 80092ae:	2330      	movle	r3, #48	; 0x30
 80092b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092b8:	ebae 0305 	sub.w	r3, lr, r5
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	f8cd 8000 	str.w	r8, [sp]
 80092c2:	463b      	mov	r3, r7
 80092c4:	aa03      	add	r2, sp, #12
 80092c6:	4621      	mov	r1, r4
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff feef 	bl	80090ac <_printf_common>
 80092ce:	3001      	adds	r0, #1
 80092d0:	d155      	bne.n	800937e <_printf_i+0x1e6>
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	b005      	add	sp, #20
 80092d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80092e0:	493c      	ldr	r1, [pc, #240]	; (80093d4 <_printf_i+0x23c>)
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80092ea:	f100 0504 	add.w	r5, r0, #4
 80092ee:	601d      	str	r5, [r3, #0]
 80092f0:	d001      	beq.n	80092f6 <_printf_i+0x15e>
 80092f2:	6803      	ldr	r3, [r0, #0]
 80092f4:	e002      	b.n	80092fc <_printf_i+0x164>
 80092f6:	0655      	lsls	r5, r2, #25
 80092f8:	d5fb      	bpl.n	80092f2 <_printf_i+0x15a>
 80092fa:	8803      	ldrh	r3, [r0, #0]
 80092fc:	07d0      	lsls	r0, r2, #31
 80092fe:	bf44      	itt	mi
 8009300:	f042 0220 	orrmi.w	r2, r2, #32
 8009304:	6022      	strmi	r2, [r4, #0]
 8009306:	b91b      	cbnz	r3, 8009310 <_printf_i+0x178>
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	f022 0220 	bic.w	r2, r2, #32
 800930e:	6022      	str	r2, [r4, #0]
 8009310:	2210      	movs	r2, #16
 8009312:	e7b1      	b.n	8009278 <_printf_i+0xe0>
 8009314:	4675      	mov	r5, lr
 8009316:	fbb3 f0f2 	udiv	r0, r3, r2
 800931a:	fb02 3310 	mls	r3, r2, r0, r3
 800931e:	5ccb      	ldrb	r3, [r1, r3]
 8009320:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009324:	4603      	mov	r3, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d1f5      	bne.n	8009316 <_printf_i+0x17e>
 800932a:	e7b7      	b.n	800929c <_printf_i+0x104>
 800932c:	6808      	ldr	r0, [r1, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	6949      	ldr	r1, [r1, #20]
 8009332:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009336:	d004      	beq.n	8009342 <_printf_i+0x1aa>
 8009338:	1d10      	adds	r0, r2, #4
 800933a:	6018      	str	r0, [r3, #0]
 800933c:	6813      	ldr	r3, [r2, #0]
 800933e:	6019      	str	r1, [r3, #0]
 8009340:	e007      	b.n	8009352 <_printf_i+0x1ba>
 8009342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009346:	f102 0004 	add.w	r0, r2, #4
 800934a:	6018      	str	r0, [r3, #0]
 800934c:	6813      	ldr	r3, [r2, #0]
 800934e:	d0f6      	beq.n	800933e <_printf_i+0x1a6>
 8009350:	8019      	strh	r1, [r3, #0]
 8009352:	2300      	movs	r3, #0
 8009354:	6123      	str	r3, [r4, #16]
 8009356:	4675      	mov	r5, lr
 8009358:	e7b1      	b.n	80092be <_printf_i+0x126>
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	1d11      	adds	r1, r2, #4
 800935e:	6019      	str	r1, [r3, #0]
 8009360:	6815      	ldr	r5, [r2, #0]
 8009362:	6862      	ldr	r2, [r4, #4]
 8009364:	2100      	movs	r1, #0
 8009366:	4628      	mov	r0, r5
 8009368:	f7f6 ff4a 	bl	8000200 <memchr>
 800936c:	b108      	cbz	r0, 8009372 <_printf_i+0x1da>
 800936e:	1b40      	subs	r0, r0, r5
 8009370:	6060      	str	r0, [r4, #4]
 8009372:	6863      	ldr	r3, [r4, #4]
 8009374:	6123      	str	r3, [r4, #16]
 8009376:	2300      	movs	r3, #0
 8009378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800937c:	e79f      	b.n	80092be <_printf_i+0x126>
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	462a      	mov	r2, r5
 8009382:	4639      	mov	r1, r7
 8009384:	4630      	mov	r0, r6
 8009386:	47c0      	blx	r8
 8009388:	3001      	adds	r0, #1
 800938a:	d0a2      	beq.n	80092d2 <_printf_i+0x13a>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	079b      	lsls	r3, r3, #30
 8009390:	d507      	bpl.n	80093a2 <_printf_i+0x20a>
 8009392:	2500      	movs	r5, #0
 8009394:	f104 0919 	add.w	r9, r4, #25
 8009398:	68e3      	ldr	r3, [r4, #12]
 800939a:	9a03      	ldr	r2, [sp, #12]
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	429d      	cmp	r5, r3
 80093a0:	db05      	blt.n	80093ae <_printf_i+0x216>
 80093a2:	68e0      	ldr	r0, [r4, #12]
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	4298      	cmp	r0, r3
 80093a8:	bfb8      	it	lt
 80093aa:	4618      	movlt	r0, r3
 80093ac:	e793      	b.n	80092d6 <_printf_i+0x13e>
 80093ae:	2301      	movs	r3, #1
 80093b0:	464a      	mov	r2, r9
 80093b2:	4639      	mov	r1, r7
 80093b4:	4630      	mov	r0, r6
 80093b6:	47c0      	blx	r8
 80093b8:	3001      	adds	r0, #1
 80093ba:	d08a      	beq.n	80092d2 <_printf_i+0x13a>
 80093bc:	3501      	adds	r5, #1
 80093be:	e7eb      	b.n	8009398 <_printf_i+0x200>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1a7      	bne.n	8009314 <_printf_i+0x17c>
 80093c4:	780b      	ldrb	r3, [r1, #0]
 80093c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093ce:	e765      	b.n	800929c <_printf_i+0x104>
 80093d0:	0800a1ca 	.word	0x0800a1ca
 80093d4:	0800a1b9 	.word	0x0800a1b9

080093d8 <_putc_r>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	460d      	mov	r5, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	4606      	mov	r6, r0
 80093e0:	b118      	cbz	r0, 80093ea <_putc_r+0x12>
 80093e2:	6983      	ldr	r3, [r0, #24]
 80093e4:	b90b      	cbnz	r3, 80093ea <_putc_r+0x12>
 80093e6:	f7ff fb45 	bl	8008a74 <__sinit>
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <_putc_r+0x60>)
 80093ec:	429c      	cmp	r4, r3
 80093ee:	d112      	bne.n	8009416 <_putc_r+0x3e>
 80093f0:	6874      	ldr	r4, [r6, #4]
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	60a3      	str	r3, [r4, #8]
 80093fa:	da16      	bge.n	800942a <_putc_r+0x52>
 80093fc:	69a2      	ldr	r2, [r4, #24]
 80093fe:	4293      	cmp	r3, r2
 8009400:	db02      	blt.n	8009408 <_putc_r+0x30>
 8009402:	b2eb      	uxtb	r3, r5
 8009404:	2b0a      	cmp	r3, #10
 8009406:	d110      	bne.n	800942a <_putc_r+0x52>
 8009408:	4622      	mov	r2, r4
 800940a:	4629      	mov	r1, r5
 800940c:	4630      	mov	r0, r6
 800940e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009412:	f000 b85b 	b.w	80094cc <__swbuf_r>
 8009416:	4b09      	ldr	r3, [pc, #36]	; (800943c <_putc_r+0x64>)
 8009418:	429c      	cmp	r4, r3
 800941a:	d101      	bne.n	8009420 <_putc_r+0x48>
 800941c:	68b4      	ldr	r4, [r6, #8]
 800941e:	e7e8      	b.n	80093f2 <_putc_r+0x1a>
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <_putc_r+0x68>)
 8009422:	429c      	cmp	r4, r3
 8009424:	bf08      	it	eq
 8009426:	68f4      	ldreq	r4, [r6, #12]
 8009428:	e7e3      	b.n	80093f2 <_putc_r+0x1a>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	701d      	strb	r5, [r3, #0]
 8009432:	b2e8      	uxtb	r0, r5
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	bf00      	nop
 8009438:	0800a168 	.word	0x0800a168
 800943c:	0800a188 	.word	0x0800a188
 8009440:	0800a148 	.word	0x0800a148

08009444 <__sread>:
 8009444:	b510      	push	{r4, lr}
 8009446:	460c      	mov	r4, r1
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	f000 fa94 	bl	8009978 <_read_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	bfab      	itete	ge
 8009454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009456:	89a3      	ldrhlt	r3, [r4, #12]
 8009458:	181b      	addge	r3, r3, r0
 800945a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800945e:	bfac      	ite	ge
 8009460:	6563      	strge	r3, [r4, #84]	; 0x54
 8009462:	81a3      	strhlt	r3, [r4, #12]
 8009464:	bd10      	pop	{r4, pc}

08009466 <__swrite>:
 8009466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946a:	461f      	mov	r7, r3
 800946c:	898b      	ldrh	r3, [r1, #12]
 800946e:	05db      	lsls	r3, r3, #23
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	4616      	mov	r6, r2
 8009476:	d505      	bpl.n	8009484 <__swrite+0x1e>
 8009478:	2302      	movs	r3, #2
 800947a:	2200      	movs	r2, #0
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	f000 f9b8 	bl	80097f4 <_lseek_r>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	f000 b869 	b.w	8009570 <_write_r>

0800949e <__sseek>:
 800949e:	b510      	push	{r4, lr}
 80094a0:	460c      	mov	r4, r1
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	f000 f9a5 	bl	80097f4 <_lseek_r>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	bf15      	itete	ne
 80094b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094ba:	81a3      	strheq	r3, [r4, #12]
 80094bc:	bf18      	it	ne
 80094be:	81a3      	strhne	r3, [r4, #12]
 80094c0:	bd10      	pop	{r4, pc}

080094c2 <__sclose>:
 80094c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c6:	f000 b8d3 	b.w	8009670 <_close_r>
	...

080094cc <__swbuf_r>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	460e      	mov	r6, r1
 80094d0:	4614      	mov	r4, r2
 80094d2:	4605      	mov	r5, r0
 80094d4:	b118      	cbz	r0, 80094de <__swbuf_r+0x12>
 80094d6:	6983      	ldr	r3, [r0, #24]
 80094d8:	b90b      	cbnz	r3, 80094de <__swbuf_r+0x12>
 80094da:	f7ff facb 	bl	8008a74 <__sinit>
 80094de:	4b21      	ldr	r3, [pc, #132]	; (8009564 <__swbuf_r+0x98>)
 80094e0:	429c      	cmp	r4, r3
 80094e2:	d12a      	bne.n	800953a <__swbuf_r+0x6e>
 80094e4:	686c      	ldr	r4, [r5, #4]
 80094e6:	69a3      	ldr	r3, [r4, #24]
 80094e8:	60a3      	str	r3, [r4, #8]
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	071a      	lsls	r2, r3, #28
 80094ee:	d52e      	bpl.n	800954e <__swbuf_r+0x82>
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	b363      	cbz	r3, 800954e <__swbuf_r+0x82>
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	6820      	ldr	r0, [r4, #0]
 80094f8:	1ac0      	subs	r0, r0, r3
 80094fa:	6963      	ldr	r3, [r4, #20]
 80094fc:	b2f6      	uxtb	r6, r6
 80094fe:	4298      	cmp	r0, r3
 8009500:	4637      	mov	r7, r6
 8009502:	db04      	blt.n	800950e <__swbuf_r+0x42>
 8009504:	4621      	mov	r1, r4
 8009506:	4628      	mov	r0, r5
 8009508:	f000 f94a 	bl	80097a0 <_fflush_r>
 800950c:	bb28      	cbnz	r0, 800955a <__swbuf_r+0x8e>
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	3b01      	subs	r3, #1
 8009512:	60a3      	str	r3, [r4, #8]
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	6022      	str	r2, [r4, #0]
 800951a:	701e      	strb	r6, [r3, #0]
 800951c:	6963      	ldr	r3, [r4, #20]
 800951e:	3001      	adds	r0, #1
 8009520:	4298      	cmp	r0, r3
 8009522:	d004      	beq.n	800952e <__swbuf_r+0x62>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	07db      	lsls	r3, r3, #31
 8009528:	d519      	bpl.n	800955e <__swbuf_r+0x92>
 800952a:	2e0a      	cmp	r6, #10
 800952c:	d117      	bne.n	800955e <__swbuf_r+0x92>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f935 	bl	80097a0 <_fflush_r>
 8009536:	b190      	cbz	r0, 800955e <__swbuf_r+0x92>
 8009538:	e00f      	b.n	800955a <__swbuf_r+0x8e>
 800953a:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <__swbuf_r+0x9c>)
 800953c:	429c      	cmp	r4, r3
 800953e:	d101      	bne.n	8009544 <__swbuf_r+0x78>
 8009540:	68ac      	ldr	r4, [r5, #8]
 8009542:	e7d0      	b.n	80094e6 <__swbuf_r+0x1a>
 8009544:	4b09      	ldr	r3, [pc, #36]	; (800956c <__swbuf_r+0xa0>)
 8009546:	429c      	cmp	r4, r3
 8009548:	bf08      	it	eq
 800954a:	68ec      	ldreq	r4, [r5, #12]
 800954c:	e7cb      	b.n	80094e6 <__swbuf_r+0x1a>
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f81f 	bl	8009594 <__swsetup_r>
 8009556:	2800      	cmp	r0, #0
 8009558:	d0cc      	beq.n	80094f4 <__swbuf_r+0x28>
 800955a:	f04f 37ff 	mov.w	r7, #4294967295
 800955e:	4638      	mov	r0, r7
 8009560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009562:	bf00      	nop
 8009564:	0800a168 	.word	0x0800a168
 8009568:	0800a188 	.word	0x0800a188
 800956c:	0800a148 	.word	0x0800a148

08009570 <_write_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4c07      	ldr	r4, [pc, #28]	; (8009590 <_write_r+0x20>)
 8009574:	4605      	mov	r5, r0
 8009576:	4608      	mov	r0, r1
 8009578:	4611      	mov	r1, r2
 800957a:	2200      	movs	r2, #0
 800957c:	6022      	str	r2, [r4, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f7f7 f9b0 	bl	80008e4 <_write>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_write_r+0x1e>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	b103      	cbz	r3, 800958e <_write_r+0x1e>
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20000858 	.word	0x20000858

08009594 <__swsetup_r>:
 8009594:	4b32      	ldr	r3, [pc, #200]	; (8009660 <__swsetup_r+0xcc>)
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	4606      	mov	r6, r0
 800959c:	460c      	mov	r4, r1
 800959e:	b125      	cbz	r5, 80095aa <__swsetup_r+0x16>
 80095a0:	69ab      	ldr	r3, [r5, #24]
 80095a2:	b913      	cbnz	r3, 80095aa <__swsetup_r+0x16>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff fa65 	bl	8008a74 <__sinit>
 80095aa:	4b2e      	ldr	r3, [pc, #184]	; (8009664 <__swsetup_r+0xd0>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d10f      	bne.n	80095d0 <__swsetup_r+0x3c>
 80095b0:	686c      	ldr	r4, [r5, #4]
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	0715      	lsls	r5, r2, #28
 80095ba:	d42c      	bmi.n	8009616 <__swsetup_r+0x82>
 80095bc:	06d0      	lsls	r0, r2, #27
 80095be:	d411      	bmi.n	80095e4 <__swsetup_r+0x50>
 80095c0:	2209      	movs	r2, #9
 80095c2:	6032      	str	r2, [r6, #0]
 80095c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	4b25      	ldr	r3, [pc, #148]	; (8009668 <__swsetup_r+0xd4>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d101      	bne.n	80095da <__swsetup_r+0x46>
 80095d6:	68ac      	ldr	r4, [r5, #8]
 80095d8:	e7eb      	b.n	80095b2 <__swsetup_r+0x1e>
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <__swsetup_r+0xd8>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	bf08      	it	eq
 80095e0:	68ec      	ldreq	r4, [r5, #12]
 80095e2:	e7e6      	b.n	80095b2 <__swsetup_r+0x1e>
 80095e4:	0751      	lsls	r1, r2, #29
 80095e6:	d512      	bpl.n	800960e <__swsetup_r+0x7a>
 80095e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ea:	b141      	cbz	r1, 80095fe <__swsetup_r+0x6a>
 80095ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f0:	4299      	cmp	r1, r3
 80095f2:	d002      	beq.n	80095fa <__swsetup_r+0x66>
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff f8f1 	bl	80087dc <_free_r>
 80095fa:	2300      	movs	r3, #0
 80095fc:	6363      	str	r3, [r4, #52]	; 0x34
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	2300      	movs	r3, #0
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f043 0308 	orr.w	r3, r3, #8
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	b94b      	cbnz	r3, 800962e <__swsetup_r+0x9a>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009624:	d003      	beq.n	800962e <__swsetup_r+0x9a>
 8009626:	4621      	mov	r1, r4
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f919 	bl	8009860 <__smakebuf_r>
 800962e:	89a2      	ldrh	r2, [r4, #12]
 8009630:	f012 0301 	ands.w	r3, r2, #1
 8009634:	d00c      	beq.n	8009650 <__swsetup_r+0xbc>
 8009636:	2300      	movs	r3, #0
 8009638:	60a3      	str	r3, [r4, #8]
 800963a:	6963      	ldr	r3, [r4, #20]
 800963c:	425b      	negs	r3, r3
 800963e:	61a3      	str	r3, [r4, #24]
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	b953      	cbnz	r3, 800965a <__swsetup_r+0xc6>
 8009644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009648:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800964c:	d1ba      	bne.n	80095c4 <__swsetup_r+0x30>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	0792      	lsls	r2, r2, #30
 8009652:	bf58      	it	pl
 8009654:	6963      	ldrpl	r3, [r4, #20]
 8009656:	60a3      	str	r3, [r4, #8]
 8009658:	e7f2      	b.n	8009640 <__swsetup_r+0xac>
 800965a:	2000      	movs	r0, #0
 800965c:	e7f7      	b.n	800964e <__swsetup_r+0xba>
 800965e:	bf00      	nop
 8009660:	2000002c 	.word	0x2000002c
 8009664:	0800a168 	.word	0x0800a168
 8009668:	0800a188 	.word	0x0800a188
 800966c:	0800a148 	.word	0x0800a148

08009670 <_close_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4c06      	ldr	r4, [pc, #24]	; (800968c <_close_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4605      	mov	r5, r0
 8009678:	4608      	mov	r0, r1
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	f7f7 fa54 	bl	8000b28 <_close>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_close_r+0x1a>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	b103      	cbz	r3, 800968a <_close_r+0x1a>
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000858 	.word	0x20000858

08009690 <__sflush_r>:
 8009690:	898a      	ldrh	r2, [r1, #12]
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4605      	mov	r5, r0
 8009698:	0710      	lsls	r0, r2, #28
 800969a:	460c      	mov	r4, r1
 800969c:	d45a      	bmi.n	8009754 <__sflush_r+0xc4>
 800969e:	684b      	ldr	r3, [r1, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dc05      	bgt.n	80096b0 <__sflush_r+0x20>
 80096a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc02      	bgt.n	80096b0 <__sflush_r+0x20>
 80096aa:	2000      	movs	r0, #0
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	d0f9      	beq.n	80096aa <__sflush_r+0x1a>
 80096b6:	2300      	movs	r3, #0
 80096b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096bc:	682f      	ldr	r7, [r5, #0]
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	d033      	beq.n	800972a <__sflush_r+0x9a>
 80096c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	075a      	lsls	r2, r3, #29
 80096c8:	d505      	bpl.n	80096d6 <__sflush_r+0x46>
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	1ac0      	subs	r0, r0, r3
 80096ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d0:	b10b      	cbz	r3, 80096d6 <__sflush_r+0x46>
 80096d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	2300      	movs	r3, #0
 80096d8:	4602      	mov	r2, r0
 80096da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096dc:	6a21      	ldr	r1, [r4, #32]
 80096de:	4628      	mov	r0, r5
 80096e0:	47b0      	blx	r6
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	d106      	bne.n	80096f6 <__sflush_r+0x66>
 80096e8:	6829      	ldr	r1, [r5, #0]
 80096ea:	291d      	cmp	r1, #29
 80096ec:	d84b      	bhi.n	8009786 <__sflush_r+0xf6>
 80096ee:	4a2b      	ldr	r2, [pc, #172]	; (800979c <__sflush_r+0x10c>)
 80096f0:	40ca      	lsrs	r2, r1
 80096f2:	07d6      	lsls	r6, r2, #31
 80096f4:	d547      	bpl.n	8009786 <__sflush_r+0xf6>
 80096f6:	2200      	movs	r2, #0
 80096f8:	6062      	str	r2, [r4, #4]
 80096fa:	04d9      	lsls	r1, r3, #19
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	6022      	str	r2, [r4, #0]
 8009700:	d504      	bpl.n	800970c <__sflush_r+0x7c>
 8009702:	1c42      	adds	r2, r0, #1
 8009704:	d101      	bne.n	800970a <__sflush_r+0x7a>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b903      	cbnz	r3, 800970c <__sflush_r+0x7c>
 800970a:	6560      	str	r0, [r4, #84]	; 0x54
 800970c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800970e:	602f      	str	r7, [r5, #0]
 8009710:	2900      	cmp	r1, #0
 8009712:	d0ca      	beq.n	80096aa <__sflush_r+0x1a>
 8009714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009718:	4299      	cmp	r1, r3
 800971a:	d002      	beq.n	8009722 <__sflush_r+0x92>
 800971c:	4628      	mov	r0, r5
 800971e:	f7ff f85d 	bl	80087dc <_free_r>
 8009722:	2000      	movs	r0, #0
 8009724:	6360      	str	r0, [r4, #52]	; 0x34
 8009726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972a:	6a21      	ldr	r1, [r4, #32]
 800972c:	2301      	movs	r3, #1
 800972e:	4628      	mov	r0, r5
 8009730:	47b0      	blx	r6
 8009732:	1c41      	adds	r1, r0, #1
 8009734:	d1c6      	bne.n	80096c4 <__sflush_r+0x34>
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0c3      	beq.n	80096c4 <__sflush_r+0x34>
 800973c:	2b1d      	cmp	r3, #29
 800973e:	d001      	beq.n	8009744 <__sflush_r+0xb4>
 8009740:	2b16      	cmp	r3, #22
 8009742:	d101      	bne.n	8009748 <__sflush_r+0xb8>
 8009744:	602f      	str	r7, [r5, #0]
 8009746:	e7b0      	b.n	80096aa <__sflush_r+0x1a>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009754:	690f      	ldr	r7, [r1, #16]
 8009756:	2f00      	cmp	r7, #0
 8009758:	d0a7      	beq.n	80096aa <__sflush_r+0x1a>
 800975a:	0793      	lsls	r3, r2, #30
 800975c:	680e      	ldr	r6, [r1, #0]
 800975e:	bf08      	it	eq
 8009760:	694b      	ldreq	r3, [r1, #20]
 8009762:	600f      	str	r7, [r1, #0]
 8009764:	bf18      	it	ne
 8009766:	2300      	movne	r3, #0
 8009768:	eba6 0807 	sub.w	r8, r6, r7
 800976c:	608b      	str	r3, [r1, #8]
 800976e:	f1b8 0f00 	cmp.w	r8, #0
 8009772:	dd9a      	ble.n	80096aa <__sflush_r+0x1a>
 8009774:	4643      	mov	r3, r8
 8009776:	463a      	mov	r2, r7
 8009778:	6a21      	ldr	r1, [r4, #32]
 800977a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800977c:	4628      	mov	r0, r5
 800977e:	47b0      	blx	r6
 8009780:	2800      	cmp	r0, #0
 8009782:	dc07      	bgt.n	8009794 <__sflush_r+0x104>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009794:	4407      	add	r7, r0
 8009796:	eba8 0800 	sub.w	r8, r8, r0
 800979a:	e7e8      	b.n	800976e <__sflush_r+0xde>
 800979c:	20400001 	.word	0x20400001

080097a0 <_fflush_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	690b      	ldr	r3, [r1, #16]
 80097a4:	4605      	mov	r5, r0
 80097a6:	460c      	mov	r4, r1
 80097a8:	b1db      	cbz	r3, 80097e2 <_fflush_r+0x42>
 80097aa:	b118      	cbz	r0, 80097b4 <_fflush_r+0x14>
 80097ac:	6983      	ldr	r3, [r0, #24]
 80097ae:	b90b      	cbnz	r3, 80097b4 <_fflush_r+0x14>
 80097b0:	f7ff f960 	bl	8008a74 <__sinit>
 80097b4:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <_fflush_r+0x48>)
 80097b6:	429c      	cmp	r4, r3
 80097b8:	d109      	bne.n	80097ce <_fflush_r+0x2e>
 80097ba:	686c      	ldr	r4, [r5, #4]
 80097bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c0:	b17b      	cbz	r3, 80097e2 <_fflush_r+0x42>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ca:	f7ff bf61 	b.w	8009690 <__sflush_r>
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <_fflush_r+0x4c>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	d101      	bne.n	80097d8 <_fflush_r+0x38>
 80097d4:	68ac      	ldr	r4, [r5, #8]
 80097d6:	e7f1      	b.n	80097bc <_fflush_r+0x1c>
 80097d8:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <_fflush_r+0x50>)
 80097da:	429c      	cmp	r4, r3
 80097dc:	bf08      	it	eq
 80097de:	68ec      	ldreq	r4, [r5, #12]
 80097e0:	e7ec      	b.n	80097bc <_fflush_r+0x1c>
 80097e2:	2000      	movs	r0, #0
 80097e4:	bd38      	pop	{r3, r4, r5, pc}
 80097e6:	bf00      	nop
 80097e8:	0800a168 	.word	0x0800a168
 80097ec:	0800a188 	.word	0x0800a188
 80097f0:	0800a148 	.word	0x0800a148

080097f4 <_lseek_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4c07      	ldr	r4, [pc, #28]	; (8009814 <_lseek_r+0x20>)
 80097f8:	4605      	mov	r5, r0
 80097fa:	4608      	mov	r0, r1
 80097fc:	4611      	mov	r1, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	6022      	str	r2, [r4, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f7f7 f9b7 	bl	8000b76 <_lseek>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_lseek_r+0x1e>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	b103      	cbz	r3, 8009812 <_lseek_r+0x1e>
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	20000858 	.word	0x20000858

08009818 <__swhatbuf_r>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	460e      	mov	r6, r1
 800981c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009820:	2900      	cmp	r1, #0
 8009822:	b090      	sub	sp, #64	; 0x40
 8009824:	4614      	mov	r4, r2
 8009826:	461d      	mov	r5, r3
 8009828:	da07      	bge.n	800983a <__swhatbuf_r+0x22>
 800982a:	2300      	movs	r3, #0
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	89b3      	ldrh	r3, [r6, #12]
 8009830:	061a      	lsls	r2, r3, #24
 8009832:	d410      	bmi.n	8009856 <__swhatbuf_r+0x3e>
 8009834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009838:	e00e      	b.n	8009858 <__swhatbuf_r+0x40>
 800983a:	aa01      	add	r2, sp, #4
 800983c:	f000 f8ae 	bl	800999c <_fstat_r>
 8009840:	2800      	cmp	r0, #0
 8009842:	dbf2      	blt.n	800982a <__swhatbuf_r+0x12>
 8009844:	9a02      	ldr	r2, [sp, #8]
 8009846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800984a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800984e:	425a      	negs	r2, r3
 8009850:	415a      	adcs	r2, r3
 8009852:	602a      	str	r2, [r5, #0]
 8009854:	e7ee      	b.n	8009834 <__swhatbuf_r+0x1c>
 8009856:	2340      	movs	r3, #64	; 0x40
 8009858:	2000      	movs	r0, #0
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	b010      	add	sp, #64	; 0x40
 800985e:	bd70      	pop	{r4, r5, r6, pc}

08009860 <__smakebuf_r>:
 8009860:	898b      	ldrh	r3, [r1, #12]
 8009862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009864:	079d      	lsls	r5, r3, #30
 8009866:	4606      	mov	r6, r0
 8009868:	460c      	mov	r4, r1
 800986a:	d507      	bpl.n	800987c <__smakebuf_r+0x1c>
 800986c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	2301      	movs	r3, #1
 8009876:	6163      	str	r3, [r4, #20]
 8009878:	b002      	add	sp, #8
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	ab01      	add	r3, sp, #4
 800987e:	466a      	mov	r2, sp
 8009880:	f7ff ffca 	bl	8009818 <__swhatbuf_r>
 8009884:	9900      	ldr	r1, [sp, #0]
 8009886:	4605      	mov	r5, r0
 8009888:	4630      	mov	r0, r6
 800988a:	f7fe fff5 	bl	8008878 <_malloc_r>
 800988e:	b948      	cbnz	r0, 80098a4 <__smakebuf_r+0x44>
 8009890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009894:	059a      	lsls	r2, r3, #22
 8009896:	d4ef      	bmi.n	8009878 <__smakebuf_r+0x18>
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	f043 0302 	orr.w	r3, r3, #2
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7e3      	b.n	800986c <__smakebuf_r+0xc>
 80098a4:	4b0d      	ldr	r3, [pc, #52]	; (80098dc <__smakebuf_r+0x7c>)
 80098a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	6020      	str	r0, [r4, #0]
 80098ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b0:	81a3      	strh	r3, [r4, #12]
 80098b2:	9b00      	ldr	r3, [sp, #0]
 80098b4:	6163      	str	r3, [r4, #20]
 80098b6:	9b01      	ldr	r3, [sp, #4]
 80098b8:	6120      	str	r0, [r4, #16]
 80098ba:	b15b      	cbz	r3, 80098d4 <__smakebuf_r+0x74>
 80098bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f87d 	bl	80099c0 <_isatty_r>
 80098c6:	b128      	cbz	r0, 80098d4 <__smakebuf_r+0x74>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	431d      	orrs	r5, r3
 80098d8:	81a5      	strh	r5, [r4, #12]
 80098da:	e7cd      	b.n	8009878 <__smakebuf_r+0x18>
 80098dc:	080089f5 	.word	0x080089f5

080098e0 <memcpy>:
 80098e0:	b510      	push	{r4, lr}
 80098e2:	1e43      	subs	r3, r0, #1
 80098e4:	440a      	add	r2, r1
 80098e6:	4291      	cmp	r1, r2
 80098e8:	d100      	bne.n	80098ec <memcpy+0xc>
 80098ea:	bd10      	pop	{r4, pc}
 80098ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098f4:	e7f7      	b.n	80098e6 <memcpy+0x6>

080098f6 <memmove>:
 80098f6:	4288      	cmp	r0, r1
 80098f8:	b510      	push	{r4, lr}
 80098fa:	eb01 0302 	add.w	r3, r1, r2
 80098fe:	d803      	bhi.n	8009908 <memmove+0x12>
 8009900:	1e42      	subs	r2, r0, #1
 8009902:	4299      	cmp	r1, r3
 8009904:	d10c      	bne.n	8009920 <memmove+0x2a>
 8009906:	bd10      	pop	{r4, pc}
 8009908:	4298      	cmp	r0, r3
 800990a:	d2f9      	bcs.n	8009900 <memmove+0xa>
 800990c:	1881      	adds	r1, r0, r2
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	42d3      	cmn	r3, r2
 8009912:	d100      	bne.n	8009916 <memmove+0x20>
 8009914:	bd10      	pop	{r4, pc}
 8009916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800991a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800991e:	e7f7      	b.n	8009910 <memmove+0x1a>
 8009920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009924:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009928:	e7eb      	b.n	8009902 <memmove+0xc>

0800992a <_realloc_r>:
 800992a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992c:	4607      	mov	r7, r0
 800992e:	4614      	mov	r4, r2
 8009930:	460e      	mov	r6, r1
 8009932:	b921      	cbnz	r1, 800993e <_realloc_r+0x14>
 8009934:	4611      	mov	r1, r2
 8009936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800993a:	f7fe bf9d 	b.w	8008878 <_malloc_r>
 800993e:	b922      	cbnz	r2, 800994a <_realloc_r+0x20>
 8009940:	f7fe ff4c 	bl	80087dc <_free_r>
 8009944:	4625      	mov	r5, r4
 8009946:	4628      	mov	r0, r5
 8009948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800994a:	f000 f849 	bl	80099e0 <_malloc_usable_size_r>
 800994e:	4284      	cmp	r4, r0
 8009950:	d90f      	bls.n	8009972 <_realloc_r+0x48>
 8009952:	4621      	mov	r1, r4
 8009954:	4638      	mov	r0, r7
 8009956:	f7fe ff8f 	bl	8008878 <_malloc_r>
 800995a:	4605      	mov	r5, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	d0f2      	beq.n	8009946 <_realloc_r+0x1c>
 8009960:	4631      	mov	r1, r6
 8009962:	4622      	mov	r2, r4
 8009964:	f7ff ffbc 	bl	80098e0 <memcpy>
 8009968:	4631      	mov	r1, r6
 800996a:	4638      	mov	r0, r7
 800996c:	f7fe ff36 	bl	80087dc <_free_r>
 8009970:	e7e9      	b.n	8009946 <_realloc_r+0x1c>
 8009972:	4635      	mov	r5, r6
 8009974:	e7e7      	b.n	8009946 <_realloc_r+0x1c>
	...

08009978 <_read_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4c07      	ldr	r4, [pc, #28]	; (8009998 <_read_r+0x20>)
 800997c:	4605      	mov	r5, r0
 800997e:	4608      	mov	r0, r1
 8009980:	4611      	mov	r1, r2
 8009982:	2200      	movs	r2, #0
 8009984:	6022      	str	r2, [r4, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	f7f7 f884 	bl	8000a94 <_read>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_read_r+0x1e>
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	b103      	cbz	r3, 8009996 <_read_r+0x1e>
 8009994:	602b      	str	r3, [r5, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20000858 	.word	0x20000858

0800999c <_fstat_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4c07      	ldr	r4, [pc, #28]	; (80099bc <_fstat_r+0x20>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4605      	mov	r5, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	f7f7 f8c9 	bl	8000b40 <_fstat>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d102      	bne.n	80099b8 <_fstat_r+0x1c>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	b103      	cbz	r3, 80099b8 <_fstat_r+0x1c>
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	bd38      	pop	{r3, r4, r5, pc}
 80099ba:	bf00      	nop
 80099bc:	20000858 	.word	0x20000858

080099c0 <_isatty_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4c06      	ldr	r4, [pc, #24]	; (80099dc <_isatty_r+0x1c>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	4605      	mov	r5, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	6023      	str	r3, [r4, #0]
 80099cc:	f7f7 f8c8 	bl	8000b60 <_isatty>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_isatty_r+0x1a>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	b103      	cbz	r3, 80099da <_isatty_r+0x1a>
 80099d8:	602b      	str	r3, [r5, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	20000858 	.word	0x20000858

080099e0 <_malloc_usable_size_r>:
 80099e0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f1a0 0004 	sub.w	r0, r0, #4
 80099ea:	bfbc      	itt	lt
 80099ec:	580b      	ldrlt	r3, [r1, r0]
 80099ee:	18c0      	addlt	r0, r0, r3
 80099f0:	4770      	bx	lr
	...

080099f4 <_init>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr

08009a00 <_fini>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	bf00      	nop
 8009a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a06:	bc08      	pop	{r3}
 8009a08:	469e      	mov	lr, r3
 8009a0a:	4770      	bx	lr
